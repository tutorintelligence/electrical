
Cain_V1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003914  08003914  00004914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800394c  0800394c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800394c  0800394c  0000494c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003954  08003954  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00004954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003958  08003958  00004958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800395c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08003968  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08003968  000051b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012026  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ad  00000000  00000000  0001705b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00019708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  0001a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002051  00000000  00000000  0001b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152b6  00000000  00000000  0001d729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9d6e  00000000  00000000  000329df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  000ec790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f1414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080038fc 	.word	0x080038fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080038fc 	.word	0x080038fc

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b98c 	b.w	8000554 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	468e      	mov	lr, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d962      	bls.n	8000330 <__udivmoddi4+0xdc>
 800026a:	fab2 f682 	clz	r6, r2
 800026e:	b14e      	cbz	r6, 8000284 <__udivmoddi4+0x30>
 8000270:	f1c6 0320 	rsb	r3, r6, #32
 8000274:	fa01 f806 	lsl.w	r8, r1, r6
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	40b7      	lsls	r7, r6
 800027e:	ea43 0808 	orr.w	r8, r3, r8
 8000282:	40b4      	lsls	r4, r6
 8000284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fb0e 8811 	mls	r8, lr, r1, r8
 8000294:	fb01 f20c 	mul.w	r2, r1, ip
 8000298:	0c23      	lsrs	r3, r4, #16
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	429a      	cmp	r2, r3
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x62>
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a8:	f080 80eb 	bcs.w	8000482 <__udivmoddi4+0x22e>
 80002ac:	429a      	cmp	r2, r3
 80002ae:	f240 80e8 	bls.w	8000482 <__udivmoddi4+0x22e>
 80002b2:	3902      	subs	r1, #2
 80002b4:	443b      	add	r3, r7
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	fbb2 f0fe 	udiv	r0, r2, lr
 80002bc:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	b2a3      	uxth	r3, r4
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	459c      	cmp	ip, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d4:	f080 80d7 	bcs.w	8000486 <__udivmoddi4+0x232>
 80002d8:	459c      	cmp	ip, r3
 80002da:	f240 80d4 	bls.w	8000486 <__udivmoddi4+0x232>
 80002de:	443b      	add	r3, r7
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	eba3 030c 	sub.w	r3, r3, ip
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa2>
 80002ee:	2200      	movs	r2, #0
 80002f0:	40f3      	lsrs	r3, r6
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xb6>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb0>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa2>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x14c>
 8000312:	4573      	cmp	r3, lr
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xc8>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 8108 	bhi.w	800052c <__udivmoddi4+0x2d8>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000322:	2001      	movs	r0, #1
 8000324:	4690      	mov	r8, r2
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e5      	beq.n	80002f6 <__udivmoddi4+0xa2>
 800032a:	e9c5 4800 	strd	r4, r8, [r5]
 800032e:	e7e2      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000330:	2a00      	cmp	r2, #0
 8000332:	f000 8091 	beq.w	8000458 <__udivmoddi4+0x204>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	2e00      	cmp	r6, #0
 800033c:	f040 80a5 	bne.w	800048a <__udivmoddi4+0x236>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	2101      	movs	r1, #1
 8000344:	0c03      	lsrs	r3, r0, #16
 8000346:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034a:	b280      	uxth	r0, r0
 800034c:	b2bc      	uxth	r4, r7
 800034e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000352:	fb0e 221c 	mls	r2, lr, ip, r2
 8000356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035a:	fb04 f20c 	mul.w	r2, r4, ip
 800035e:	429a      	cmp	r2, r3
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x11e>
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x11c>
 800036a:	429a      	cmp	r2, r3
 800036c:	f200 80e3 	bhi.w	8000536 <__udivmoddi4+0x2e2>
 8000370:	46c4      	mov	ip, r8
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	fbb3 f2fe 	udiv	r2, r3, lr
 8000378:	fb0e 3312 	mls	r3, lr, r2, r3
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	429c      	cmp	r4, r3
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x144>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f102 30ff 	add.w	r0, r2, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x142>
 8000390:	429c      	cmp	r4, r3
 8000392:	f200 80cd 	bhi.w	8000530 <__udivmoddi4+0x2dc>
 8000396:	4602      	mov	r2, r0
 8000398:	1b1b      	subs	r3, r3, r4
 800039a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x98>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa2e fa06 	lsr.w	sl, lr, r6
 80003b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b4:	fbba f8f9 	udiv	r8, sl, r9
 80003b8:	fa0e fe01 	lsl.w	lr, lr, r1
 80003bc:	fa20 f306 	lsr.w	r3, r0, r6
 80003c0:	fb09 aa18 	mls	sl, r9, r8, sl
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	ea43 030e 	orr.w	r3, r3, lr
 80003cc:	fa00 fe01 	lsl.w	lr, r0, r1
 80003d0:	fb08 f00c 	mul.w	r0, r8, ip
 80003d4:	0c1c      	lsrs	r4, r3, #16
 80003d6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003da:	42a0      	cmp	r0, r4
 80003dc:	fa02 f201 	lsl.w	r2, r2, r1
 80003e0:	d90a      	bls.n	80003f8 <__udivmoddi4+0x1a4>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 809e 	bcs.w	8000528 <__udivmoddi4+0x2d4>
 80003ec:	42a0      	cmp	r0, r4
 80003ee:	f240 809b 	bls.w	8000528 <__udivmoddi4+0x2d4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	1a24      	subs	r4, r4, r0
 80003fa:	b298      	uxth	r0, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800040c:	45a4      	cmp	ip, r4
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f103 30ff 	add.w	r0, r3, #4294967295
 8000416:	f080 8085 	bcs.w	8000524 <__udivmoddi4+0x2d0>
 800041a:	45a4      	cmp	ip, r4
 800041c:	f240 8082 	bls.w	8000524 <__udivmoddi4+0x2d0>
 8000420:	3b02      	subs	r3, #2
 8000422:	443c      	add	r4, r7
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	eba4 040c 	sub.w	r4, r4, ip
 800042c:	fba0 8c02 	umull	r8, ip, r0, r2
 8000430:	4564      	cmp	r4, ip
 8000432:	4643      	mov	r3, r8
 8000434:	46e1      	mov	r9, ip
 8000436:	d364      	bcc.n	8000502 <__udivmoddi4+0x2ae>
 8000438:	d061      	beq.n	80004fe <__udivmoddi4+0x2aa>
 800043a:	b15d      	cbz	r5, 8000454 <__udivmoddi4+0x200>
 800043c:	ebbe 0203 	subs.w	r2, lr, r3
 8000440:	eb64 0409 	sbc.w	r4, r4, r9
 8000444:	fa04 f606 	lsl.w	r6, r4, r6
 8000448:	fa22 f301 	lsr.w	r3, r2, r1
 800044c:	431e      	orrs	r6, r3
 800044e:	40cc      	lsrs	r4, r1
 8000450:	e9c5 6400 	strd	r6, r4, [r5]
 8000454:	2100      	movs	r1, #0
 8000456:	e74e      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000458:	fbb1 fcf2 	udiv	ip, r1, r2
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000462:	b280      	uxth	r0, r0
 8000464:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000468:	463b      	mov	r3, r7
 800046a:	fbb1 f1f7 	udiv	r1, r1, r7
 800046e:	4638      	mov	r0, r7
 8000470:	463c      	mov	r4, r7
 8000472:	46b8      	mov	r8, r7
 8000474:	46be      	mov	lr, r7
 8000476:	2620      	movs	r6, #32
 8000478:	eba2 0208 	sub.w	r2, r2, r8
 800047c:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000480:	e765      	b.n	800034e <__udivmoddi4+0xfa>
 8000482:	4601      	mov	r1, r0
 8000484:	e717      	b.n	80002b6 <__udivmoddi4+0x62>
 8000486:	4610      	mov	r0, r2
 8000488:	e72b      	b.n	80002e2 <__udivmoddi4+0x8e>
 800048a:	f1c6 0120 	rsb	r1, r6, #32
 800048e:	fa2e fc01 	lsr.w	ip, lr, r1
 8000492:	40b7      	lsls	r7, r6
 8000494:	fa0e fe06 	lsl.w	lr, lr, r6
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	ea41 010e 	orr.w	r1, r1, lr
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	fbbc f8fe 	udiv	r8, ip, lr
 80004a8:	b2bc      	uxth	r4, r7
 80004aa:	fb0e cc18 	mls	ip, lr, r8, ip
 80004ae:	fb08 f904 	mul.w	r9, r8, r4
 80004b2:	0c0a      	lsrs	r2, r1, #16
 80004b4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80004b8:	40b0      	lsls	r0, r6
 80004ba:	4591      	cmp	r9, r2
 80004bc:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004c0:	b280      	uxth	r0, r0
 80004c2:	d93e      	bls.n	8000542 <__udivmoddi4+0x2ee>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f108 3cff 	add.w	ip, r8, #4294967295
 80004ca:	d201      	bcs.n	80004d0 <__udivmoddi4+0x27c>
 80004cc:	4591      	cmp	r9, r2
 80004ce:	d81f      	bhi.n	8000510 <__udivmoddi4+0x2bc>
 80004d0:	eba2 0209 	sub.w	r2, r2, r9
 80004d4:	fbb2 f9fe 	udiv	r9, r2, lr
 80004d8:	fb09 f804 	mul.w	r8, r9, r4
 80004dc:	fb0e 2a19 	mls	sl, lr, r9, r2
 80004e0:	b28a      	uxth	r2, r1
 80004e2:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80004e6:	4542      	cmp	r2, r8
 80004e8:	d229      	bcs.n	800053e <__udivmoddi4+0x2ea>
 80004ea:	18ba      	adds	r2, r7, r2
 80004ec:	f109 31ff 	add.w	r1, r9, #4294967295
 80004f0:	d2c2      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f2:	4542      	cmp	r2, r8
 80004f4:	d2c0      	bcs.n	8000478 <__udivmoddi4+0x224>
 80004f6:	f1a9 0102 	sub.w	r1, r9, #2
 80004fa:	443a      	add	r2, r7
 80004fc:	e7bc      	b.n	8000478 <__udivmoddi4+0x224>
 80004fe:	45c6      	cmp	lr, r8
 8000500:	d29b      	bcs.n	800043a <__udivmoddi4+0x1e6>
 8000502:	ebb8 0302 	subs.w	r3, r8, r2
 8000506:	eb6c 0c07 	sbc.w	ip, ip, r7
 800050a:	3801      	subs	r0, #1
 800050c:	46e1      	mov	r9, ip
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1e6>
 8000510:	eba7 0909 	sub.w	r9, r7, r9
 8000514:	444a      	add	r2, r9
 8000516:	fbb2 f9fe 	udiv	r9, r2, lr
 800051a:	f1a8 0c02 	sub.w	ip, r8, #2
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7db      	b.n	80004dc <__udivmoddi4+0x288>
 8000524:	4603      	mov	r3, r0
 8000526:	e77d      	b.n	8000424 <__udivmoddi4+0x1d0>
 8000528:	46d0      	mov	r8, sl
 800052a:	e765      	b.n	80003f8 <__udivmoddi4+0x1a4>
 800052c:	4608      	mov	r0, r1
 800052e:	e6fa      	b.n	8000326 <__udivmoddi4+0xd2>
 8000530:	443b      	add	r3, r7
 8000532:	3a02      	subs	r2, #2
 8000534:	e730      	b.n	8000398 <__udivmoddi4+0x144>
 8000536:	f1ac 0c02 	sub.w	ip, ip, #2
 800053a:	443b      	add	r3, r7
 800053c:	e719      	b.n	8000372 <__udivmoddi4+0x11e>
 800053e:	4649      	mov	r1, r9
 8000540:	e79a      	b.n	8000478 <__udivmoddi4+0x224>
 8000542:	eba2 0209 	sub.w	r2, r2, r9
 8000546:	fbb2 f9fe 	udiv	r9, r2, lr
 800054a:	46c4      	mov	ip, r8
 800054c:	fb09 f804 	mul.w	r8, r9, r4
 8000550:	e7c4      	b.n	80004dc <__udivmoddi4+0x288>
 8000552:	bf00      	nop

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 fc9c 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f82a 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f9d6 	bl	8000914 <MX_GPIO_Init>
  MX_DMA_Init();
 8000568:	f000 f9b6 	bl	80008d8 <MX_DMA_Init>
  MX_ADC1_Init();
 800056c:	f000 f87e 	bl	800066c <MX_ADC1_Init>
  MX_CAN2_Init();
 8000570:	f000 f8d8 	bl	8000724 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000574:	f000 f90a 	bl	800078c <MX_I2C2_Init>
  MX_UART4_Init();
 8000578:	f000 f984 	bl	8000884 <MX_UART4_Init>
  MX_TIM3_Init();
 800057c:	f000 f934 	bl	80007e8 <MX_TIM3_Init>
//	  HAL_Delay(500);
//	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port ,LED_GREEN_Pin);
//	  HAL_Delay(500);
//	  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port ,LED_BLUE_Pin);
//	  HAL_Delay(500);
	  HAL_GPIO_TogglePin(SOLENOID_GPIO_Port ,SOLENOID_Pin);
 8000580:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000584:	480a      	ldr	r0, [pc, #40]	@ (80005b0 <main+0x58>)
 8000586:	f001 fe51 	bl	800222c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800058a:	2064      	movs	r0, #100	@ 0x64
 800058c:	f000 fce6 	bl	8000f5c <HAL_Delay>
	  HAL_GPIO_TogglePin(SOLENOID_GPIO_Port ,SOLENOID_Pin);
 8000590:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000594:	4806      	ldr	r0, [pc, #24]	@ (80005b0 <main+0x58>)
 8000596:	f001 fe49 	bl	800222c <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	f000 fcde 	bl	8000f5c <HAL_Delay>
	  count = count + 1;
 80005a0:	4b04      	ldr	r3, [pc, #16]	@ (80005b4 <main+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a03      	ldr	r2, [pc, #12]	@ (80005b4 <main+0x5c>)
 80005a8:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(SOLENOID_GPIO_Port ,SOLENOID_Pin);
 80005aa:	bf00      	nop
 80005ac:	e7e8      	b.n	8000580 <main+0x28>
 80005ae:	bf00      	nop
 80005b0:	40011000 	.word	0x40011000
 80005b4:	200001a8 	.word	0x200001a8

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09c      	sub	sp, #112	@ 0x70
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005c2:	2238      	movs	r2, #56	@ 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f96c 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2220      	movs	r2, #32
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 f95e 	bl	80038a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000600:	4618      	mov	r0, r3
 8000602:	f001 ff71 	bl	80024e8 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800060c:	f000 fa14 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000620:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fa71 	bl	8002b14 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000638:	f000 f9fe 	bl	8000a38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800063c:	2302      	movs	r3, #2
 800063e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000640:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000644:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fc91 	bl	8002f70 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000654:	f000 f9f0 	bl	8000a38 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <SystemClock_Config+0xb0>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]
}
 800065e:	bf00      	nop
 8000660:	3770      	adds	r7, #112	@ 0x70
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	42420070 	.word	0x42420070

0800066c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <MX_ADC1_Init+0xb0>)
 800067e:	4a28      	ldr	r2, [pc, #160]	@ (8000720 <MX_ADC1_Init+0xb4>)
 8000680:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000682:	4b26      	ldr	r3, [pc, #152]	@ (800071c <MX_ADC1_Init+0xb0>)
 8000684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000688:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068a:	4b24      	ldr	r3, [pc, #144]	@ (800071c <MX_ADC1_Init+0xb0>)
 800068c:	2200      	movs	r2, #0
 800068e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <MX_ADC1_Init+0xb0>)
 8000692:	2200      	movs	r2, #0
 8000694:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000696:	4b21      	ldr	r3, [pc, #132]	@ (800071c <MX_ADC1_Init+0xb0>)
 8000698:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800069c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <MX_ADC1_Init+0xb0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_ADC1_Init+0xb0>)
 80006a6:	2203      	movs	r2, #3
 80006a8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006aa:	481c      	ldr	r0, [pc, #112]	@ (800071c <MX_ADC1_Init+0xb0>)
 80006ac:	f000 fc7a 	bl	8000fa4 <HAL_ADC_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80006b6:	f000 f9bf 	bl	8000a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006ba:	2306      	movs	r3, #6
 80006bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006be:	2301      	movs	r3, #1
 80006c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80006c2:	2305      	movs	r3, #5
 80006c4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <MX_ADC1_Init+0xb0>)
 80006cc:	f000 fe14 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 f9af 	bl	8000a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006da:	2309      	movs	r3, #9
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006de:	2302      	movs	r3, #2
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	@ (800071c <MX_ADC1_Init+0xb0>)
 80006e8:	f000 fe06 	bl	80012f8 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80006f2:	f000 f9a1 	bl	8000a38 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80006f6:	2310      	movs	r3, #16
 80006f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	@ (800071c <MX_ADC1_Init+0xb0>)
 8000704:	f000 fdf8 	bl	80012f8 <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800070e:	f000 f993 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000028 	.word	0x20000028
 8000720:	40012400 	.word	0x40012400

08000724 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_CAN2_Init+0x60>)
 800072a:	4a17      	ldr	r2, [pc, #92]	@ (8000788 <MX_CAN2_Init+0x64>)
 800072c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000730:	2210      	movs	r2, #16
 8000732:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_CAN2_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_CAN2_Init+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000754:	2200      	movs	r2, #0
 8000756:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <MX_CAN2_Init+0x60>)
 800075a:	2200      	movs	r2, #0
 800075c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000760:	2200      	movs	r2, #0
 8000762:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_CAN2_Init+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	@ (8000784 <MX_CAN2_Init+0x60>)
 8000772:	f000 ff03 	bl	800157c <HAL_CAN_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 f95c 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	2000009c 	.word	0x2000009c
 8000788:	40006800 	.word	0x40006800

0800078c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <MX_I2C2_Init+0x50>)
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <MX_I2C2_Init+0x54>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_I2C2_Init+0x50>)
 8000798:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_I2C2_Init+0x58>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_I2C2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007bc:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <MX_I2C2_Init+0x50>)
 80007ca:	f001 fd49 	bl	8002260 <HAL_I2C_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007d4:	f000 f930 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000c4 	.word	0x200000c4
 80007e0:	40005800 	.word	0x40005800
 80007e4:	000186a0 	.word	0x000186a0

080007e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000804:	4b1d      	ldr	r3, [pc, #116]	@ (800087c <MX_TIM3_Init+0x94>)
 8000806:	4a1e      	ldr	r2, [pc, #120]	@ (8000880 <MX_TIM3_Init+0x98>)
 8000808:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_TIM3_Init+0x94>)
 800080c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000812:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_TIM3_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_TIM3_Init+0x94>)
 800081a:	2263      	movs	r2, #99	@ 0x63
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_TIM3_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_TIM3_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <MX_TIM3_Init+0x94>)
 800082c:	f002 fcd2 	bl	80031d4 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f8ff 	bl	8000a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	@ (800087c <MX_TIM3_Init+0x94>)
 8000848:	f002 fd13 	bl	8003272 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f8f1 	bl	8000a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000856:	2320      	movs	r3, #32
 8000858:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	463b      	mov	r3, r7
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_TIM3_Init+0x94>)
 8000864:	f002 feda 	bl	800361c <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800086e:	f000 f8e3 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000118 	.word	0x20000118
 8000880:	40000400 	.word	0x40000400

08000884 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <MX_UART4_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <MX_UART4_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_UART4_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <MX_UART4_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_UART4_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <MX_UART4_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_UART4_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <MX_UART4_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <MX_UART4_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_UART4_Init+0x4c>)
 80008bc:	f002 ff14 	bl	80036e8 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 f8b7 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000160 	.word	0x20000160
 80008d4:	40004c00 	.word	0x40004c00

080008d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_DMA_Init+0x38>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <MX_DMA_Init+0x38>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_DMA_Init+0x38>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	200b      	movs	r0, #11
 80008fc:	f001 f811 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000900:	200b      	movs	r0, #11
 8000902:	f001 f82a 	bl	800195a <HAL_NVIC_EnableIRQ>

}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0310 	add.w	r3, r7, #16
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000928:	4b3e      	ldr	r3, [pc, #248]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b3b      	ldr	r3, [pc, #236]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0310 	and.w	r3, r3, #16
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000940:	4b38      	ldr	r3, [pc, #224]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a37      	ldr	r2, [pc, #220]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000946:	f043 0320 	orr.w	r3, r3, #32
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b35      	ldr	r3, [pc, #212]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0320 	and.w	r3, r3, #32
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b32      	ldr	r3, [pc, #200]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a31      	ldr	r2, [pc, #196]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a2b      	ldr	r2, [pc, #172]	@ (8000a24 <MX_GPIO_Init+0x110>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_GPIO_Init+0x110>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098e:	4826      	ldr	r0, [pc, #152]	@ (8000a28 <MX_GPIO_Init+0x114>)
 8000990:	f001 fc34 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|SOLENOID_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 800099a:	4823      	ldr	r0, [pc, #140]	@ (8000a28 <MX_GPIO_Init+0x114>)
 800099c:	f001 fc2e 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 80009a6:	4821      	ldr	r0, [pc, #132]	@ (8000a2c <MX_GPIO_Init+0x118>)
 80009a8:	f001 fc28 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin TEST_LED_Pin SOLENOID_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|TEST_LED_Pin|SOLENOID_Pin;
 80009ac:	f44f 43c2 	mov.w	r3, #24832	@ 0x6100
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <MX_GPIO_Init+0x114>)
 80009c6:	f001 fa95 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80009ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <MX_GPIO_Init+0x11c>)
 80009e0:	f001 fa88 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009e4:	2304      	movs	r3, #4
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <MX_GPIO_Init+0x120>)
 80009f8:	f001 fa7c 	bl	8001ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 80009fc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_GPIO_Init+0x118>)
 8000a16:	f001 fa6d 	bl	8001ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40010c00 	.word	0x40010c00
 8000a30:	40010800 	.word	0x40010800
 8000a34:	40011400 	.word	0x40011400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	@ (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a38      	ldr	r2, [pc, #224]	@ (8000ba4 <HAL_ADC_MspInit+0xfc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d168      	bne.n	8000b9a <HAL_ADC_MspInit+0xf2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac8:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a36      	ldr	r2, [pc, #216]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae0:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a30      	ldr	r2, [pc, #192]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b2e      	ldr	r3, [pc, #184]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b28      	ldr	r3, [pc, #160]	@ (8000ba8 <HAL_ADC_MspInit+0x100>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = PRESSURE_Pin;
 8000b10:	2340      	movs	r3, #64	@ 0x40
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	2303      	movs	r3, #3
 8000b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PRESSURE_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4823      	ldr	r0, [pc, #140]	@ (8000bac <HAL_ADC_MspInit+0x104>)
 8000b20:	f001 f9e8 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Pin;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	4619      	mov	r1, r3
 8000b32:	481f      	ldr	r0, [pc, #124]	@ (8000bb0 <HAL_ADC_MspInit+0x108>)
 8000b34:	f001 f9de 	bl	8001ef4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb8 <HAL_ADC_MspInit+0x110>)
 8000b3c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b62:	2220      	movs	r2, #32
 8000b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b6e:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b70:	f000 ff0e 	bl	8001990 <HAL_DMA_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8000b7a:	f7ff ff5d 	bl	8000a38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b82:	621a      	str	r2, [r3, #32]
 8000b84:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_ADC_MspInit+0x10c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2012      	movs	r0, #18
 8000b90:	f000 fec7 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b94:	2012      	movs	r0, #18
 8000b96:	f000 fee0 	bl	800195a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	@ 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40012400 	.word	0x40012400
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	20000058 	.word	0x20000058
 8000bb8:	40020008 	.word	0x40020008

08000bbc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08a      	sub	sp, #40	@ 0x28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN2)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <HAL_CAN_MspInit+0xa4>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d13d      	bne.n	8000c58 <HAL_CAN_MspInit+0x9c>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	4a20      	ldr	r2, [pc, #128]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000be2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000be6:	61d3      	str	r3, [r2, #28]
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000bfa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bfe:	61d3      	str	r3, [r2, #28]
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000c02:	69db      	ldr	r3, [r3, #28]
 8000c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000c12:	f043 0308 	orr.w	r3, r3, #8
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_CAN_MspInit+0xa8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0318 	add.w	r3, r7, #24
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <HAL_CAN_MspInit+0xac>)
 8000c3a:	f001 f95b 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 0318 	add.w	r3, r7, #24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4805      	ldr	r0, [pc, #20]	@ (8000c68 <HAL_CAN_MspInit+0xac>)
 8000c54:	f001 f94e 	bl	8001ef4 <HAL_GPIO_Init>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	@ 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40006800 	.word	0x40006800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a16      	ldr	r2, [pc, #88]	@ (8000ce0 <HAL_I2C_MspInit+0x74>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d124      	bne.n	8000cd6 <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a14      	ldr	r2, [pc, #80]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000c92:	f043 0308 	orr.w	r3, r3, #8
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0308 	and.w	r3, r3, #8
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ca4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	@ (8000ce8 <HAL_I2C_MspInit+0x7c>)
 8000cba:	f001 f91b 	bl	8001ef4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000cc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_I2C_MspInit+0x78>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40005800 	.word	0x40005800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010c00 	.word	0x40010c00

08000cec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a09      	ldr	r2, [pc, #36]	@ (8000d20 <HAL_TIM_Base_MspInit+0x34>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10b      	bne.n	8000d16 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_TIM_Base_MspInit+0x38>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40000400 	.word	0x40000400
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a1c      	ldr	r2, [pc, #112]	@ (8000db4 <HAL_UART_MspInit+0x8c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d131      	bne.n	8000dac <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d4e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d52:	61d3      	str	r3, [r2, #28]
 8000d54:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_UART_MspInit+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480b      	ldr	r0, [pc, #44]	@ (8000dbc <HAL_UART_MspInit+0x94>)
 8000d8e:	f001 f8b1 	bl	8001ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_UART_MspInit+0x94>)
 8000da8:	f001 f8a4 	bl	8001ef4 <HAL_GPIO_Init>

    /* USER CODE END UART4_MspInit 1 */

  }

}
 8000dac:	bf00      	nop
 8000dae:	3720      	adds	r7, #32
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40004c00 	.word	0x40004c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <NMI_Handler+0x4>

08000dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 f888 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e1c:	4802      	ldr	r0, [pc, #8]	@ (8000e28 <DMA1_Channel1_IRQHandler+0x10>)
 8000e1e:	f000 fe2d 	bl	8001a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000058 	.word	0x20000058

08000e2c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e30:	4802      	ldr	r0, [pc, #8]	@ (8000e3c <ADC1_2_IRQHandler+0x10>)
 8000e32:	f000 f98f 	bl	8001154 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000028 	.word	0x20000028

08000e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff fff8 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e52:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e68:	4c09      	ldr	r4, [pc, #36]	@ (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e76:	f002 fd1d 	bl	80038b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7a:	f7ff fb6d 	bl	8000558 <main>
  bx lr
 8000e7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e88:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e90:	200001b0 	.word	0x200001b0

08000e94 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <CAN1_RX0_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x28>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x28>)
 8000ea2:	f043 0310 	orr.w	r3, r3, #16
 8000ea6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fd2f 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	200f      	movs	r0, #15
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fdc6 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fd47 	bl	8001976 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f000 fd0f 	bl	8001922 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	@ (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a03      	ldr	r2, [pc, #12]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000008 	.word	0x20000008
 8000f44:	200001ac 	.word	0x200001ac

08000f48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b02      	ldr	r3, [pc, #8]	@ (8000f58 <HAL_GetTick+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	200001ac 	.word	0x200001ac

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff fff0 	bl	8000f48 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffe0 	bl	8000f48 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fac:	2300      	movs	r3, #0
 8000fae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e0be      	b.n	8001144 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fd60 	bl	8000aa8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 fa7d 	bl	80014e8 <ADC_ConversionStop_Disable>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f040 8099 	bne.w	8001132 <HAL_ADC_Init+0x18e>
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 8095 	bne.w	8001132 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001010:	f023 0302 	bic.w	r3, r3, #2
 8001014:	f043 0202 	orr.w	r2, r3, #2
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001024:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	7b1b      	ldrb	r3, [r3, #12]
 800102a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800102c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	4313      	orrs	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800103c:	d003      	beq.n	8001046 <HAL_ADC_Init+0xa2>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d102      	bne.n	800104c <HAL_ADC_Init+0xa8>
 8001046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104a:	e000      	b.n	800104e <HAL_ADC_Init+0xaa>
 800104c:	2300      	movs	r3, #0
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7d1b      	ldrb	r3, [r3, #20]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d119      	bne.n	8001090 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7b1b      	ldrb	r3, [r3, #12]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d109      	bne.n	8001078 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	3b01      	subs	r3, #1
 800106a:	035a      	lsls	r2, r3, #13
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	e00b      	b.n	8001090 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107c:	f043 0220 	orr.w	r2, r3, #32
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001088:	f043 0201 	orr.w	r2, r3, #1
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <HAL_ADC_Init+0x1a8>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c0:	d003      	beq.n	80010ca <HAL_ADC_Init+0x126>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d104      	bne.n	80010d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	051b      	lsls	r3, r3, #20
 80010d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <HAL_ADC_Init+0x1ac>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d10b      	bne.n	8001110 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800110e:	e018      	b.n	8001142 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001114:	f023 0312 	bic.w	r3, r3, #18
 8001118:	f043 0210 	orr.w	r2, r3, #16
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001124:	f043 0201 	orr.w	r2, r3, #1
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001130:	e007      	b.n	8001142 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001136:	f043 0210 	orr.w	r2, r3, #16
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	ffe1f7fd 	.word	0xffe1f7fd
 8001150:	ff1f0efe 	.word	0xff1f0efe

08001154 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03e      	beq.n	80011f4 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d039      	beq.n	80011f4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001184:	f003 0310 	and.w	r3, r3, #16
 8001188:	2b00      	cmp	r3, #0
 800118a:	d105      	bne.n	8001198 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80011a2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80011a6:	d11d      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d119      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0220 	bic.w	r2, r2, #32
 80011be:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f874 	bl	80012d2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f06f 0212 	mvn.w	r2, #18
 80011f2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d04d      	beq.n	800129a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d048      	beq.n	800129a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	2b00      	cmp	r3, #0
 8001212:	d105      	bne.n	8001220 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800122a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 800122e:	d012      	beq.n	8001256 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800123a:	2b00      	cmp	r3, #0
 800123c:	d125      	bne.n	800128a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001248:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800124c:	d11d      	bne.n	800128a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001252:	2b00      	cmp	r3, #0
 8001254:	d119      	bne.n	800128a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001264:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	f043 0201 	orr.w	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f96d 	bl	800156a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f06f 020c 	mvn.w	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f812 	bl	80012e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f06f 0201 	mvn.w	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
	...

080012f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x20>
 8001314:	2302      	movs	r3, #2
 8001316:	e0dc      	b.n	80014d2 <HAL_ADC_ConfigChannel+0x1da>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b06      	cmp	r3, #6
 8001326:	d81c      	bhi.n	8001362 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b05      	subs	r3, #5
 800133a:	221f      	movs	r2, #31
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	4019      	ands	r1, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b05      	subs	r3, #5
 8001354:	fa00 f203 	lsl.w	r2, r0, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001360:	e03c      	b.n	80013dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d81c      	bhi.n	80013a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b23      	subs	r3, #35	@ 0x23
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	4019      	ands	r1, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3b23      	subs	r3, #35	@ 0x23
 8001396:	fa00 f203 	lsl.w	r2, r0, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a2:	e01b      	b.n	80013dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b41      	subs	r3, #65	@ 0x41
 80013b6:	221f      	movs	r2, #31
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	4019      	ands	r1, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	3b41      	subs	r3, #65	@ 0x41
 80013d0:	fa00 f203 	lsl.w	r2, r0, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	d91c      	bls.n	800141e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68d9      	ldr	r1, [r3, #12]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4413      	add	r3, r2
 80013f4:	3b1e      	subs	r3, #30
 80013f6:	2207      	movs	r2, #7
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4019      	ands	r1, r3
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6898      	ldr	r0, [r3, #8]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	3b1e      	subs	r3, #30
 8001410:	fa00 f203 	lsl.w	r2, r0, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	e019      	b.n	8001452 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6919      	ldr	r1, [r3, #16]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	2207      	movs	r2, #7
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	4019      	ands	r1, r3
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6898      	ldr	r0, [r3, #8]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b10      	cmp	r3, #16
 8001458:	d003      	beq.n	8001462 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800145e:	2b11      	cmp	r3, #17
 8001460:	d132      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a1d      	ldr	r2, [pc, #116]	@ (80014dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d125      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d126      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001488:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d11a      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9a      	lsrs	r2, r3, #18
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x1b2>
 80014b6:	e007      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014bc:	f043 0220 	orr.w	r2, r3, #32
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40012400 	.word	0x40012400
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d12e      	bne.n	8001560 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001512:	f7ff fd19 	bl	8000f48 <HAL_GetTick>
 8001516:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001518:	e01b      	b.n	8001552 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800151a:	f7ff fd15 	bl	8000f48 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d914      	bls.n	8001552 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10d      	bne.n	8001552 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e007      	b.n	8001562 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d0dc      	beq.n	800151a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0ed      	b.n	800176a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fb0e 	bl	8000bbc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015b0:	f7ff fcca 	bl	8000f48 <HAL_GetTick>
 80015b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b6:	e012      	b.n	80015de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b8:	f7ff fcc6 	bl	8000f48 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b0a      	cmp	r3, #10
 80015c4:	d90b      	bls.n	80015de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0c5      	b.n	800176a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0e5      	beq.n	80015b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0202 	bic.w	r2, r2, #2
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015fc:	f7ff fca4 	bl	8000f48 <HAL_GetTick>
 8001600:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001602:	e012      	b.n	800162a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001604:	f7ff fca0 	bl	8000f48 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d90b      	bls.n	800162a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001616:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2205      	movs	r2, #5
 8001622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e09f      	b.n	800176a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e5      	bne.n	8001604 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e1b      	ldrb	r3, [r3, #24]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d108      	bne.n	8001652 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e5b      	ldrb	r3, [r3, #25]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d108      	bne.n	800167c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	e007      	b.n	800168c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800168a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e9b      	ldrb	r3, [r3, #26]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0220 	orr.w	r2, r2, #32
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0220 	bic.w	r2, r2, #32
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7edb      	ldrb	r3, [r3, #27]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0210 	bic.w	r2, r2, #16
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0210 	orr.w	r2, r2, #16
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7f1b      	ldrb	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0208 	orr.w	r2, r2, #8
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0208 	bic.w	r2, r2, #8
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7f5b      	ldrb	r3, [r3, #29]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0204 	orr.w	r2, r2, #4
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0204 	bic.w	r2, r2, #4
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	ea42 0103 	orr.w	r1, r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4906      	ldr	r1, [pc, #24]	@ (800180c <__NVIC_EnableIRQ+0x34>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff90 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff2d 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001934:	f7ff ff42 	bl	80017bc <__NVIC_GetPriorityGrouping>
 8001938:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	6978      	ldr	r0, [r7, #20]
 8001940:	f7ff ff90 	bl	8001864 <NVIC_EncodePriority>
 8001944:	4602      	mov	r2, r0
 8001946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff5f 	bl	8001810 <__NVIC_SetPriority>
}
 8001952:	bf00      	nop
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff35 	bl	80017d8 <__NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffa2 	bl	80018c8 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e059      	b.n	8001a5a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <HAL_DMA_Init+0xd4>)
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d80f      	bhi.n	80019d2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a68 <HAL_DMA_Init+0xd8>)
 80019ba:	4413      	add	r3, r2
 80019bc:	4a2b      	ldr	r2, [pc, #172]	@ (8001a6c <HAL_DMA_Init+0xdc>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	009a      	lsls	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a28      	ldr	r2, [pc, #160]	@ (8001a70 <HAL_DMA_Init+0xe0>)
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019d0:	e00e      	b.n	80019f0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_DMA_Init+0xe4>)
 80019da:	4413      	add	r3, r2
 80019dc:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <HAL_DMA_Init+0xdc>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_DMA_Init+0xe8>)
 80019ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a06:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001a0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40020407 	.word	0x40020407
 8001a68:	bffdfff8 	.word	0xbffdfff8
 8001a6c:	cccccccd 	.word	0xcccccccd
 8001a70:	40020000 	.word	0x40020000
 8001a74:	bffdfbf8 	.word	0xbffdfbf8
 8001a78:	40020400 	.word	0x40020400

08001a7c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	2204      	movs	r2, #4
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 80f1 	beq.w	8001c88 <HAL_DMA_IRQHandler+0x20c>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80eb 	beq.w	8001c88 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0320 	and.w	r3, r3, #32
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0204 	bic.w	r2, r2, #4
 8001ace:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c54 <HAL_DMA_IRQHandler+0x1d8>)
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d958      	bls.n	8001b8e <HAL_DMA_IRQHandler+0x112>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <HAL_DMA_IRQHandler+0x1dc>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d04f      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x10a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5c      	ldr	r2, [pc, #368]	@ (8001c5c <HAL_DMA_IRQHandler+0x1e0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d048      	beq.n	8001b82 <HAL_DMA_IRQHandler+0x106>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c60 <HAL_DMA_IRQHandler+0x1e4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d040      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x100>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a59      	ldr	r2, [pc, #356]	@ (8001c64 <HAL_DMA_IRQHandler+0x1e8>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d038      	beq.n	8001b76 <HAL_DMA_IRQHandler+0xfa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a57      	ldr	r2, [pc, #348]	@ (8001c68 <HAL_DMA_IRQHandler+0x1ec>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d030      	beq.n	8001b70 <HAL_DMA_IRQHandler+0xf4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_DMA_IRQHandler+0x1f0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d028      	beq.n	8001b6a <HAL_DMA_IRQHandler+0xee>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c54 <HAL_DMA_IRQHandler+0x1d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d020      	beq.n	8001b64 <HAL_DMA_IRQHandler+0xe8>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <HAL_DMA_IRQHandler+0x1f4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d019      	beq.n	8001b60 <HAL_DMA_IRQHandler+0xe4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a50      	ldr	r2, [pc, #320]	@ (8001c74 <HAL_DMA_IRQHandler+0x1f8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d012      	beq.n	8001b5c <HAL_DMA_IRQHandler+0xe0>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4f      	ldr	r2, [pc, #316]	@ (8001c78 <HAL_DMA_IRQHandler+0x1fc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00a      	beq.n	8001b56 <HAL_DMA_IRQHandler+0xda>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4d      	ldr	r2, [pc, #308]	@ (8001c7c <HAL_DMA_IRQHandler+0x200>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d102      	bne.n	8001b50 <HAL_DMA_IRQHandler+0xd4>
 8001b4a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b4e:	e01b      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b54:	e018      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b5a:	e015      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b5c:	2340      	movs	r3, #64	@ 0x40
 8001b5e:	e013      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e011      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b64:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b68:	e00e      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b6e:	e00b      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b74:	e008      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b7a:	e005      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b80:	e002      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b82:	2340      	movs	r3, #64	@ 0x40
 8001b84:	e000      	b.n	8001b88 <HAL_DMA_IRQHandler+0x10c>
 8001b86:	2304      	movs	r3, #4
 8001b88:	4a3d      	ldr	r2, [pc, #244]	@ (8001c80 <HAL_DMA_IRQHandler+0x204>)
 8001b8a:	6053      	str	r3, [r2, #4]
 8001b8c:	e057      	b.n	8001c3e <HAL_DMA_IRQHandler+0x1c2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a31      	ldr	r2, [pc, #196]	@ (8001c58 <HAL_DMA_IRQHandler+0x1dc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04f      	beq.n	8001c38 <HAL_DMA_IRQHandler+0x1bc>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c5c <HAL_DMA_IRQHandler+0x1e0>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d048      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x1b8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <HAL_DMA_IRQHandler+0x1e4>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_IRQHandler+0x1b2>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <HAL_DMA_IRQHandler+0x1e8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d038      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x1ac>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	@ (8001c68 <HAL_DMA_IRQHandler+0x1ec>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d030      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x1a6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a29      	ldr	r2, [pc, #164]	@ (8001c6c <HAL_DMA_IRQHandler+0x1f0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d028      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x1a0>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_DMA_IRQHandler+0x1d8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d020      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x19a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a25      	ldr	r2, [pc, #148]	@ (8001c70 <HAL_DMA_IRQHandler+0x1f4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_DMA_IRQHandler+0x196>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a24      	ldr	r2, [pc, #144]	@ (8001c74 <HAL_DMA_IRQHandler+0x1f8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x192>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_DMA_IRQHandler+0x1fc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00a      	beq.n	8001c08 <HAL_DMA_IRQHandler+0x18c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <HAL_DMA_IRQHandler+0x200>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d102      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x186>
 8001bfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c00:	e01b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c02:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c06:	e018      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c0c:	e015      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c0e:	2340      	movs	r3, #64	@ 0x40
 8001c10:	e013      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c12:	2304      	movs	r3, #4
 8001c14:	e011      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c1a:	e00e      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c20:	e00b      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c22:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c26:	e008      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c2c:	e005      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c32:	e002      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c34:	2340      	movs	r3, #64	@ 0x40
 8001c36:	e000      	b.n	8001c3a <HAL_DMA_IRQHandler+0x1be>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <HAL_DMA_IRQHandler+0x208>)
 8001c3c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 8136 	beq.w	8001eb4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	e130      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x438>
 8001c52:	bf00      	nop
 8001c54:	40020080 	.word	0x40020080
 8001c58:	40020008 	.word	0x40020008
 8001c5c:	4002001c 	.word	0x4002001c
 8001c60:	40020030 	.word	0x40020030
 8001c64:	40020044 	.word	0x40020044
 8001c68:	40020058 	.word	0x40020058
 8001c6c:	4002006c 	.word	0x4002006c
 8001c70:	40020408 	.word	0x40020408
 8001c74:	4002041c 	.word	0x4002041c
 8001c78:	40020430 	.word	0x40020430
 8001c7c:	40020444 	.word	0x40020444
 8001c80:	40020400 	.word	0x40020400
 8001c84:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80dd 	beq.w	8001e54 <HAL_DMA_IRQHandler+0x3d8>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80d7 	beq.w	8001e54 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0320 	and.w	r3, r3, #32
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10b      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 020a 	bic.w	r2, r2, #10
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec0 <HAL_DMA_IRQHandler+0x444>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d958      	bls.n	8001d8a <HAL_DMA_IRQHandler+0x30e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a79      	ldr	r2, [pc, #484]	@ (8001ec4 <HAL_DMA_IRQHandler+0x448>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d04f      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x306>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a78      	ldr	r2, [pc, #480]	@ (8001ec8 <HAL_DMA_IRQHandler+0x44c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d048      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x302>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a76      	ldr	r2, [pc, #472]	@ (8001ecc <HAL_DMA_IRQHandler+0x450>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d040      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x2fc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a75      	ldr	r2, [pc, #468]	@ (8001ed0 <HAL_DMA_IRQHandler+0x454>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d038      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x2f6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a73      	ldr	r2, [pc, #460]	@ (8001ed4 <HAL_DMA_IRQHandler+0x458>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d030      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x2f0>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a72      	ldr	r2, [pc, #456]	@ (8001ed8 <HAL_DMA_IRQHandler+0x45c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d028      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x2ea>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a69      	ldr	r2, [pc, #420]	@ (8001ec0 <HAL_DMA_IRQHandler+0x444>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d020      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x2e4>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_DMA_IRQHandler+0x460>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d019      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2e0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6c      	ldr	r2, [pc, #432]	@ (8001ee0 <HAL_DMA_IRQHandler+0x464>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d012      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x2dc>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6b      	ldr	r2, [pc, #428]	@ (8001ee4 <HAL_DMA_IRQHandler+0x468>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00a      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x2d6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a69      	ldr	r2, [pc, #420]	@ (8001ee8 <HAL_DMA_IRQHandler+0x46c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d102      	bne.n	8001d4c <HAL_DMA_IRQHandler+0x2d0>
 8001d46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d4a:	e01b      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d4c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d50:	e018      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d56:	e015      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d58:	2320      	movs	r3, #32
 8001d5a:	e013      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e011      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d64:	e00e      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d66:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d6a:	e00b      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d70:	e008      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d76:	e005      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d7c:	e002      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e000      	b.n	8001d84 <HAL_DMA_IRQHandler+0x308>
 8001d82:	2302      	movs	r3, #2
 8001d84:	4a59      	ldr	r2, [pc, #356]	@ (8001eec <HAL_DMA_IRQHandler+0x470>)
 8001d86:	6053      	str	r3, [r2, #4]
 8001d88:	e057      	b.n	8001e3a <HAL_DMA_IRQHandler+0x3be>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec4 <HAL_DMA_IRQHandler+0x448>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04f      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x3b8>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec8 <HAL_DMA_IRQHandler+0x44c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d048      	beq.n	8001e30 <HAL_DMA_IRQHandler+0x3b4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a4a      	ldr	r2, [pc, #296]	@ (8001ecc <HAL_DMA_IRQHandler+0x450>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d040      	beq.n	8001e2a <HAL_DMA_IRQHandler+0x3ae>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a48      	ldr	r2, [pc, #288]	@ (8001ed0 <HAL_DMA_IRQHandler+0x454>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d038      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x3a8>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a47      	ldr	r2, [pc, #284]	@ (8001ed4 <HAL_DMA_IRQHandler+0x458>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d030      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x3a2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a45      	ldr	r2, [pc, #276]	@ (8001ed8 <HAL_DMA_IRQHandler+0x45c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d028      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x39c>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec0 <HAL_DMA_IRQHandler+0x444>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d020      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x396>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a41      	ldr	r2, [pc, #260]	@ (8001edc <HAL_DMA_IRQHandler+0x460>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_DMA_IRQHandler+0x392>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a40      	ldr	r2, [pc, #256]	@ (8001ee0 <HAL_DMA_IRQHandler+0x464>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d012      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x38e>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3e      	ldr	r2, [pc, #248]	@ (8001ee4 <HAL_DMA_IRQHandler+0x468>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00a      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x388>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ee8 <HAL_DMA_IRQHandler+0x46c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d102      	bne.n	8001dfe <HAL_DMA_IRQHandler+0x382>
 8001df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dfc:	e01b      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e02:	e018      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e08:	e015      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	e013      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e011      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e16:	e00e      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e1c:	e00b      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e22:	e008      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e28:	e005      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2e:	e002      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e30:	2320      	movs	r3, #32
 8001e32:	e000      	b.n	8001e36 <HAL_DMA_IRQHandler+0x3ba>
 8001e34:	2302      	movs	r3, #2
 8001e36:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef0 <HAL_DMA_IRQHandler+0x474>)
 8001e38:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d034      	beq.n	8001eb4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e52:	e02f      	b.n	8001eb4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	2208      	movs	r2, #8
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d028      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x43a>
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d023      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020e 	bic.w	r2, r2, #14
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e86:	2101      	movs	r1, #1
 8001e88:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	4798      	blx	r3
    }
  }
  return;
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
}
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40020080 	.word	0x40020080
 8001ec4:	40020008 	.word	0x40020008
 8001ec8:	4002001c 	.word	0x4002001c
 8001ecc:	40020030 	.word	0x40020030
 8001ed0:	40020044 	.word	0x40020044
 8001ed4:	40020058 	.word	0x40020058
 8001ed8:	4002006c 	.word	0x4002006c
 8001edc:	40020408 	.word	0x40020408
 8001ee0:	4002041c 	.word	0x4002041c
 8001ee4:	40020430 	.word	0x40020430
 8001ee8:	40020444 	.word	0x40020444
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020000 	.word	0x40020000

08001ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b08b      	sub	sp, #44	@ 0x2c
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f06:	e169      	b.n	80021dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f040 8158 	bne.w	80021d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f30:	4a98      	ldr	r2, [pc, #608]	@ (8002194 <HAL_GPIO_Init+0x2a0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d875      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f36:	4a98      	ldr	r2, [pc, #608]	@ (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d058      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f3c:	4a96      	ldr	r2, [pc, #600]	@ (8002198 <HAL_GPIO_Init+0x2a4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d86f      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f42:	4a96      	ldr	r2, [pc, #600]	@ (800219c <HAL_GPIO_Init+0x2a8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d052      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f48:	4a94      	ldr	r2, [pc, #592]	@ (800219c <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d869      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f4e:	4a94      	ldr	r2, [pc, #592]	@ (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d04c      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f54:	4a92      	ldr	r2, [pc, #584]	@ (80021a0 <HAL_GPIO_Init+0x2ac>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d863      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f5a:	4a92      	ldr	r2, [pc, #584]	@ (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d046      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
 8001f60:	4a90      	ldr	r2, [pc, #576]	@ (80021a4 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d85d      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d82a      	bhi.n	8001fc0 <HAL_GPIO_Init+0xcc>
 8001f6a:	2b12      	cmp	r3, #18
 8001f6c:	d859      	bhi.n	8002022 <HAL_GPIO_Init+0x12e>
 8001f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f74 <HAL_GPIO_Init+0x80>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001fef 	.word	0x08001fef
 8001f78:	08001fc9 	.word	0x08001fc9
 8001f7c:	08001fdb 	.word	0x08001fdb
 8001f80:	0800201d 	.word	0x0800201d
 8001f84:	08002023 	.word	0x08002023
 8001f88:	08002023 	.word	0x08002023
 8001f8c:	08002023 	.word	0x08002023
 8001f90:	08002023 	.word	0x08002023
 8001f94:	08002023 	.word	0x08002023
 8001f98:	08002023 	.word	0x08002023
 8001f9c:	08002023 	.word	0x08002023
 8001fa0:	08002023 	.word	0x08002023
 8001fa4:	08002023 	.word	0x08002023
 8001fa8:	08002023 	.word	0x08002023
 8001fac:	08002023 	.word	0x08002023
 8001fb0:	08002023 	.word	0x08002023
 8001fb4:	08002023 	.word	0x08002023
 8001fb8:	08001fd1 	.word	0x08001fd1
 8001fbc:	08001fe5 	.word	0x08001fe5
 8001fc0:	4a79      	ldr	r2, [pc, #484]	@ (80021a8 <HAL_GPIO_Init+0x2b4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fc6:	e02c      	b.n	8002022 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	623b      	str	r3, [r7, #32]
          break;
 8001fce:	e029      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	623b      	str	r3, [r7, #32]
          break;
 8001fd8:	e024      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e01f      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	330c      	adds	r3, #12
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e01a      	b.n	8002024 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	623b      	str	r3, [r7, #32]
          break;
 8001ffa:	e013      	b.n	8002024 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002004:	2308      	movs	r3, #8
 8002006:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	611a      	str	r2, [r3, #16]
          break;
 800200e:	e009      	b.n	8002024 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002010:	2308      	movs	r3, #8
 8002012:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	615a      	str	r2, [r3, #20]
          break;
 800201a:	e003      	b.n	8002024 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
          break;
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x130>
          break;
 8002022:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	@ 0xff
 8002028:	d801      	bhi.n	800202e <HAL_GPIO_Init+0x13a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	e001      	b.n	8002032 <HAL_GPIO_Init+0x13e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3304      	adds	r3, #4
 8002032:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	@ 0xff
 8002038:	d802      	bhi.n	8002040 <HAL_GPIO_Init+0x14c>
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	e002      	b.n	8002046 <HAL_GPIO_Init+0x152>
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	3b08      	subs	r3, #8
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	210f      	movs	r1, #15
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	401a      	ands	r2, r3
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	431a      	orrs	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80b1 	beq.w	80021d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002074:	4b4d      	ldr	r3, [pc, #308]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a4c      	ldr	r2, [pc, #304]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b4a      	ldr	r3, [pc, #296]	@ (80021ac <HAL_GPIO_Init+0x2b8>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_GPIO_Init+0x2bc>)
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800209a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a40      	ldr	r2, [pc, #256]	@ (80021b4 <HAL_GPIO_Init+0x2c0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <HAL_GPIO_Init+0x1ec>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3f      	ldr	r2, [pc, #252]	@ (80021b8 <HAL_GPIO_Init+0x2c4>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00d      	beq.n	80020dc <HAL_GPIO_Init+0x1e8>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3e      	ldr	r2, [pc, #248]	@ (80021bc <HAL_GPIO_Init+0x2c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d007      	beq.n	80020d8 <HAL_GPIO_Init+0x1e4>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3d      	ldr	r2, [pc, #244]	@ (80021c0 <HAL_GPIO_Init+0x2cc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <HAL_GPIO_Init+0x1e0>
 80020d0:	2303      	movs	r3, #3
 80020d2:	e006      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d4:	2304      	movs	r3, #4
 80020d6:	e004      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020d8:	2302      	movs	r3, #2
 80020da:	e002      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020dc:	2301      	movs	r3, #1
 80020de:	e000      	b.n	80020e2 <HAL_GPIO_Init+0x1ee>
 80020e0:	2300      	movs	r3, #0
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	f002 0203 	and.w	r2, r2, #3
 80020e8:	0092      	lsls	r2, r2, #2
 80020ea:	4093      	lsls	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020f2:	492f      	ldr	r1, [pc, #188]	@ (80021b0 <HAL_GPIO_Init+0x2bc>)
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d006      	beq.n	800211a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	492c      	ldr	r1, [pc, #176]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
 8002118:	e006      	b.n	8002128 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800211a:	4b2a      	ldr	r3, [pc, #168]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	43db      	mvns	r3, r3
 8002122:	4928      	ldr	r1, [pc, #160]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002124:	4013      	ands	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d006      	beq.n	8002142 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4922      	ldr	r1, [pc, #136]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002142:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	43db      	mvns	r3, r3
 800214a:	491e      	ldr	r1, [pc, #120]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800214c:	4013      	ands	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d006      	beq.n	800216a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4918      	ldr	r1, [pc, #96]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800216a:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	43db      	mvns	r3, r3
 8002172:	4914      	ldr	r1, [pc, #80]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002174:	4013      	ands	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d021      	beq.n	80021c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002184:	4b0f      	ldr	r3, [pc, #60]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <HAL_GPIO_Init+0x2d0>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	600b      	str	r3, [r1, #0]
 8002190:	e021      	b.n	80021d6 <HAL_GPIO_Init+0x2e2>
 8002192:	bf00      	nop
 8002194:	10320000 	.word	0x10320000
 8002198:	10310000 	.word	0x10310000
 800219c:	10220000 	.word	0x10220000
 80021a0:	10210000 	.word	0x10210000
 80021a4:	10120000 	.word	0x10120000
 80021a8:	10110000 	.word	0x10110000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	40011000 	.word	0x40011000
 80021c0:	40011400 	.word	0x40011400
 80021c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	4909      	ldr	r1, [pc, #36]	@ (80021f8 <HAL_GPIO_Init+0x304>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	3301      	adds	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f47f ae8e 	bne.w	8001f08 <HAL_GPIO_Init+0x14>
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	372c      	adds	r7, #44	@ 0x2c
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	611a      	str	r2, [r3, #16]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr

0800222c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4013      	ands	r3, r2
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43d9      	mvns	r1, r3
 800224a:	887b      	ldrh	r3, [r7, #2]
 800224c:	400b      	ands	r3, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	611a      	str	r2, [r3, #16]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
	...

08002260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e12b      	b.n	80024ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7fe fcf0 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	@ 0x24
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0201 	bic.w	r2, r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c4:	f000 fe0e 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80022c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a81      	ldr	r2, [pc, #516]	@ (80024d4 <HAL_I2C_Init+0x274>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d807      	bhi.n	80022e4 <HAL_I2C_Init+0x84>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a80      	ldr	r2, [pc, #512]	@ (80024d8 <HAL_I2C_Init+0x278>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	bf94      	ite	ls
 80022dc:	2301      	movls	r3, #1
 80022de:	2300      	movhi	r3, #0
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	e006      	b.n	80022f2 <HAL_I2C_Init+0x92>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4a7d      	ldr	r2, [pc, #500]	@ (80024dc <HAL_I2C_Init+0x27c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	bf94      	ite	ls
 80022ec:	2301      	movls	r3, #1
 80022ee:	2300      	movhi	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e7      	b.n	80024ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	4a78      	ldr	r2, [pc, #480]	@ (80024e0 <HAL_I2C_Init+0x280>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a6a      	ldr	r2, [pc, #424]	@ (80024d4 <HAL_I2C_Init+0x274>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d802      	bhi.n	8002334 <HAL_I2C_Init+0xd4>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3301      	adds	r3, #1
 8002332:	e009      	b.n	8002348 <HAL_I2C_Init+0xe8>
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	4a69      	ldr	r2, [pc, #420]	@ (80024e4 <HAL_I2C_Init+0x284>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	3301      	adds	r3, #1
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	430b      	orrs	r3, r1
 800234e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800235a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	495c      	ldr	r1, [pc, #368]	@ (80024d4 <HAL_I2C_Init+0x274>)
 8002364:	428b      	cmp	r3, r1
 8002366:	d819      	bhi.n	800239c <HAL_I2C_Init+0x13c>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1e59      	subs	r1, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fbb1 f3f3 	udiv	r3, r1, r3
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800237c:	400b      	ands	r3, r1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_I2C_Init+0x138>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1e59      	subs	r1, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	e051      	b.n	800243c <HAL_I2C_Init+0x1dc>
 8002398:	2304      	movs	r3, #4
 800239a:	e04f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d111      	bne.n	80023c8 <HAL_I2C_Init+0x168>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e58      	subs	r0, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	440b      	add	r3, r1
 80023b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b6:	3301      	adds	r3, #1
 80023b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e012      	b.n	80023ee <HAL_I2C_Init+0x18e>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1e58      	subs	r0, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6859      	ldr	r1, [r3, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	0099      	lsls	r1, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	3301      	adds	r3, #1
 80023e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_Init+0x196>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e022      	b.n	800243c <HAL_I2C_Init+0x1dc>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10e      	bne.n	800241c <HAL_I2C_Init+0x1bc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1e58      	subs	r0, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	440b      	add	r3, r1
 800240c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800241a:	e00f      	b.n	800243c <HAL_I2C_Init+0x1dc>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1e58      	subs	r0, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	0099      	lsls	r1, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	6809      	ldr	r1, [r1, #0]
 8002440:	4313      	orrs	r3, r2
 8002442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800246a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6911      	ldr	r1, [r2, #16]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	4311      	orrs	r1, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	430b      	orrs	r3, r1
 800247e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695a      	ldr	r2, [r3, #20]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	000186a0 	.word	0x000186a0
 80024d8:	001e847f 	.word	0x001e847f
 80024dc:	003d08ff 	.word	0x003d08ff
 80024e0:	431bde83 	.word	0x431bde83
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e304      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	4b92      	ldr	r3, [pc, #584]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b04      	cmp	r3, #4
 8002512:	d00c      	beq.n	800252e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002514:	4b8f      	ldr	r3, [pc, #572]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d112      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
 8002520:	4b8c      	ldr	r3, [pc, #560]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b89      	ldr	r3, [pc, #548]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d06c      	beq.n	8002614 <HAL_RCC_OscConfig+0x12c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d168      	bne.n	8002614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e2de      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x76>
 8002550:	4b80      	ldr	r3, [pc, #512]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a7f      	ldr	r2, [pc, #508]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800255a:	6013      	str	r3, [r2, #0]
 800255c:	e02e      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0x98>
 8002566:	4b7b      	ldr	r3, [pc, #492]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7a      	ldr	r2, [pc, #488]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b78      	ldr	r3, [pc, #480]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a77      	ldr	r2, [pc, #476]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e01d      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0xbc>
 800258a:	4b72      	ldr	r3, [pc, #456]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a71      	ldr	r2, [pc, #452]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b6f      	ldr	r3, [pc, #444]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0xd4>
 80025a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a67      	ldr	r2, [pc, #412]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d013      	beq.n	80025ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fcc0 	bl	8000f48 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fcbc 	bl	8000f48 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	@ 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e292      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	4b5d      	ldr	r3, [pc, #372]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0f0      	beq.n	80025cc <HAL_RCC_OscConfig+0xe4>
 80025ea:	e014      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fcac 	bl	8000f48 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fca8 	bl	8000f48 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e27e      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	4b53      	ldr	r3, [pc, #332]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x10c>
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d063      	beq.n	80026ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002622:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800262e:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b08      	cmp	r3, #8
 8002638:	d11c      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
 800263a:	4b46      	ldr	r3, [pc, #280]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	4b43      	ldr	r3, [pc, #268]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d001      	beq.n	800265e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e252      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	4b3d      	ldr	r3, [pc, #244]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4939      	ldr	r1, [pc, #228]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002672:	e03a      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800267c:	4b36      	ldr	r3, [pc, #216]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fc61 	bl	8000f48 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7fe fc5d 	bl	8000f48 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e233      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4927      	ldr	r1, [pc, #156]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026be:	4b26      	ldr	r3, [pc, #152]	@ (8002758 <HAL_RCC_OscConfig+0x270>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fc40 	bl	8000f48 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026cc:	f7fe fc3c 	bl	8000f48 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e212      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d03a      	beq.n	800276c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d019      	beq.n	8002732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fe:	4b17      	ldr	r3, [pc, #92]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002704:	f7fe fc20 	bl	8000f48 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270c:	f7fe fc1c 	bl	8000f48 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e1f2      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_RCC_OscConfig+0x26c>)
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 fc02 	bl	8002f34 <RCC_Delay>
 8002730:	e01c      	b.n	800276c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002732:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <HAL_RCC_OscConfig+0x274>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fc06 	bl	8000f48 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273e:	e00f      	b.n	8002760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7fe fc02 	bl	8000f48 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d908      	bls.n	8002760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e1d8      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000
 8002758:	42420000 	.word	0x42420000
 800275c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002760:	4b9b      	ldr	r3, [pc, #620]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1e9      	bne.n	8002740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a6 	beq.w	80028c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277a:	2300      	movs	r3, #0
 800277c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800277e:	4b94      	ldr	r3, [pc, #592]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10d      	bne.n	80027a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278a:	4b91      	ldr	r3, [pc, #580]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4a90      	ldr	r2, [pc, #576]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002794:	61d3      	str	r3, [r2, #28]
 8002796:	4b8e      	ldr	r3, [pc, #568]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	4b8b      	ldr	r3, [pc, #556]	@ (80029d4 <HAL_RCC_OscConfig+0x4ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d118      	bne.n	80027e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b2:	4b88      	ldr	r3, [pc, #544]	@ (80029d4 <HAL_RCC_OscConfig+0x4ec>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a87      	ldr	r2, [pc, #540]	@ (80029d4 <HAL_RCC_OscConfig+0x4ec>)
 80027b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027be:	f7fe fbc3 	bl	8000f48 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c6:	f7fe fbbf 	bl	8000f48 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	@ 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e195      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d8:	4b7e      	ldr	r3, [pc, #504]	@ (80029d4 <HAL_RCC_OscConfig+0x4ec>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x312>
 80027ec:	4b78      	ldr	r3, [pc, #480]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	4a77      	ldr	r2, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6213      	str	r3, [r2, #32]
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x334>
 8002802:	4b73      	ldr	r3, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a72      	ldr	r2, [pc, #456]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b70      	ldr	r3, [pc, #448]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a6f      	ldr	r2, [pc, #444]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	e01c      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b05      	cmp	r3, #5
 8002822:	d10c      	bne.n	800283e <HAL_RCC_OscConfig+0x356>
 8002824:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a69      	ldr	r2, [pc, #420]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	f043 0304 	orr.w	r3, r3, #4
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	4b67      	ldr	r3, [pc, #412]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a66      	ldr	r2, [pc, #408]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	e00b      	b.n	8002856 <HAL_RCC_OscConfig+0x36e>
 800283e:	4b64      	ldr	r3, [pc, #400]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a63      	ldr	r2, [pc, #396]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	4b61      	ldr	r3, [pc, #388]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a60      	ldr	r2, [pc, #384]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d015      	beq.n	800288a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe fb73 	bl	8000f48 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fb6f 	bl	8000f48 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e143      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287c:	4b54      	ldr	r3, [pc, #336]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ee      	beq.n	8002866 <HAL_RCC_OscConfig+0x37e>
 8002888:	e014      	b.n	80028b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7fe fb5d 	bl	8000f48 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe fb59 	bl	8000f48 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e12d      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1ee      	bne.n	8002892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d105      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ba:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	4a44      	ldr	r2, [pc, #272]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 808c 	beq.w	80029e8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80028d0:	4b3f      	ldr	r3, [pc, #252]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028dc:	d10e      	bne.n	80028fc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80028de:	4b3c      	ldr	r3, [pc, #240]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e103      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002900:	2b02      	cmp	r3, #2
 8002902:	d14e      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002904:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002910:	4b2f      	ldr	r3, [pc, #188]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0ef      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002924:	4b2c      	ldr	r3, [pc, #176]	@ (80029d8 <HAL_RCC_OscConfig+0x4f0>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292a:	f7fe fb0d 	bl	8000f48 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002932:	f7fe fb09 	bl	8000f48 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	@ 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e0df      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002944:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002950:	4b1f      	ldr	r3, [pc, #124]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295c:	491c      	ldr	r1, [pc, #112]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002962:	4b1b      	ldr	r3, [pc, #108]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4918      	ldr	r1, [pc, #96]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002970:	4313      	orrs	r3, r2
 8002972:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002974:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_RCC_OscConfig+0x4f0>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fae5 	bl	8000f48 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002982:	f7fe fae1 	bl	8000f48 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	@ 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0b7      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x49a>
 80029a0:	e022      	b.n	80029e8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80029a2:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <HAL_RCC_OscConfig+0x4e8>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_RCC_OscConfig+0x4f0>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7fe fac8 	bl	8000f48 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80029bc:	f7fe fac4 	bl	8000f48 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	@ 0x64
 80029c8:	d908      	bls.n	80029dc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e09a      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80029dc:	4b4b      	ldr	r3, [pc, #300]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e9      	bne.n	80029bc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8088 	beq.w	8002b02 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f2:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d068      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d14d      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a06:	4b42      	ldr	r3, [pc, #264]	@ (8002b10 <HAL_RCC_OscConfig+0x628>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fa9c 	bl	8000f48 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fa98 	bl	8000f48 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e06e      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a26:	4b39      	ldr	r3, [pc, #228]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3a:	d10f      	bne.n	8002a5c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4931      	ldr	r1, [pc, #196]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a4a:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f023 020f 	bic.w	r2, r3, #15
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	492d      	ldr	r1, [pc, #180]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	4927      	ldr	r1, [pc, #156]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_RCC_OscConfig+0x628>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe fa65 	bl	8000f48 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7fe fa61 	bl	8000f48 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e037      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a94:	4b1d      	ldr	r3, [pc, #116]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x59a>
 8002aa0:	e02f      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCC_OscConfig+0x628>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7fe fa4e 	bl	8000f48 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fa4a 	bl	8000f48 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e020      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5c8>
 8002ace:	e018      	b.n	8002b02 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e013      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <HAL_RCC_OscConfig+0x624>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	42420060 	.word	0x42420060

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d0      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b67      	ldr	r3, [pc, #412]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 0207 	bic.w	r2, r3, #7
 8002b3e:	4965      	ldr	r1, [pc, #404]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a58      	ldr	r2, [pc, #352]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e073      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4936      	ldr	r1, [pc, #216]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c04:	f7fe f9a0 	bl	8000f48 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe f99c 	bl	8000f48 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e053      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2d      	ldr	r3, [pc, #180]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b27      	ldr	r3, [pc, #156]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 0207 	bic.w	r2, r3, #7
 8002c4a:	4922      	ldr	r1, [pc, #136]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	@ (8002cdc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f8fe 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08003914 	.word	0x08003914
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b092      	sub	sp, #72	@ 0x48
 8002cee:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d002      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d003      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d20:	e0c3      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d22:	4b67      	ldr	r3, [pc, #412]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002d24:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002d26:	e0c3      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	0c9b      	lsrs	r3, r3, #18
 8002d2c:	f003 020f 	and.w	r2, r3, #15
 8002d30:	4b64      	ldr	r3, [pc, #400]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80ac 	beq.w	8002e9a <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002d42:	4b5e      	ldr	r3, [pc, #376]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002d4c:	5c9b      	ldrb	r3, [r3, r2]
 8002d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002d50:	4b5a      	ldr	r3, [pc, #360]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 808c 	beq.w	8002e76 <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002d5e:	4b57      	ldr	r3, [pc, #348]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	3301      	adds	r3, #1
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002d6c:	4b53      	ldr	r3, [pc, #332]	@ (8002ebc <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3302      	adds	r3, #2
 8002d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	623b      	str	r3, [r7, #32]
 8002d80:	627a      	str	r2, [r7, #36]	@ 0x24
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	2200      	movs	r2, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	4611      	mov	r1, r2
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	fb00 f203 	mul.w	r2, r0, r3
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	fb03 f301 	mul.w	r3, r3, r1
 8002d96:	4413      	add	r3, r2
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	fba2 4500 	umull	r4, r5, r2, r0
 8002d9e:	442b      	add	r3, r5
 8002da0:	461d      	mov	r5, r3
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	ebb2 0a04 	subs.w	sl, r2, r4
 8002dbe:	eb63 0b05 	sbc.w	fp, r3, r5
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dce:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dd2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dd6:	ebb2 080a 	subs.w	r8, r2, sl
 8002dda:	eb63 090b 	sbc.w	r9, r3, fp
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002df2:	4690      	mov	r8, r2
 8002df4:	4699      	mov	r9, r3
 8002df6:	eb18 0304 	adds.w	r3, r8, r4
 8002dfa:	603b      	str	r3, [r7, #0]
 8002dfc:	eb49 0305 	adc.w	r3, r9, r5
 8002e00:	607b      	str	r3, [r7, #4]
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e0e:	4629      	mov	r1, r5
 8002e10:	024b      	lsls	r3, r1, #9
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	4604      	mov	r4, r0
 8002e18:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002e1c:	4601      	mov	r1, r0
 8002e1e:	024a      	lsls	r2, r1, #9
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	2200      	movs	r2, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	617a      	str	r2, [r7, #20]
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2e:	2200      	movs	r2, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	60fa      	str	r2, [r7, #12]
 8002e34:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e38:	4622      	mov	r2, r4
 8002e3a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002e3e:	4645      	mov	r5, r8
 8002e40:	fb05 f202 	mul.w	r2, r5, r2
 8002e44:	46cc      	mov	ip, r9
 8002e46:	4625      	mov	r5, r4
 8002e48:	461c      	mov	r4, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	fb03 f30c 	mul.w	r3, r3, ip
 8002e50:	4413      	add	r3, r2
 8002e52:	4622      	mov	r2, r4
 8002e54:	4644      	mov	r4, r8
 8002e56:	fba2 2404 	umull	r2, r4, r2, r4
 8002e5a:	61fc      	str	r4, [r7, #28]
 8002e5c:	61ba      	str	r2, [r7, #24]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e68:	f7fd f9dc 	bl	8000224 <__aeabi_uldivmod>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4613      	mov	r3, r2
 8002e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e74:	e007      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e78:	4a11      	ldr	r2, [pc, #68]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002e7a:	fb03 f202 	mul.w	r2, r3, r2
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002e86:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002e88:	7b5b      	ldrb	r3, [r3, #13]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e98:	e004      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea6:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eaa:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002eac:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002eae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3748      	adds	r7, #72	@ 0x48
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	007a1200 	.word	0x007a1200
 8002ec4:	0800392c 	.word	0x0800392c
 8002ec8:	0800393c 	.word	0x0800393c
 8002ecc:	003d0900 	.word	0x003d0900

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b02      	ldr	r3, [pc, #8]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee8:	f7ff fff2 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b05      	ldr	r3, [pc, #20]	@ (8002f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	4903      	ldr	r1, [pc, #12]	@ (8002f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08003924 	.word	0x08003924

08002f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f10:	f7ff ffde 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4b05      	ldr	r3, [pc, #20]	@ (8002f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	0adb      	lsrs	r3, r3, #11
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f22:	5ccb      	ldrb	r3, [r1, r3]
 8002f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08003924 	.word	0x08003924

08002f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <RCC_Delay+0x34>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <RCC_Delay+0x38>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	0a5b      	lsrs	r3, r3, #9
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f50:	bf00      	nop
  }
  while (Delay --);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e5a      	subs	r2, r3, #1
 8002f56:	60fa      	str	r2, [r7, #12]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f9      	bne.n	8002f50 <RCC_Delay+0x1c>
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	10624dd3 	.word	0x10624dd3

08002f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d07d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f94:	4b8b      	ldr	r3, [pc, #556]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10d      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa0:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a87      	ldr	r2, [pc, #540]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
 8002fac:	4b85      	ldr	r3, [pc, #532]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	4b82      	ldr	r3, [pc, #520]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d118      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7e      	ldr	r2, [pc, #504]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd4:	f7fd ffb8 	bl	8000f48 <HAL_GetTick>
 8002fd8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	e008      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fdc:	f7fd ffb4 	bl	8000f48 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0e5      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fee:	4b76      	ldr	r3, [pc, #472]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ffa:	4b72      	ldr	r3, [pc, #456]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003002:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d02e      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d027      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003018:	4b6a      	ldr	r3, [pc, #424]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003020:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003022:	4b6a      	ldr	r3, [pc, #424]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003028:	4b68      	ldr	r3, [pc, #416]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800302e:	4a65      	ldr	r2, [pc, #404]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d014      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fd ff83 	bl	8000f48 <HAL_GetTick>
 8003042:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003046:	f7fd ff7f 	bl	8000f48 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003054:	4293      	cmp	r3, r2
 8003056:	d901      	bls.n	800305c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ae      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	4b59      	ldr	r3, [pc, #356]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ee      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003068:	4b56      	ldr	r3, [pc, #344]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4953      	ldr	r1, [pc, #332]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003076:	4313      	orrs	r3, r2
 8003078:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307a:	7efb      	ldrb	r3, [r7, #27]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d105      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003080:	4b50      	ldr	r3, [pc, #320]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003082:	69db      	ldr	r3, [r3, #28]
 8003084:	4a4f      	ldr	r2, [pc, #316]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800308a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003098:	4b4a      	ldr	r3, [pc, #296]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4947      	ldr	r1, [pc, #284]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80030b6:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	4940      	ldr	r1, [pc, #256]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80030d4:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	4938      	ldr	r1, [pc, #224]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80030e6:	4b37      	ldr	r3, [pc, #220]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80030f2:	4b34      	ldr	r3, [pc, #208]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d148      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003108:	4b2e      	ldr	r3, [pc, #184]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d138      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003114:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d009      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003124:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e042      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003134:	4b23      	ldr	r3, [pc, #140]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4920      	ldr	r1, [pc, #128]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003142:	4313      	orrs	r3, r2
 8003144:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003146:	4b1f      	ldr	r3, [pc, #124]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314a:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	491c      	ldr	r1, [pc, #112]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003154:	4313      	orrs	r3, r2
 8003156:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd fef3 	bl	8000f48 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003166:	f7fd feef 	bl	8000f48 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b64      	cmp	r3, #100	@ 0x64
 8003172:	d901      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e020      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003184:	e009      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003186:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e00f      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031a6:	4b07      	ldr	r3, [pc, #28]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4904      	ldr	r1, [pc, #16]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	40007000 	.word	0x40007000
 80031cc:	42420440 	.word	0x42420440
 80031d0:	42420070 	.word	0x42420070

080031d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e041      	b.n	800326a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fd76 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4610      	mov	r0, r2
 8003214:	f000 f8f4 	bl	8003400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_TIM_ConfigClockSource+0x1c>
 800328a:	2302      	movs	r3, #2
 800328c:	e0b4      	b.n	80033f8 <HAL_TIM_ConfigClockSource+0x186>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c6:	d03e      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xd4>
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032cc:	f200 8087 	bhi.w	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d4:	f000 8086 	beq.w	80033e4 <HAL_TIM_ConfigClockSource+0x172>
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032dc:	d87f      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032de:	2b70      	cmp	r3, #112	@ 0x70
 80032e0:	d01a      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xa6>
 80032e2:	2b70      	cmp	r3, #112	@ 0x70
 80032e4:	d87b      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	2b60      	cmp	r3, #96	@ 0x60
 80032e8:	d050      	beq.n	800338c <HAL_TIM_ConfigClockSource+0x11a>
 80032ea:	2b60      	cmp	r3, #96	@ 0x60
 80032ec:	d877      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032ee:	2b50      	cmp	r3, #80	@ 0x50
 80032f0:	d03c      	beq.n	800336c <HAL_TIM_ConfigClockSource+0xfa>
 80032f2:	2b50      	cmp	r3, #80	@ 0x50
 80032f4:	d873      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d058      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0x13a>
 80032fa:	2b40      	cmp	r3, #64	@ 0x40
 80032fc:	d86f      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 80032fe:	2b30      	cmp	r3, #48	@ 0x30
 8003300:	d064      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x15a>
 8003302:	2b30      	cmp	r3, #48	@ 0x30
 8003304:	d86b      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 8003306:	2b20      	cmp	r3, #32
 8003308:	d060      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x15a>
 800330a:	2b20      	cmp	r3, #32
 800330c:	d867      	bhi.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
 800330e:	2b00      	cmp	r3, #0
 8003310:	d05c      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x15a>
 8003312:	2b10      	cmp	r3, #16
 8003314:	d05a      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x15a>
 8003316:	e062      	b.n	80033de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003328:	f000 f959 	bl	80035de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800333a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
      break;
 8003344:	e04f      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	f000 f942 	bl	80035de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003368:	609a      	str	r2, [r3, #8]
      break;
 800336a:	e03c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003378:	461a      	mov	r2, r3
 800337a:	f000 f8b9 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2150      	movs	r1, #80	@ 0x50
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f910 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 800338a:	e02c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003398:	461a      	mov	r2, r3
 800339a:	f000 f8d7 	bl	800354c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2160      	movs	r1, #96	@ 0x60
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f900 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 80033aa:	e01c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b8:	461a      	mov	r2, r3
 80033ba:	f000 f899 	bl	80034f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2140      	movs	r1, #64	@ 0x40
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f8f0 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 80033ca:	e00c      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f000 f8e7 	bl	80035aa <TIM_ITRx_SetConfig>
      break;
 80033dc:	e003      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	73fb      	strb	r3, [r7, #15]
      break;
 80033e2:	e000      	b.n	80033e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a33      	ldr	r2, [pc, #204]	@ (80034e0 <TIM_Base_SetConfig+0xe0>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d00f      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a30      	ldr	r2, [pc, #192]	@ (80034e4 <TIM_Base_SetConfig+0xe4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2f      	ldr	r2, [pc, #188]	@ (80034e8 <TIM_Base_SetConfig+0xe8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x38>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2e      	ldr	r2, [pc, #184]	@ (80034ec <TIM_Base_SetConfig+0xec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a24      	ldr	r2, [pc, #144]	@ (80034e0 <TIM_Base_SetConfig+0xe0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0x72>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x72>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <TIM_Base_SetConfig+0xe4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x72>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a20      	ldr	r2, [pc, #128]	@ (80034e8 <TIM_Base_SetConfig+0xe8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x72>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <TIM_Base_SetConfig+0xec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <TIM_Base_SetConfig+0xe0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]
  }
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354c:	b480      	push	{r7}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0210 	bic.w	r2, r3, #16
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	031b      	lsls	r3, r3, #12
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003588:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr

080035aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f043 0307 	orr.w	r3, r3, #7
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr

080035de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035de:	b480      	push	{r7}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	431a      	orrs	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4313      	orrs	r3, r2
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	609a      	str	r2, [r3, #8]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003630:	2302      	movs	r3, #2
 8003632:	e04b      	b.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003680:	d00e      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a12      	ldr	r2, [pc, #72]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10c      	bne.n	80036ba <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00

080036e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e042      	b.n	8003780 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fb0a 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800372a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f82b 	bl	8003788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003740:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003750:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003760:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037c2:	f023 030c 	bic.w	r3, r3, #12
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	430b      	orrs	r3, r1
 80037ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2c      	ldr	r2, [pc, #176]	@ (800389c <UART_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037f0:	f7ff fb8c 	bl	8002f0c <HAL_RCC_GetPCLK2Freq>
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	e002      	b.n	80037fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7ff fb74 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 80037fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	009a      	lsls	r2, r3, #2
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <UART_SetConfig+0x118>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	0119      	lsls	r1, r3, #4
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	009a      	lsls	r2, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fbb2 f2f3 	udiv	r2, r2, r3
 8003834:	4b1a      	ldr	r3, [pc, #104]	@ (80038a0 <UART_SetConfig+0x118>)
 8003836:	fba3 0302 	umull	r0, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2064      	movs	r0, #100	@ 0x64
 800383e:	fb00 f303 	mul.w	r3, r0, r3
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	3332      	adds	r3, #50	@ 0x32
 8003848:	4a15      	ldr	r2, [pc, #84]	@ (80038a0 <UART_SetConfig+0x118>)
 800384a:	fba2 2303 	umull	r2, r3, r2, r3
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003854:	4419      	add	r1, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009a      	lsls	r2, r3, #2
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	fbb2 f2f3 	udiv	r2, r2, r3
 800386c:	4b0c      	ldr	r3, [pc, #48]	@ (80038a0 <UART_SetConfig+0x118>)
 800386e:	fba3 0302 	umull	r0, r3, r3, r2
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2064      	movs	r0, #100	@ 0x64
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	3332      	adds	r3, #50	@ 0x32
 8003880:	4a07      	ldr	r2, [pc, #28]	@ (80038a0 <UART_SetConfig+0x118>)
 8003882:	fba2 2303 	umull	r2, r3, r2, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	440a      	add	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40013800 	.word	0x40013800
 80038a0:	51eb851f 	.word	0x51eb851f

080038a4 <memset>:
 80038a4:	4603      	mov	r3, r0
 80038a6:	4402      	add	r2, r0
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	f803 1b01 	strb.w	r1, [r3], #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__libc_init_array>:
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	2600      	movs	r6, #0
 80038b8:	4d0c      	ldr	r5, [pc, #48]	@ (80038ec <__libc_init_array+0x38>)
 80038ba:	4c0d      	ldr	r4, [pc, #52]	@ (80038f0 <__libc_init_array+0x3c>)
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	42a6      	cmp	r6, r4
 80038c2:	d109      	bne.n	80038d8 <__libc_init_array+0x24>
 80038c4:	f000 f81a 	bl	80038fc <_init>
 80038c8:	2600      	movs	r6, #0
 80038ca:	4d0a      	ldr	r5, [pc, #40]	@ (80038f4 <__libc_init_array+0x40>)
 80038cc:	4c0a      	ldr	r4, [pc, #40]	@ (80038f8 <__libc_init_array+0x44>)
 80038ce:	1b64      	subs	r4, r4, r5
 80038d0:	10a4      	asrs	r4, r4, #2
 80038d2:	42a6      	cmp	r6, r4
 80038d4:	d105      	bne.n	80038e2 <__libc_init_array+0x2e>
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038dc:	4798      	blx	r3
 80038de:	3601      	adds	r6, #1
 80038e0:	e7ee      	b.n	80038c0 <__libc_init_array+0xc>
 80038e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e6:	4798      	blx	r3
 80038e8:	3601      	adds	r6, #1
 80038ea:	e7f2      	b.n	80038d2 <__libc_init_array+0x1e>
 80038ec:	08003954 	.word	0x08003954
 80038f0:	08003954 	.word	0x08003954
 80038f4:	08003954 	.word	0x08003954
 80038f8:	08003958 	.word	0x08003958

080038fc <_init>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr

08003908 <_fini>:
 8003908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390a:	bf00      	nop
 800390c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390e:	bc08      	pop	{r3}
 8003910:	469e      	mov	lr, r3
 8003912:	4770      	bx	lr
