
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b18  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08018db8  08018db8  00019db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018ef8  08018ef8  00019ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018f00  08018f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018f04  08018f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000158  24000000  08018f08  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  24000158  08019060  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  240001b8  080190c0  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068a4  24000218  08019120  0001a218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24006abc  08019120  0001aabc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001a218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040cef  00000000  00000000  0001a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b2c  00000000  00000000  0005af35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f78  00000000  00000000  00062a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000024ca  00000000  00000000  000659e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000be31  00000000  00000000  00067eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f071  00000000  00000000  00073cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195d15  00000000  00000000  000b2d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00248a61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d008  00000000  00000000  00248aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00255aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000218 	.word	0x24000218
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018da0 	.word	0x08018da0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400021c 	.word	0x2400021c
 80002dc:	08018da0 	.word	0x08018da0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000610:	f000 ff98 	bl	8001544 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f001 ff56 	bl	80024c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f838 	bl	800068c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800061c:	f000 f8b2 	bl	8000784 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 fe86 	bl	8001330 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000624:	f000 f8de 	bl	80007e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000628:	f000 f958 	bl	80008dc <MX_ADC2_Init>
  MX_ADC3_Init();
 800062c:	f000 f9c0 	bl	80009b0 <MX_ADC3_Init>
  MX_ETH_Init();
 8000630:	f000 fa28 	bl	8000a84 <MX_ETH_Init>
  MX_I2C4_Init();
 8000634:	f000 fa72 	bl	8000b1c <MX_I2C4_Init>
  MX_SPI4_Init();
 8000638:	f000 fab0 	bl	8000b9c <MX_SPI4_Init>
  MX_TIM1_Init();
 800063c:	f000 fb04 	bl	8000c48 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000640:	f000 fb66 	bl	8000d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000644:	f000 fbbe 	bl	8000dc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000648:	f000 fc22 	bl	8000e90 <MX_TIM4_Init>
  MX_TIM8_Init();
 800064c:	f000 fc9c 	bl	8000f88 <MX_TIM8_Init>
  MX_TIM17_Init();
 8000650:	f000 fd14 	bl	800107c <MX_TIM17_Init>
  MX_UART4_Init();
 8000654:	f000 fd38 	bl	80010c8 <MX_UART4_Init>
  MX_UART5_Init();
 8000658:	f000 fd86 	bl	8001168 <MX_UART5_Init>
  MX_UART8_Init();
 800065c:	f000 fdd0 	bl	8001200 <MX_UART8_Init>
  MX_USART2_UART_Init();
 8000660:	f000 fe1a 	bl	8001298 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000664:	f014 fab6 	bl	8014bd4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000668:	4a05      	ldr	r2, [pc, #20]	@ (8000680 <main+0x74>)
 800066a:	2100      	movs	r1, #0
 800066c:	4805      	ldr	r0, [pc, #20]	@ (8000684 <main+0x78>)
 800066e:	f014 fafb 	bl	8014c68 <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <main+0x7c>)
 8000676:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000678:	f014 fad0 	bl	8014c1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0x70>
 8000680:	08018e9c 	.word	0x08018e9c
 8000684:	0800152d 	.word	0x0800152d
 8000688:	2400093c 	.word	0x2400093c

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	@ 0x70
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000696:	224c      	movs	r2, #76	@ 0x4c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f018 fae4 	bl	8018c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2220      	movs	r2, #32
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f018 fade 	bl	8018c68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ac:	2002      	movs	r0, #2
 80006ae:	f007 fcb1 	bl	8008014 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b31      	ldr	r3, [pc, #196]	@ (800077c <SystemClock_Config+0xf0>)
 80006b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006ba:	4a30      	ldr	r2, [pc, #192]	@ (800077c <SystemClock_Config+0xf0>)
 80006bc:	f023 0301 	bic.w	r3, r3, #1
 80006c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80006c2:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <SystemClock_Config+0xf0>)
 80006c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000780 <SystemClock_Config+0xf4>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000780 <SystemClock_Config+0xf4>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xf4>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	603b      	str	r3, [r7, #0]
 80006e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e8:	bf00      	nop
 80006ea:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xf4>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006f6:	d1f8      	bne.n	80006ea <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006fc:	2301      	movs	r3, #1
 80006fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2340      	movs	r3, #64	@ 0x40
 8000702:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 800070c:	2320      	movs	r3, #32
 800070e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000710:	2381      	movs	r3, #129	@ 0x81
 8000712:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000718:	2302      	movs	r3, #2
 800071a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000720:	2304      	movs	r3, #4
 8000722:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000724:	2300      	movs	r3, #0
 8000726:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000730:	4618      	mov	r0, r3
 8000732:	f007 fcb9 	bl	80080a8 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800073c:	f000 ff2e 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	233f      	movs	r3, #63	@ 0x3f
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f008 f8f9 	bl	800895c <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000770:	f000 ff14 	bl	800159c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3770      	adds	r7, #112	@ 0x70
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58000400 	.word	0x58000400
 8000780:	58024800 	.word	0x58024800

08000784 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0b0      	sub	sp, #192	@ 0xc0
 8000788:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	22c0      	movs	r2, #192	@ 0xc0
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f018 fa69 	bl	8018c68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000796:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800079a:	f04f 0300 	mov.w	r3, #0
 800079e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 80007a2:	2320      	movs	r3, #32
 80007a4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 80007a6:	2381      	movs	r3, #129	@ 0x81
 80007a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80007b6:	2340      	movs	r3, #64	@ 0x40
 80007b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4618      	mov	r0, r3
 80007cc:	f008 fc52 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80007d6:	f000 fee1 	bl	800159c <Error_Handler>
  }
}
 80007da:	bf00      	nop
 80007dc:	37c0      	adds	r7, #192	@ 0xc0
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000808:	4b31      	ldr	r3, [pc, #196]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800080a:	4a32      	ldr	r2, [pc, #200]	@ (80008d4 <MX_ADC1_Init+0xf0>)
 800080c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800080e:	4b30      	ldr	r3, [pc, #192]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000810:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000814:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000816:	4b2e      	ldr	r3, [pc, #184]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000824:	2204      	movs	r2, #4
 8000826:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800082a:	2200      	movs	r2, #0
 800082c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000834:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000836:	2201      	movs	r2, #1
 8000838:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b22      	ldr	r3, [pc, #136]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800084c:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000852:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000868:	2201      	movs	r2, #1
 800086a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086c:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <MX_ADC1_Init+0xec>)
 800086e:	f002 f8d3 	bl	8002a18 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000878:	f000 fe90 	bl	800159c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_ADC1_Init+0xec>)
 8000888:	f002 fe8a 	bl	80035a0 <HAL_ADCEx_MultiModeConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000892:	f000 fe83 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX_ADC1_Init+0xf4>)
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089a:	2306      	movs	r3, #6
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a8:	2304      	movs	r3, #4
 80008aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <MX_ADC1_Init+0xec>)
 80008ba:	f002 fa4f 	bl	8002d5c <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80008c4:	f000 fe6a 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	@ 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2400026c 	.word	0x2400026c
 80008d4:	40022000 	.word	0x40022000
 80008d8:	08600004 	.word	0x08600004

080008dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 80008f6:	4a2c      	ldr	r2, [pc, #176]	@ (80009a8 <MX_ADC2_Init+0xcc>)
 80008f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 80008fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000900:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000902:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000908:	4b26      	ldr	r3, [pc, #152]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090e:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000910:	2204      	movs	r2, #4
 8000912:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000914:	4b23      	ldr	r3, [pc, #140]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000916:	2200      	movs	r2, #0
 8000918:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800091c:	2200      	movs	r2, #0
 800091e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000920:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000922:	2201      	movs	r2, #1
 8000924:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000926:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000928:	2200      	movs	r2, #0
 800092a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092c:	4b1d      	ldr	r3, [pc, #116]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000946:	2200      	movs	r2, #0
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 8000954:	2201      	movs	r2, #1
 8000956:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800095a:	f002 f85d 	bl	8002a18 <HAL_ADC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 fe1a 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000968:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_ADC2_Init+0xd0>)
 800096a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800096c:	2306      	movs	r3, #6
 800096e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000974:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000978:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800097a:	2304      	movs	r3, #4
 800097c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	@ (80009a4 <MX_ADC2_Init+0xc8>)
 800098c:	f002 f9e6 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 8000996:	f000 fe01 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	240002d0 	.word	0x240002d0
 80009a8:	40022100 	.word	0x40022100
 80009ac:	08600004 	.word	0x08600004

080009b0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
 80009c4:	615a      	str	r2, [r3, #20]
 80009c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009ca:	4a2c      	ldr	r2, [pc, #176]	@ (8000a7c <MX_ADC3_Init+0xcc>)
 80009cc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80009d6:	4b28      	ldr	r3, [pc, #160]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009dc:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009e4:	2204      	movs	r2, #4
 80009e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009e8:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009ee:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80009f4:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000a26:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a2c:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a2e:	f001 fff3 	bl	8002a18 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 fdb0 	bl	800159c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_ADC3_Init+0xd0>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a48:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <MX_ADC3_Init+0xc8>)
 8000a60:	f002 f97c 	bl	8002d5c <HAL_ADC_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 8000a6a:	f000 fd97 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	3720      	adds	r7, #32
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	24000334 	.word	0x24000334
 8000a7c:	58026000 	.word	0x58026000
 8000a80:	08600004 	.word	0x08600004

08000a84 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000b08 <MX_ETH_Init+0x84>)
 8000a8c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000a9c:	22e1      	movs	r2, #225	@ 0xe1
 8000a9e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000ab4:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <MX_ETH_Init+0x88>)
 8000ab6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000ac0:	4a13      	ldr	r2, [pc, #76]	@ (8000b10 <MX_ETH_Init+0x8c>)
 8000ac2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000ac6:	4a13      	ldr	r2, [pc, #76]	@ (8000b14 <MX_ETH_Init+0x90>)
 8000ac8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000acc:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000ad0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ad2:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <MX_ETH_Init+0x80>)
 8000ad4:	f002 ffca 	bl	8003a6c <HAL_ETH_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ade:	f000 fd5d 	bl	800159c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ae2:	2238      	movs	r2, #56	@ 0x38
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <MX_ETH_Init+0x94>)
 8000ae8:	f018 f8be 	bl	8018c68 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_ETH_Init+0x94>)
 8000aee:	2221      	movs	r2, #33	@ 0x21
 8000af0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_ETH_Init+0x94>)
 8000af4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000af8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_ETH_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000398 	.word	0x24000398
 8000b08:	40028000 	.word	0x40028000
 8000b0c:	24000940 	.word	0x24000940
 8000b10:	240001b8 	.word	0x240001b8
 8000b14:	24000158 	.word	0x24000158
 8000b18:	24000234 	.word	0x24000234

08000b1c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <MX_I2C4_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10707DBC;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <MX_I2C4_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b58:	f005 feb0 	bl	80068bc <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 fd1b 	bl	800159c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b6a:	f005 ff43 	bl	80069f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 fd12 	bl	800159c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_I2C4_Init+0x74>)
 8000b7c:	f005 ff85 	bl	8006a8a <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 fd09 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	24000448 	.word	0x24000448
 8000b94:	58001c00 	.word	0x58001c00
 8000b98:	10707dbc 	.word	0x10707dbc

08000b9c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000ba2:	4a28      	ldr	r2, [pc, #160]	@ (8000c44 <MX_SPI4_Init+0xa8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000ba8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bac:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b24      	ldr	r3, [pc, #144]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bc8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000be6:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bf2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <MX_SPI4_Init+0xa4>)
 8000c2c:	f00a ff20 	bl	800ba70 <HAL_SPI_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000c36:	f000 fcb1 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2400049c 	.word	0x2400049c
 8000c44:	40013400 	.word	0x40013400

08000c48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c66:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c68:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <MX_TIM1_Init+0xc4>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000c92:	481d      	ldr	r0, [pc, #116]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000c94:	f00b f8d9 	bl	800be4a <HAL_TIM_IC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c9e:	f000 fc7d 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4814      	ldr	r0, [pc, #80]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000cb6:	f00b ff6f 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000cc0:	f000 fc6c 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000cdc:	f00b f90c 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000ce6:	f000 fc59 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	2208      	movs	r2, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_TIM1_Init+0xc0>)
 8000cf2:	f00b f901 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000cfc:	f000 fc4e 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24000524 	.word	0x24000524
 8000d0c:	40010000 	.word	0x40010000

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d22:	463b      	mov	r3, r7
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
 8000d32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d5c:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d5e:	f00b f81d 	bl	800bd9c <HAL_TIM_PWM_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 fc18 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000d7c:	f00b ff0c 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d86:	f000 fc09 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8a:	2360      	movs	r3, #96	@ 0x60
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2208      	movs	r2, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000da2:	f00b f945 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000dac:	f000 fbf6 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <MX_TIM2_Init+0xb0>)
 8000db2:	f000 ffe9 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	@ 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000570 	.word	0x24000570

08000dc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	@ 0x28
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dca:	f107 031c 	add.w	r3, r7, #28
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
 8000de4:	615a      	str	r2, [r3, #20]
 8000de6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000dea:	4a28      	ldr	r2, [pc, #160]	@ (8000e8c <MX_TIM3_Init+0xc8>)
 8000dec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dfa:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000dfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e0e:	481e      	ldr	r0, [pc, #120]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e10:	f00a ffc4 	bl	800bd9c <HAL_TIM_PWM_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e1a:	f000 fbbf 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e2e:	f00b feb3 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e38:	f000 fbb0 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3c:	2360      	movs	r3, #96	@ 0x60
 8000e3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e54:	f00b f8ec 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000e5e:	f000 fb9d 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4807      	ldr	r0, [pc, #28]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e6a:	f00b f8e1 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000e74:	f000 fb92 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <MX_TIM3_Init+0xc4>)
 8000e7a:	f000 ff85 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240005bc 	.word	0x240005bc
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	@ 0x28
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
 8000eb0:	615a      	str	r2, [r3, #20]
 8000eb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb4:	4b32      	ldr	r3, [pc, #200]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000eb6:	4a33      	ldr	r2, [pc, #204]	@ (8000f84 <MX_TIM4_Init+0xf4>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000eda:	4829      	ldr	r0, [pc, #164]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000edc:	f00a ff5e 	bl	800bd9c <HAL_TIM_PWM_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ee6:	f000 fb59 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4821      	ldr	r0, [pc, #132]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000efa:	f00b fe4d 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f04:	f000 fb4a 	bl	800159c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f08:	2360      	movs	r3, #96	@ 0x60
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4818      	ldr	r0, [pc, #96]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000f20:	f00b f886 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f2a:	f000 fb37 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2204      	movs	r2, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4812      	ldr	r0, [pc, #72]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000f36:	f00b f87b 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f40:	f000 fb2c 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	2208      	movs	r2, #8
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000f4c:	f00b f870 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000f56:	f000 fb21 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4807      	ldr	r0, [pc, #28]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000f62:	f00b f865 	bl	800c030 <HAL_TIM_PWM_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000f6c:	f000 fb16 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f70:	4803      	ldr	r0, [pc, #12]	@ (8000f80 <MX_TIM4_Init+0xf0>)
 8000f72:	f000 ff09 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000608 	.word	0x24000608
 8000f84:	40000800 	.word	0x40000800

08000f88 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fa8:	4a33      	ldr	r2, [pc, #204]	@ (8001078 <MX_TIM8_Init+0xf0>)
 8000faa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fac:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fbe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8000fd2:	4828      	ldr	r0, [pc, #160]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000fd4:	f00a ff39 	bl	800be4a <HAL_TIM_IC_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000fde:	f000 fadd 	bl	800159c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481f      	ldr	r0, [pc, #124]	@ (8001074 <MX_TIM8_Init+0xec>)
 8000ff6:	f00b fdcf 	bl	800cb98 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001000:	f000 facc 	bl	800159c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001008:	2301      	movs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4816      	ldr	r0, [pc, #88]	@ (8001074 <MX_TIM8_Init+0xec>)
 800101c:	f00a ff6c 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8001026:	f000 fab9 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2204      	movs	r2, #4
 800102e:	4619      	mov	r1, r3
 8001030:	4810      	ldr	r0, [pc, #64]	@ (8001074 <MX_TIM8_Init+0xec>)
 8001032:	f00a ff61 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM8_Init+0xb8>
  {
    Error_Handler();
 800103c:	f000 faae 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2208      	movs	r2, #8
 8001044:	4619      	mov	r1, r3
 8001046:	480b      	ldr	r0, [pc, #44]	@ (8001074 <MX_TIM8_Init+0xec>)
 8001048:	f00a ff56 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM8_Init+0xce>
  {
    Error_Handler();
 8001052:	f000 faa3 	bl	800159c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	220c      	movs	r2, #12
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_TIM8_Init+0xec>)
 800105e:	f00a ff4b 	bl	800bef8 <HAL_TIM_IC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM8_Init+0xe4>
  {
    Error_Handler();
 8001068:	f000 fa98 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	24000654 	.word	0x24000654
 8001078:	40010400 	.word	0x40010400

0800107c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_TIM17_Init+0x44>)
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <MX_TIM17_Init+0x48>)
 8001084:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_TIM17_Init+0x44>)
 8001088:	2200      	movs	r2, #0
 800108a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_TIM17_Init+0x44>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_TIM17_Init+0x44>)
 8001094:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001098:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_TIM17_Init+0x44>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <MX_TIM17_Init+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_TIM17_Init+0x44>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <MX_TIM17_Init+0x44>)
 80010ae:	f00a fe1e 	bl	800bcee <HAL_TIM_Base_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80010b8:	f000 fa70 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240006a0 	.word	0x240006a0
 80010c4:	40014800 	.word	0x40014800

080010c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <MX_UART4_Init+0x98>)
 80010ce:	4a25      	ldr	r2, [pc, #148]	@ (8001164 <MX_UART4_Init+0x9c>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010d2:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <MX_UART4_Init+0x98>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_UART4_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_UART4_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_UART4_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_UART4_Init+0x98>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_UART4_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_UART4_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_UART4_Init+0x98>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_UART4_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_UART4_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8001110:	2300      	movs	r3, #0
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	4812      	ldr	r0, [pc, #72]	@ (8001160 <MX_UART4_Init+0x98>)
 8001118:	f00c fda4 	bl	800dc64 <HAL_RS485Ex_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8001122:	f000 fa3b 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_UART4_Init+0x98>)
 800112a:	f00c fe3e 	bl	800ddaa <HAL_UARTEx_SetTxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8001134:	f000 fa32 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001138:	2100      	movs	r1, #0
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <MX_UART4_Init+0x98>)
 800113c:	f00c fe73 	bl	800de26 <HAL_UARTEx_SetRxFifoThreshold>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8001146:	f000 fa29 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_UART4_Init+0x98>)
 800114c:	f00c fdf4 	bl	800dd38 <HAL_UARTEx_DisableFifoMode>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8001156:	f000 fa21 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	240006ec 	.word	0x240006ec
 8001164:	40004c00 	.word	0x40004c00

08001168 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <MX_UART5_Init+0x90>)
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <MX_UART5_Init+0x94>)
 8001170:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001172:	4b21      	ldr	r3, [pc, #132]	@ (80011f8 <MX_UART5_Init+0x90>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <MX_UART5_Init+0x90>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b1d      	ldr	r3, [pc, #116]	@ (80011f8 <MX_UART5_Init+0x90>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001186:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_UART5_Init+0x90>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <MX_UART5_Init+0x90>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_UART5_Init+0x90>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <MX_UART5_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011a4:	4b14      	ldr	r3, [pc, #80]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011b0:	4811      	ldr	r0, [pc, #68]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011b2:	f00b fd7f 	bl	800ccb4 <HAL_UART_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80011bc:	f000 f9ee 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c0:	2100      	movs	r1, #0
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011c4:	f00c fdf1 	bl	800ddaa <HAL_UARTEx_SetTxFifoThreshold>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80011ce:	f000 f9e5 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011d6:	f00c fe26 	bl	800de26 <HAL_UARTEx_SetRxFifoThreshold>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80011e0:	f000 f9dc 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_UART5_Init+0x90>)
 80011e6:	f00c fda7 	bl	800dd38 <HAL_UARTEx_DisableFifoMode>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f9d4 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	24000780 	.word	0x24000780
 80011fc:	40005000 	.word	0x40005000

08001200 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_UART8_Init+0x90>)
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <MX_UART8_Init+0x94>)
 8001208:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_UART8_Init+0x90>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_UART8_Init+0x90>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <MX_UART8_Init+0x90>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_UART8_Init+0x90>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_UART8_Init+0x90>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_UART8_Init+0x90>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_UART8_Init+0x90>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <MX_UART8_Init+0x90>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_UART8_Init+0x90>)
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <MX_UART8_Init+0x90>)
 8001244:	2200      	movs	r2, #0
 8001246:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <MX_UART8_Init+0x90>)
 800124a:	f00b fd33 	bl	800ccb4 <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001254:	f000 f9a2 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_UART8_Init+0x90>)
 800125c:	f00c fda5 	bl	800ddaa <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001266:	f000 f999 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_UART8_Init+0x90>)
 800126e:	f00c fdda 	bl	800de26 <HAL_UARTEx_SetRxFifoThreshold>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001278:	f000 f990 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_UART8_Init+0x90>)
 800127e:	f00c fd5b 	bl	800dd38 <HAL_UARTEx_DisableFifoMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001288:	f000 f988 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24000814 	.word	0x24000814
 8001294:	40007c00 	.word	0x40007c00

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b22      	ldr	r3, [pc, #136]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 800129e:	4a23      	ldr	r2, [pc, #140]	@ (800132c <MX_USART2_UART_Init+0x94>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012e0:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012e2:	f00b fce7 	bl	800ccb4 <HAL_UART_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012ec:	f000 f956 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 80012f4:	f00c fd59 	bl	800ddaa <HAL_UARTEx_SetTxFifoThreshold>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012fe:	f000 f94d 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4808      	ldr	r0, [pc, #32]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 8001306:	f00c fd8e 	bl	800de26 <HAL_UARTEx_SetRxFifoThreshold>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 f944 	bl	800159c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001314:	4804      	ldr	r0, [pc, #16]	@ (8001328 <MX_USART2_UART_Init+0x90>)
 8001316:	f00c fd0f 	bl	800dd38 <HAL_UARTEx_DisableFifoMode>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001320:	f000 f93c 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}
 8001328:	240008a8 	.word	0x240008a8
 800132c:	40004400 	.word	0x40004400

08001330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	@ 0x38
 8001334:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001346:	4b73      	ldr	r3, [pc, #460]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	4a71      	ldr	r2, [pc, #452]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001356:	4b6f      	ldr	r3, [pc, #444]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001364:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a6a      	ldr	r2, [pc, #424]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b67      	ldr	r3, [pc, #412]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001382:	4b64      	ldr	r3, [pc, #400]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a62      	ldr	r2, [pc, #392]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800138a:	f043 0320 	orr.w	r3, r3, #32
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b60      	ldr	r3, [pc, #384]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b58      	ldr	r3, [pc, #352]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b55      	ldr	r3, [pc, #340]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c4:	4a53      	ldr	r2, [pc, #332]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ce:	4b51      	ldr	r3, [pc, #324]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	4a4c      	ldr	r2, [pc, #304]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ec:	4b49      	ldr	r3, [pc, #292]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fa:	4b46      	ldr	r3, [pc, #280]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	4a44      	ldr	r2, [pc, #272]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140a:	4b42      	ldr	r3, [pc, #264]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800140c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001418:	4b3e      	ldr	r3, [pc, #248]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141e:	4a3d      	ldr	r2, [pc, #244]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001428:	4b3a      	ldr	r3, [pc, #232]	@ (8001514 <MX_GPIO_Init+0x1e4>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_Pin|HOLD_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2118      	movs	r1, #24
 800143a:	4837      	ldr	r0, [pc, #220]	@ (8001518 <MX_GPIO_Init+0x1e8>)
 800143c:	f003 f8fa 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001446:	4835      	ldr	r0, [pc, #212]	@ (800151c <MX_GPIO_Init+0x1ec>)
 8001448:	f003 f8f4 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_Pin HOLD_Pin */
  GPIO_InitStruct.Pin = CS_Pin|HOLD_Pin;
 800144c:	2318      	movs	r3, #24
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	482d      	ldr	r0, [pc, #180]	@ (8001518 <MX_GPIO_Init+0x1e8>)
 8001464:	f002 ff36 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ETH_INT_Pin */
  GPIO_InitStruct.Pin = ETH_INT_Pin;
 8001468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ETH_INT_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4828      	ldr	r0, [pc, #160]	@ (8001520 <MX_GPIO_Init+0x1f0>)
 8001480:	f002 ff28 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Input_Curr_INT_Pin */
  GPIO_InitStruct.Pin = Input_Curr_INT_Pin;
 8001484:	2301      	movs	r3, #1
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Input_Curr_INT_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4822      	ldr	r0, [pc, #136]	@ (8001524 <MX_GPIO_Init+0x1f4>)
 800149a:	f002 ff1b 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Temp_ALERT_Pin */
  GPIO_InitStruct.Pin = Temp_ALERT_Pin;
 800149e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Temp_ALERT_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4818      	ldr	r0, [pc, #96]	@ (8001518 <MX_GPIO_Init+0x1e8>)
 80014b6:	f002 ff0d 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TPH_Pin TPL_Pin BT_Pin */
  GPIO_InitStruct.Pin = TPH_Pin|TPL_Pin|BT_Pin;
 80014ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4812      	ldr	r0, [pc, #72]	@ (8001518 <MX_GPIO_Init+0x1e8>)
 80014d0:	f002 ff00 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FAULT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin;
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FAULT_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	480f      	ldr	r0, [pc, #60]	@ (8001528 <MX_GPIO_Init+0x1f8>)
 80014ea:	f002 fef3 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 80014ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_GPIO_Init+0x1ec>)
 8001508:	f002 fee4 	bl	80042d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3738      	adds	r7, #56	@ 0x38
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	58024400 	.word	0x58024400
 8001518:	58021000 	.word	0x58021000
 800151c:	58020c00 	.word	0x58020c00
 8001520:	58021400 	.word	0x58021400
 8001524:	58021800 	.word	0x58021800
 8001528:	58020400 	.word	0x58020400

0800152c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001534:	f016 fb18 	bl	8017b68 <MX_USB_DEVICE_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001538:	f016 ffd0 	bl	80184dc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800153c:	2001      	movs	r0, #1
 800153e:	f013 fc25 	bl	8014d8c <osDelay>
 8001542:	e7fb      	b.n	800153c <StartDefaultTask+0x10>

08001544 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001556:	f002 fa11 	bl	800397c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800155e:	2300      	movs	r3, #0
 8001560:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001566:	231f      	movs	r3, #31
 8001568:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800156a:	2387      	movs	r3, #135	@ 0x87
 800156c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800156e:	2300      	movs	r3, #0
 8001570:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800157a:	2301      	movs	r3, #1
 800157c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001586:	463b      	mov	r3, r7
 8001588:	4618      	mov	r0, r3
 800158a:	f002 fa2f 	bl	80039ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800158e:	2004      	movs	r0, #4
 8001590:	f002 fa0c 	bl	80039ac <HAL_MPU_Enable>

}
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <Error_Handler+0x8>

080015a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x38>)
 80015b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b4:	4a0a      	ldr	r2, [pc, #40]	@ (80015e0 <HAL_MspInit+0x38>)
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_MspInit+0x38>)
 80015c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	210f      	movs	r1, #15
 80015d0:	f06f 0001 	mvn.w	r0, #1
 80015d4:	f002 f99d 	bl	8003912 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58024400 	.word	0x58024400

080015e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b092      	sub	sp, #72	@ 0x48
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a8e      	ldr	r2, [pc, #568]	@ (800183c <HAL_ADC_MspInit+0x258>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d16a      	bne.n	80016dc <HAL_ADC_MspInit+0xf8>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001606:	4b8e      	ldr	r3, [pc, #568]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a8c      	ldr	r2, [pc, #560]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 800160e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001610:	4b8b      	ldr	r3, [pc, #556]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10e      	bne.n	8001636 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001618:	4b8a      	ldr	r3, [pc, #552]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800161a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800161e:	4a89      	ldr	r2, [pc, #548]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001628:	4b86      	ldr	r3, [pc, #536]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800162a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	633b      	str	r3, [r7, #48]	@ 0x30
 8001634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	4b83      	ldr	r3, [pc, #524]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163c:	4a81      	ldr	r2, [pc, #516]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001646:	4b7f      	ldr	r3, [pc, #508]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001654:	4b7b      	ldr	r3, [pc, #492]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165a:	4a7a      	ldr	r2, [pc, #488]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001664:	4b77      	ldr	r3, [pc, #476]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001672:	4b74      	ldr	r3, [pc, #464]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	4a72      	ldr	r2, [pc, #456]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800167a:	f043 0320 	orr.w	r3, r3, #32
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001682:	4b70      	ldr	r3, [pc, #448]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001690:	2379      	movs	r3, #121	@ 0x79
 8001692:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001694:	2303      	movs	r3, #3
 8001696:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a0:	4619      	mov	r1, r3
 80016a2:	4869      	ldr	r0, [pc, #420]	@ (8001848 <HAL_ADC_MspInit+0x264>)
 80016a4:	f002 fe16 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016a8:	2303      	movs	r3, #3
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016b8:	4619      	mov	r1, r3
 80016ba:	4864      	ldr	r0, [pc, #400]	@ (800184c <HAL_ADC_MspInit+0x268>)
 80016bc:	f002 fe0a 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80016c4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016d2:	4619      	mov	r1, r3
 80016d4:	485e      	ldr	r0, [pc, #376]	@ (8001850 <HAL_ADC_MspInit+0x26c>)
 80016d6:	f002 fdfd 	bl	80042d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016da:	e0ab      	b.n	8001834 <HAL_ADC_MspInit+0x250>
  else if(hadc->Instance==ADC2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a5c      	ldr	r2, [pc, #368]	@ (8001854 <HAL_ADC_MspInit+0x270>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d14f      	bne.n	8001786 <HAL_ADC_MspInit+0x1a2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80016e6:	4b56      	ldr	r3, [pc, #344]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a54      	ldr	r2, [pc, #336]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 80016ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_ADC_MspInit+0x25c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d10e      	bne.n	8001716 <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80016f8:	4b52      	ldr	r3, [pc, #328]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80016fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016fe:	4a51      	ldr	r2, [pc, #324]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001708:	4b4e      	ldr	r3, [pc, #312]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800170a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b4b      	ldr	r3, [pc, #300]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171c:	4a49      	ldr	r2, [pc, #292]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001734:	4b43      	ldr	r3, [pc, #268]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173a:	4a42      	ldr	r2, [pc, #264]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001744:	4b3f      	ldr	r3, [pc, #252]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174a:	f003 0320 	and.w	r3, r3, #32
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001752:	2308      	movs	r3, #8
 8001754:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001762:	4619      	mov	r1, r3
 8001764:	4838      	ldr	r0, [pc, #224]	@ (8001848 <HAL_ADC_MspInit+0x264>)
 8001766:	f002 fdb5 	bl	80042d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800176a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800176e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001770:	2303      	movs	r3, #3
 8001772:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001778:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800177c:	4619      	mov	r1, r3
 800177e:	4834      	ldr	r0, [pc, #208]	@ (8001850 <HAL_ADC_MspInit+0x26c>)
 8001780:	f002 fda8 	bl	80042d4 <HAL_GPIO_Init>
}
 8001784:	e056      	b.n	8001834 <HAL_ADC_MspInit+0x250>
  else if(hadc->Instance==ADC3)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	@ (8001858 <HAL_ADC_MspInit+0x274>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d151      	bne.n	8001834 <HAL_ADC_MspInit+0x250>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001790:	4b2c      	ldr	r3, [pc, #176]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	4a2b      	ldr	r2, [pc, #172]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 8001798:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800179c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a0:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b25      	ldr	r3, [pc, #148]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	4a23      	ldr	r2, [pc, #140]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017b6:	f043 0320 	orr.w	r3, r3, #32
 80017ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <HAL_ADC_MspInit+0x260>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80017ea:	f44f 63ef 	mov.w	r3, #1912	@ 0x778
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f0:	2303      	movs	r3, #3
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017fc:	4619      	mov	r1, r3
 80017fe:	4814      	ldr	r0, [pc, #80]	@ (8001850 <HAL_ADC_MspInit+0x26c>)
 8001800:	f002 fd68 	bl	80042d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001804:	2301      	movs	r3, #1
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001814:	4619      	mov	r1, r3
 8001816:	4811      	ldr	r0, [pc, #68]	@ (800185c <HAL_ADC_MspInit+0x278>)
 8001818:	f002 fd5c 	bl	80042d4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800181c:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001820:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8001824:	f000 ff24 	bl	8002670 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001828:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 800182c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8001830:	f000 ff1e 	bl	8002670 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001834:	bf00      	nop
 8001836:	3748      	adds	r7, #72	@ 0x48
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40022000 	.word	0x40022000
 8001840:	24000948 	.word	0x24000948
 8001844:	58024400 	.word	0x58024400
 8001848:	58020000 	.word	0x58020000
 800184c:	58020400 	.word	0x58020400
 8001850:	58021400 	.word	0x58021400
 8001854:	40022100 	.word	0x40022100
 8001858:	58026000 	.word	0x58026000
 800185c:	58020800 	.word	0x58020800

08001860 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	@ 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a59      	ldr	r2, [pc, #356]	@ (80019e4 <HAL_ETH_MspInit+0x184>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80ab 	bne.w	80019da <HAL_ETH_MspInit+0x17a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001884:	4b58      	ldr	r3, [pc, #352]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 8001886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800188a:	4a57      	ldr	r2, [pc, #348]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800188c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001890:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001894:	4b54      	ldr	r3, [pc, #336]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 8001896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800189a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80018a2:	4b51      	ldr	r3, [pc, #324]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018a8:	4a4f      	ldr	r2, [pc, #316]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018b2:	4b4d      	ldr	r3, [pc, #308]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80018c0:	4b49      	ldr	r3, [pc, #292]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018c6:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80018d0:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	4b42      	ldr	r3, [pc, #264]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e4:	4a40      	ldr	r2, [pc, #256]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ee:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001902:	4a39      	ldr	r2, [pc, #228]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800190c:	4b36      	ldr	r3, [pc, #216]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800190e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	4a31      	ldr	r2, [pc, #196]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	4a2a      	ldr	r2, [pc, #168]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 8001940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <HAL_ETH_MspInit+0x188>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG12     ------> ETH_TXD1
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001956:	2332      	movs	r3, #50	@ 0x32
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001966:	230b      	movs	r3, #11
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	481e      	ldr	r0, [pc, #120]	@ (80019ec <HAL_ETH_MspInit+0x18c>)
 8001972:	f002 fcaf 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001976:	2386      	movs	r3, #134	@ 0x86
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001986:	230b      	movs	r3, #11
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	4817      	ldr	r0, [pc, #92]	@ (80019f0 <HAL_ETH_MspInit+0x190>)
 8001992:	f002 fc9f 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001996:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a8:	230b      	movs	r3, #11
 80019aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4810      	ldr	r0, [pc, #64]	@ (80019f4 <HAL_ETH_MspInit+0x194>)
 80019b4:	f002 fc8e 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019b8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019ca:	230b      	movs	r3, #11
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4808      	ldr	r0, [pc, #32]	@ (80019f8 <HAL_ETH_MspInit+0x198>)
 80019d6:	f002 fc7d 	bl	80042d4 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80019da:	bf00      	nop
 80019dc:	3738      	adds	r7, #56	@ 0x38
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40028000 	.word	0x40028000
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58020800 	.word	0x58020800
 80019f0:	58020000 	.word	0x58020000
 80019f4:	58020400 	.word	0x58020400
 80019f8:	58021800 	.word	0x58021800

080019fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	22c0      	movs	r2, #192	@ 0xc0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f017 f923 	bl	8018c68 <memset>
  if(hi2c->Instance==I2C4)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a27      	ldr	r2, [pc, #156]	@ (8001ac4 <HAL_I2C_MspInit+0xc8>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d146      	bne.n	8001aba <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001a2c:	f04f 0210 	mov.w	r2, #16
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4618      	mov	r0, r3
 8001a44:	f007 fb16 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a4e:	f7ff fda5 	bl	800159c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a70:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a78:	2312      	movs	r3, #18
 8001a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a94:	4619      	mov	r1, r3
 8001a96:	480d      	ldr	r0, [pc, #52]	@ (8001acc <HAL_I2C_MspInit+0xd0>)
 8001a98:	f002 fc1c 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001a9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aa8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_I2C_MspInit+0xcc>)
 8001aae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001aba:	bf00      	nop
 8001abc:	37e8      	adds	r7, #232	@ 0xe8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	58001c00 	.word	0x58001c00
 8001ac8:	58024400 	.word	0x58024400
 8001acc:	58020c00 	.word	0x58020c00

08001ad0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	22c0      	movs	r2, #192	@ 0xc0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f017 f8b9 	bl	8018c68 <memset>
  if(hspi->Instance==SPI4)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a26      	ldr	r2, [pc, #152]	@ (8001b94 <HAL_SPI_MspInit+0xc4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d144      	bne.n	8001b8a <HAL_SPI_MspInit+0xba>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001b00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f007 faad 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b20:	f7ff fd3c 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b24:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b48:	4a13      	ldr	r2, [pc, #76]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b4a:	f043 0310 	orr.w	r3, r3, #16
 8001b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_SPI_MspInit+0xc8>)
 8001b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b60:	2364      	movs	r3, #100	@ 0x64
 8001b62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001b78:	2305      	movs	r3, #5
 8001b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <HAL_SPI_MspInit+0xcc>)
 8001b86:	f002 fba5 	bl	80042d4 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001b8a:	bf00      	nop
 8001b8c:	37e8      	adds	r7, #232	@ 0xe8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40013400 	.word	0x40013400
 8001b98:	58024400 	.word	0x58024400
 8001b9c:	58021000 	.word	0x58021000

08001ba0 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	@ 0x30
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a35      	ldr	r2, [pc, #212]	@ (8001c94 <HAL_TIM_IC_MspInit+0xf4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d12f      	bne.n	8001c22 <HAL_TIM_IC_MspInit+0x82>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc2:	4b35      	ldr	r3, [pc, #212]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc8:	4a33      	ldr	r2, [pc, #204]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001be6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bf0:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001bfe:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4820      	ldr	r0, [pc, #128]	@ (8001c9c <HAL_TIM_IC_MspInit+0xfc>)
 8001c1c:	f002 fb5a 	bl	80042d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c20:	e033      	b.n	8001c8a <HAL_TIM_IC_MspInit+0xea>
  else if(htim_ic->Instance==TIM8)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <HAL_TIM_IC_MspInit+0x100>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d12e      	bne.n	8001c8a <HAL_TIM_IC_MspInit+0xea>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c32:	4a19      	ldr	r2, [pc, #100]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c50:	4a11      	ldr	r2, [pc, #68]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c98 <HAL_TIM_IC_MspInit+0xf8>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001c68:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4807      	ldr	r0, [pc, #28]	@ (8001ca4 <HAL_TIM_IC_MspInit+0x104>)
 8001c86:	f002 fb25 	bl	80042d4 <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	@ 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40010000 	.word	0x40010000
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58020000 	.word	0x58020000
 8001ca0:	40010400 	.word	0x40010400
 8001ca4:	58020800 	.word	0x58020800

08001ca8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b087      	sub	sp, #28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb8:	d10f      	bne.n	8001cda <HAL_TIM_PWM_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cca:	4b1b      	ldr	r3, [pc, #108]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001ccc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cd8:	e028      	b.n	8001d2c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM3)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a17      	ldr	r2, [pc, #92]	@ (8001d3c <HAL_TIM_PWM_MspInit+0x94>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10f      	bne.n	8001d04 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce4:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001ce6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cea:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cf4:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001cf6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]
}
 8001d02:	e013      	b.n	8001d2c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <HAL_TIM_PWM_MspInit+0x98>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d10e      	bne.n	8001d2c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d14:	4a08      	ldr	r2, [pc, #32]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_TIM_PWM_MspInit+0x90>)
 8001d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	371c      	adds	r7, #28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800

08001d44 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	@ (8001d80 <HAL_TIM_Base_MspInit+0x3c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10e      	bne.n	8001d74 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_TIM_Base_MspInit+0x40>)
 8001d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d5c:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_TIM_Base_MspInit+0x40>)
 8001d5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d62:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d66:	4b07      	ldr	r3, [pc, #28]	@ (8001d84 <HAL_TIM_Base_MspInit+0x40>)
 8001d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40014800 	.word	0x40014800
 8001d84:	58024400 	.word	0x58024400

08001d88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	@ 0x28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001da8:	d120      	bne.n	8001dec <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001daa:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001db0:	4a35      	ldr	r2, [pc, #212]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001db2:	f043 0302 	orr.w	r3, r3, #2
 8001db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4829      	ldr	r0, [pc, #164]	@ (8001e8c <HAL_TIM_MspPostInit+0x104>)
 8001de6:	f002 fa75 	bl	80042d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001dea:	e049      	b.n	8001e80 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM3)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a27      	ldr	r2, [pc, #156]	@ (8001e90 <HAL_TIM_MspPostInit+0x108>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d11f      	bne.n	8001e36 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfc:	4a22      	ldr	r2, [pc, #136]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001dfe:	f043 0302 	orr.w	r3, r3, #2
 8001e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e14:	2330      	movs	r3, #48	@ 0x30
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e24:	2302      	movs	r3, #2
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4817      	ldr	r0, [pc, #92]	@ (8001e8c <HAL_TIM_MspPostInit+0x104>)
 8001e30:	f002 fa50 	bl	80042d4 <HAL_GPIO_Init>
}
 8001e34:	e024      	b.n	8001e80 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM4)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_TIM_MspPostInit+0x10c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d11f      	bne.n	8001e80 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e46:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e50:	4b0d      	ldr	r3, [pc, #52]	@ (8001e88 <HAL_TIM_MspPostInit+0x100>)
 8001e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001e5e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e70:	2302      	movs	r3, #2
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <HAL_TIM_MspPostInit+0x104>)
 8001e7c:	f002 fa2a 	bl	80042d4 <HAL_GPIO_Init>
}
 8001e80:	bf00      	nop
 8001e82:	3728      	adds	r7, #40	@ 0x28
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	58020400 	.word	0x58020400
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0c2      	sub	sp, #264	@ 0x108
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ea6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ebc:	22c0      	movs	r2, #192	@ 0xc0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f016 fed1 	bl	8018c68 <memset>
  if(huart->Instance==UART4)
 8001ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001eca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4ac8      	ldr	r2, [pc, #800]	@ (80021f4 <HAL_UART_MspInit+0x35c>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d16c      	bne.n	8001fb2 <HAL_UART_MspInit+0x11a>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ed8:	f04f 0202 	mov.w	r2, #2
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f007 f8c0 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8001efa:	f7ff fb4f 	bl	800159c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001efe:	4bbe      	ldr	r3, [pc, #760]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f04:	4abc      	ldr	r2, [pc, #752]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f06:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f0e:	4bba      	ldr	r3, [pc, #744]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4bb6      	ldr	r3, [pc, #728]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f22:	4ab5      	ldr	r2, [pc, #724]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f2c:	4bb2      	ldr	r3, [pc, #712]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3a:	4baf      	ldr	r3, [pc, #700]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f40:	4aad      	ldr	r2, [pc, #692]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f4a:	4bab      	ldr	r3, [pc, #684]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f72:	2308      	movs	r3, #8
 8001f74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	489f      	ldr	r0, [pc, #636]	@ (80021fc <HAL_UART_MspInit+0x364>)
 8001f80:	f002 f9a8 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_TX_Pin|RS485_RX_Pin;
 8001f84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4895      	ldr	r0, [pc, #596]	@ (8002200 <HAL_UART_MspInit+0x368>)
 8001fac:	f002 f992 	bl	80042d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fb0:	e11b      	b.n	80021ea <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART5)
 8001fb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a91      	ldr	r2, [pc, #580]	@ (8002204 <HAL_UART_MspInit+0x36c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d16b      	bne.n	800209c <HAL_UART_MspInit+0x204>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fc4:	f04f 0202 	mov.w	r2, #2
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f007 f84a 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0x152>
      Error_Handler();
 8001fe6:	f7ff fad9 	bl	800159c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fea:	4b83      	ldr	r3, [pc, #524]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ff0:	4a81      	ldr	r2, [pc, #516]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8001ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002008:	4b7b      	ldr	r3, [pc, #492]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a7a      	ldr	r2, [pc, #488]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b77      	ldr	r3, [pc, #476]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002026:	4b74      	ldr	r3, [pc, #464]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202c:	4a72      	ldr	r2, [pc, #456]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 800202e:	f043 0308 	orr.w	r3, r3, #8
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002036:	4b70      	ldr	r3, [pc, #448]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RS232_TX_1_Pin;
 8002044:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002048:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800205e:	2308      	movs	r3, #8
 8002060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(RS232_TX_1_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002068:	4619      	mov	r1, r3
 800206a:	4865      	ldr	r0, [pc, #404]	@ (8002200 <HAL_UART_MspInit+0x368>)
 800206c:	f002 f932 	bl	80042d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS232_RX_1_Pin;
 8002070:	2304      	movs	r3, #4
 8002072:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002088:	2308      	movs	r3, #8
 800208a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(RS232_RX_1_GPIO_Port, &GPIO_InitStruct);
 800208e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002092:	4619      	mov	r1, r3
 8002094:	485c      	ldr	r0, [pc, #368]	@ (8002208 <HAL_UART_MspInit+0x370>)
 8002096:	f002 f91d 	bl	80042d4 <HAL_GPIO_Init>
}
 800209a:	e0a6      	b.n	80021ea <HAL_UART_MspInit+0x352>
  else if(huart->Instance==UART8)
 800209c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a58      	ldr	r2, [pc, #352]	@ (800220c <HAL_UART_MspInit+0x374>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d146      	bne.n	800213c <HAL_UART_MspInit+0x2a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80020ae:	f04f 0202 	mov.w	r2, #2
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80020ba:	2300      	movs	r3, #0
 80020bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020c4:	4618      	mov	r0, r3
 80020c6:	f006 ffd5 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 80020d0:	f7ff fa64 	bl	800159c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80020d4:	4b48      	ldr	r3, [pc, #288]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80020d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020da:	4a47      	ldr	r2, [pc, #284]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80020dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80020e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020e4:	4b44      	ldr	r3, [pc, #272]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80020e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020f8:	4a3f      	ldr	r2, [pc, #252]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80020fa:	f043 0310 	orr.w	r3, r3, #16
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002102:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002110:	2303      	movs	r3, #3
 8002112:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	2300      	movs	r3, #0
 8002124:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002128:	2308      	movs	r3, #8
 800212a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800212e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002132:	4619      	mov	r1, r3
 8002134:	4836      	ldr	r0, [pc, #216]	@ (8002210 <HAL_UART_MspInit+0x378>)
 8002136:	f002 f8cd 	bl	80042d4 <HAL_GPIO_Init>
}
 800213a:	e056      	b.n	80021ea <HAL_UART_MspInit+0x352>
  else if(huart->Instance==USART2)
 800213c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a32      	ldr	r2, [pc, #200]	@ (8002214 <HAL_UART_MspInit+0x37c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d14d      	bne.n	80021ea <HAL_UART_MspInit+0x352>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800214e:	f04f 0202 	mov.w	r2, #2
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002160:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002164:	4618      	mov	r0, r3
 8002166:	f006 ff85 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <HAL_UART_MspInit+0x2dc>
      Error_Handler();
 8002170:	f7ff fa14 	bl	800159c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002174:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800217a:	4a1f      	ldr	r2, [pc, #124]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800218a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 8002194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002198:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 800219a:	f043 0308 	orr.w	r3, r3, #8
 800219e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_UART_MspInit+0x360>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a8:	f003 0208 	and.w	r2, r3, #8
 80021ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021c0:	2360      	movs	r3, #96	@ 0x60
 80021c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d8:	2307      	movs	r3, #7
 80021da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021de:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4808      	ldr	r0, [pc, #32]	@ (8002208 <HAL_UART_MspInit+0x370>)
 80021e6:	f002 f875 	bl	80042d4 <HAL_GPIO_Init>
}
 80021ea:	bf00      	nop
 80021ec:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40004c00 	.word	0x40004c00
 80021f8:	58024400 	.word	0x58024400
 80021fc:	58020000 	.word	0x58020000
 8002200:	58020800 	.word	0x58020800
 8002204:	40005000 	.word	0x40005000
 8002208:	58020c00 	.word	0x58020c00
 800220c:	40007c00 	.word	0x40007c00
 8002210:	58021000 	.word	0x58021000
 8002214:	40004400 	.word	0x40004400

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <NMI_Handler+0x4>

08002220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <HardFault_Handler+0x4>

08002228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <MemManage_Handler+0x4>

08002230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <BusFault_Handler+0x4>

08002238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <UsageFault_Handler+0x4>

08002240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002252:	f000 f9a9 	bl	80025a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002256:	f014 fc09 	bl	8016a6c <xTaskGetSchedulerState>
 800225a:	4603      	mov	r3, r0
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002260:	f015 fa02 	bl	8017668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	bd80      	pop	{r7, pc}

08002268 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <OTG_HS_IRQHandler+0x10>)
 800226e:	f002 fcd1 	bl	8004c14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	24006594 	.word	0x24006594

0800227c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <OTG_FS_IRQHandler+0x10>)
 8002282:	f004 fdca 	bl	8006e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	240058a4 	.word	0x240058a4

08002290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002298:	4a14      	ldr	r2, [pc, #80]	@ (80022ec <_sbrk+0x5c>)
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <_sbrk+0x60>)
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <_sbrk+0x64>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <_sbrk+0x68>)
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d207      	bcs.n	80022d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c0:	f016 fcea 	bl	8018c98 <__errno>
 80022c4:	4603      	mov	r3, r0
 80022c6:	220c      	movs	r2, #12
 80022c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	e009      	b.n	80022e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d6:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <_sbrk+0x64>)
 80022e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	24080000 	.word	0x24080000
 80022f0:	00000400 	.word	0x00000400
 80022f4:	2400094c 	.word	0x2400094c
 80022f8:	24006ac0 	.word	0x24006ac0

080022fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002300:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <SystemInit+0x114>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	4a42      	ldr	r2, [pc, #264]	@ (8002410 <SystemInit+0x114>)
 8002308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002310:	4b40      	ldr	r3, [pc, #256]	@ (8002414 <SystemInit+0x118>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	2b06      	cmp	r3, #6
 800231a:	d807      	bhi.n	800232c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800231c:	4b3d      	ldr	r3, [pc, #244]	@ (8002414 <SystemInit+0x118>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 030f 	bic.w	r3, r3, #15
 8002324:	4a3b      	ldr	r2, [pc, #236]	@ (8002414 <SystemInit+0x118>)
 8002326:	f043 0307 	orr.w	r3, r3, #7
 800232a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800232c:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <SystemInit+0x11c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a39      	ldr	r2, [pc, #228]	@ (8002418 <SystemInit+0x11c>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002338:	4b37      	ldr	r3, [pc, #220]	@ (8002418 <SystemInit+0x11c>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800233e:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <SystemInit+0x11c>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4935      	ldr	r1, [pc, #212]	@ (8002418 <SystemInit+0x11c>)
 8002344:	4b35      	ldr	r3, [pc, #212]	@ (800241c <SystemInit+0x120>)
 8002346:	4013      	ands	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800234a:	4b32      	ldr	r3, [pc, #200]	@ (8002414 <SystemInit+0x118>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002356:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <SystemInit+0x118>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 030f 	bic.w	r3, r3, #15
 800235e:	4a2d      	ldr	r2, [pc, #180]	@ (8002414 <SystemInit+0x118>)
 8002360:	f043 0307 	orr.w	r3, r3, #7
 8002364:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002366:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <SystemInit+0x11c>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800236c:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <SystemInit+0x11c>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002372:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <SystemInit+0x11c>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002378:	4b27      	ldr	r3, [pc, #156]	@ (8002418 <SystemInit+0x11c>)
 800237a:	4a29      	ldr	r2, [pc, #164]	@ (8002420 <SystemInit+0x124>)
 800237c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800237e:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <SystemInit+0x11c>)
 8002380:	4a28      	ldr	r2, [pc, #160]	@ (8002424 <SystemInit+0x128>)
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002384:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <SystemInit+0x11c>)
 8002386:	4a28      	ldr	r2, [pc, #160]	@ (8002428 <SystemInit+0x12c>)
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800238a:	4b23      	ldr	r3, [pc, #140]	@ (8002418 <SystemInit+0x11c>)
 800238c:	2200      	movs	r2, #0
 800238e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <SystemInit+0x11c>)
 8002392:	4a25      	ldr	r2, [pc, #148]	@ (8002428 <SystemInit+0x12c>)
 8002394:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002396:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <SystemInit+0x11c>)
 8002398:	2200      	movs	r2, #0
 800239a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800239c:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <SystemInit+0x11c>)
 800239e:	4a22      	ldr	r2, [pc, #136]	@ (8002428 <SystemInit+0x12c>)
 80023a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <SystemInit+0x11c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <SystemInit+0x11c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002418 <SystemInit+0x11c>)
 80023ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023b4:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <SystemInit+0x11c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023ba:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <SystemInit+0x130>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <SystemInit+0x134>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023c6:	d202      	bcs.n	80023ce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <SystemInit+0x138>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80023ce:	4b12      	ldr	r3, [pc, #72]	@ (8002418 <SystemInit+0x11c>)
 80023d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d113      	bne.n	8002404 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <SystemInit+0x11c>)
 80023de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002418 <SystemInit+0x11c>)
 80023e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023ec:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <SystemInit+0x13c>)
 80023ee:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023f2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023f4:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <SystemInit+0x11c>)
 80023f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023fa:	4a07      	ldr	r2, [pc, #28]	@ (8002418 <SystemInit+0x11c>)
 80023fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002400:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00
 8002414:	52002000 	.word	0x52002000
 8002418:	58024400 	.word	0x58024400
 800241c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002420:	02020200 	.word	0x02020200
 8002424:	01ff0000 	.word	0x01ff0000
 8002428:	01010280 	.word	0x01010280
 800242c:	5c001000 	.word	0x5c001000
 8002430:	ffff0000 	.word	0xffff0000
 8002434:	51008108 	.word	0x51008108
 8002438:	52004000 	.word	0x52004000

0800243c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <ExitRun0Mode+0x2c>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4a08      	ldr	r2, [pc, #32]	@ (8002468 <ExitRun0Mode+0x2c>)
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800244c:	bf00      	nop
 800244e:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <ExitRun0Mode+0x2c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f9      	beq.n	800244e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	58024800 	.word	0x58024800

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80024a8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002470:	f7ff ffe4 	bl	800243c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002474:	f7ff ff42 	bl	80022fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	@ (80024ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	@ (80024b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	@ (80024bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f016 fc01 	bl	8018ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024a2:	f7fe f8b3 	bl	800060c <main>
  bx  lr
 80024a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024b0:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 80024b4:	08018f08 	.word	0x08018f08
  ldr r2, =_sbss
 80024b8:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 80024bc:	24006abc 	.word	0x24006abc

080024c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC3_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ca:	2003      	movs	r0, #3
 80024cc:	f001 fa16 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024d0:	f006 fbfa 	bl	8008cc8 <HAL_RCC_GetSysClockFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b15      	ldr	r3, [pc, #84]	@ (800252c <HAL_Init+0x68>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	4913      	ldr	r1, [pc, #76]	@ (8002530 <HAL_Init+0x6c>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ee:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <HAL_Init+0x68>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002530 <HAL_Init+0x6c>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_Init+0x70>)
 8002506:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_Init+0x74>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800250e:	200f      	movs	r0, #15
 8002510:	f000 f814 	bl	800253c <HAL_InitTick>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e002      	b.n	8002524 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800251e:	f7ff f843 	bl	80015a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	58024400 	.word	0x58024400
 8002530:	08018ec0 	.word	0x08018ec0
 8002534:	24000004 	.word	0x24000004
 8002538:	24000000 	.word	0x24000000

0800253c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002544:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_InitTick+0x60>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e021      	b.n	8002594 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002550:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <HAL_InitTick+0x64>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <HAL_InitTick+0x60>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800255e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002562:	fbb2 f3f3 	udiv	r3, r2, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f9fb 	bl	8003962 <HAL_SYSTICK_Config>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00e      	b.n	8002594 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b0f      	cmp	r3, #15
 800257a:	d80a      	bhi.n	8002592 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800257c:	2200      	movs	r2, #0
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	f001 f9c5 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002588:	4a06      	ldr	r2, [pc, #24]	@ (80025a4 <HAL_InitTick+0x68>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2400000c 	.word	0x2400000c
 80025a0:	24000000 	.word	0x24000000
 80025a4:	24000008 	.word	0x24000008

080025a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_IncTick+0x20>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	461a      	mov	r2, r3
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <HAL_IncTick+0x24>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4413      	add	r3, r2
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <HAL_IncTick+0x24>)
 80025ba:	6013      	str	r3, [r2, #0]
}
 80025bc:	bf00      	nop
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2400000c 	.word	0x2400000c
 80025cc:	24000950 	.word	0x24000950

080025d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return uwTick;
 80025d4:	4b03      	ldr	r3, [pc, #12]	@ (80025e4 <HAL_GetTick+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	24000950 	.word	0x24000950

080025e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f0:	f7ff ffee 	bl	80025d0 <HAL_GetTick>
 80025f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d005      	beq.n	800260e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <HAL_Delay+0x44>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800260e:	bf00      	nop
 8002610:	f7ff ffde 	bl	80025d0 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8f7      	bhi.n	8002610 <HAL_Delay+0x28>
  {
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	2400000c 	.word	0x2400000c

08002630 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002634:	4b03      	ldr	r3, [pc, #12]	@ (8002644 <HAL_GetREVID+0x14>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	5c001000 	.word	0x5c001000

08002648 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002658:	4904      	ldr	r1, [pc, #16]	@ (800266c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	58000400 	.word	0x58000400

08002670 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	4904      	ldr	r1, [pc, #16]	@ (8002698 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	4313      	orrs	r3, r2
 800268a:	604b      	str	r3, [r1, #4]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	58000400 	.word	0x58000400

0800269c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	609a      	str	r2, [r3, #8]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002714:	2b00      	cmp	r3, #0
 8002716:	d107      	bne.n	8002728 <LL_ADC_SetChannelPreselection+0x24>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	0e9b      	lsrs	r3, r3, #26
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	2201      	movs	r2, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	e015      	b.n	8002754 <LL_ADC_SetChannelPreselection+0x50>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800273e:	2320      	movs	r3, #32
 8002740:	e003      	b.n	800274a <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2201      	movs	r2, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	69d2      	ldr	r2, [r2, #28]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3360      	adds	r3, #96	@ 0x60
 800277c:	461a      	mov	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	430b      	orrs	r3, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ca:	431a      	orrs	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	611a      	str	r2, [r3, #16]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3360      	adds	r3, #96	@ 0x60
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	431a      	orrs	r2, r3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	601a      	str	r2, [r3, #0]
  }
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002812:	b480      	push	{r7}
 8002814:	b087      	sub	sp, #28
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3330      	adds	r3, #48	@ 0x30
 8002822:	461a      	mov	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	4413      	add	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	211f      	movs	r1, #31
 800283e:	fa01 f303 	lsl.w	r3, r1, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	401a      	ands	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	f003 011f 	and.w	r1, r3, #31
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 031f 	and.w	r3, r3, #31
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3314      	adds	r3, #20
 800287a:	461a      	mov	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	0e5b      	lsrs	r3, r3, #25
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	4413      	add	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	0d1b      	lsrs	r3, r3, #20
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2107      	movs	r1, #7
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0d1b      	lsrs	r3, r3, #20
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	431a      	orrs	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d8:	43db      	mvns	r3, r3
 80028da:	401a      	ands	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0318 	and.w	r3, r3, #24
 80028e2:	4908      	ldr	r1, [pc, #32]	@ (8002904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e4:	40d9      	lsrs	r1, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	400b      	ands	r3, r1
 80028ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ee:	431a      	orrs	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	000fffff 	.word	0x000fffff

08002908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002916:	4013      	ands	r3, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6093      	str	r3, [r2, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	5fffffc0 	.word	0x5fffffc0

0800292c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800293c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002940:	d101      	bne.n	8002946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <LL_ADC_EnableInternalRegulator+0x24>)
 8002962:	4013      	ands	r3, r2
 8002964:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	6fffffc0 	.word	0x6fffffc0

0800297c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002990:	d101      	bne.n	8002996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d101      	bne.n	80029bc <LL_ADC_IsEnabled+0x18>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_ADC_IsEnabled+0x1a>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d101      	bne.n	80029e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d101      	bne.n	8002a08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e18f      	b.n	8002d52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d109      	bne.n	8002a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe fdcf 	bl	80015e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff ff67 	bl	800292c <LL_ADC_IsDeepPowerDownEnabled>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff ff4d 	bl	8002908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff82 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d114      	bne.n	8002aa8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff66 	bl	8002954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a88:	4b87      	ldr	r3, [pc, #540]	@ (8002ca8 <HAL_ADC_Init+0x290>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	4a87      	ldr	r2, [pc, #540]	@ (8002cac <HAL_ADC_Init+0x294>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	3301      	adds	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a9a:	e002      	b.n	8002aa2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f9      	bne.n	8002a9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff65 	bl	800297c <LL_ADC_IsInternalRegulatorEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10d      	bne.n	8002ad4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff76 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002ade:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f040 8129 	bne.w	8002d40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f040 8125 	bne.w	8002d40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afa:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff ff4a 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d136      	bne.n	8002b84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a65      	ldr	r2, [pc, #404]	@ (8002cb0 <HAL_ADC_Init+0x298>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_ADC_Init+0x112>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a63      	ldr	r2, [pc, #396]	@ (8002cb4 <HAL_ADC_Init+0x29c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10e      	bne.n	8002b48 <HAL_ADC_Init+0x130>
 8002b2a:	4861      	ldr	r0, [pc, #388]	@ (8002cb0 <HAL_ADC_Init+0x298>)
 8002b2c:	f7ff ff3a 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b30:	4604      	mov	r4, r0
 8002b32:	4860      	ldr	r0, [pc, #384]	@ (8002cb4 <HAL_ADC_Init+0x29c>)
 8002b34:	f7ff ff36 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	e008      	b.n	8002b5a <HAL_ADC_Init+0x142>
 8002b48:	485b      	ldr	r0, [pc, #364]	@ (8002cb8 <HAL_ADC_Init+0x2a0>)
 8002b4a:	f7ff ff2b 	bl	80029a4 <LL_ADC_IsEnabled>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a53      	ldr	r2, [pc, #332]	@ (8002cb0 <HAL_ADC_Init+0x298>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d004      	beq.n	8002b72 <HAL_ADC_Init+0x15a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a51      	ldr	r2, [pc, #324]	@ (8002cb4 <HAL_ADC_Init+0x29c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x15e>
 8002b72:	4a52      	ldr	r2, [pc, #328]	@ (8002cbc <HAL_ADC_Init+0x2a4>)
 8002b74:	e000      	b.n	8002b78 <HAL_ADC_Init+0x160>
 8002b76:	4a52      	ldr	r2, [pc, #328]	@ (8002cc0 <HAL_ADC_Init+0x2a8>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4610      	mov	r0, r2
 8002b80:	f7ff fd8c 	bl	800269c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002b84:	f7ff fd54 	bl	8002630 <HAL_GetREVID>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d914      	bls.n	8002bbc <HAL_ADC_Init+0x1a4>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d110      	bne.n	8002bbc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7d5b      	ldrb	r3, [r3, #21]
 8002b9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ba4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002baa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7f1b      	ldrb	r3, [r3, #28]
 8002bb0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002bb2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bb4:	f043 030c 	orr.w	r3, r3, #12
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e00d      	b.n	8002bd8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7d5b      	ldrb	r3, [r3, #21]
 8002bc0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bc6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002bcc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7f1b      	ldrb	r3, [r3, #28]
 8002bd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7f1b      	ldrb	r3, [r3, #28]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d106      	bne.n	8002bee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	045b      	lsls	r3, r3, #17
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc4 <HAL_ADC_Init+0x2ac>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	69b9      	ldr	r1, [r7, #24]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fed1 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002c28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fede 	bl	80029f0 <LL_ADC_INJ_IsConversionOngoing>
 8002c34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d15f      	bne.n	8002cfc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d15c      	bne.n	8002cfc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7d1b      	ldrb	r3, [r3, #20]
 8002c46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <HAL_ADC_Init+0x2b0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	69b9      	ldr	r1, [r7, #24]
 8002c60:	430b      	orrs	r3, r1
 8002c62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d130      	bne.n	8002cd0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_ADC_Init+0x2b4>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c82:	3a01      	subs	r2, #1
 8002c84:	0411      	lsls	r1, r2, #16
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002c90:	4311      	orrs	r1, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c96:	430a      	orrs	r2, r1
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0201 	orr.w	r2, r2, #1
 8002ca2:	611a      	str	r2, [r3, #16]
 8002ca4:	e01c      	b.n	8002ce0 <HAL_ADC_Init+0x2c8>
 8002ca6:	bf00      	nop
 8002ca8:	24000000 	.word	0x24000000
 8002cac:	053e2d63 	.word	0x053e2d63
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022100 	.word	0x40022100
 8002cb8:	58026000 	.word	0x58026000
 8002cbc:	40022300 	.word	0x40022300
 8002cc0:	58026300 	.word	0x58026300
 8002cc4:	fff0c003 	.word	0xfff0c003
 8002cc8:	ffffbffc 	.word	0xffffbffc
 8002ccc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fb20 	bl	800333c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d10c      	bne.n	8002d1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0a:	f023 010f 	bic.w	r1, r3, #15
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	1e5a      	subs	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d1c:	e007      	b.n	8002d2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 020f 	bic.w	r2, r2, #15
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f023 0303 	bic.w	r3, r3, #3
 8002d36:	f043 0201 	orr.w	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002d3e:	e007      	b.n	8002d50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d44:	f043 0210 	orr.w	r2, r3, #16
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}
 8002d5a:	bf00      	nop

08002d5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b08d      	sub	sp, #52	@ 0x34
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a65      	ldr	r2, [pc, #404]	@ (8002f0c <HAL_ADC_ConfigChannel+0x1b0>)
 8002d76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x2a>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e2c7      	b.n	8003316 <HAL_ADC_ConfigChannel+0x5ba>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fe19 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 82ac 	bne.w	80032f8 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db2c      	blt.n	8002e02 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d108      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x6a>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	e016      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x98>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	fa93 f3a3 	rbit	r3, r3
 8002dd2:	613b      	str	r3, [r7, #16]
  return result;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e003      	b.n	8002dea <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	fab3 f383 	clz	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	69d1      	ldr	r1, [r2, #28]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f7ff fcff 	bl	8002812 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fdd6 	bl	80029ca <LL_ADC_REG_IsConversionOngoing>
 8002e1e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fde3 	bl	80029f0 <LL_ADC_INJ_IsConversionOngoing>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 80b8 	bne.w	8002fa4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 80b4 	bne.w	8002fa4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f7ff fd0e 	bl	800286a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e4e:	4b30      	ldr	r3, [pc, #192]	@ (8002f10 <HAL_ADC_ConfigChannel+0x1b4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e5a:	d10b      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x118>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	e01d      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x154>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x13e>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	e00a      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x154>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	d02c      	beq.n	8002f14 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f7ff fc4f 	bl	800276a <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	7e5b      	ldrb	r3, [r3, #25]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x186>
 8002edc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ee0:	e000      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x188>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f7ff fc79 	bl	80027dc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	7e1b      	ldrb	r3, [r3, #24]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x1a4>
 8002efa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002efe:	e000      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x1a6>
 8002f00:	2300      	movs	r3, #0
 8002f02:	461a      	mov	r2, r3
 8002f04:	f7ff fc51 	bl	80027aa <LL_ADC_SetDataRightShift>
 8002f08:	e04c      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x248>
 8002f0a:	bf00      	nop
 8002f0c:	47ff0000 	.word	0x47ff0000
 8002f10:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f36:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d107      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f5a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	069b      	lsls	r3, r3, #26
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002f7e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	069b      	lsls	r3, r3, #26
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d107      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fcfb 	bl	80029a4 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f040 81aa 	bne.w	800330a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6819      	ldr	r1, [r3, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7ff fc7c 	bl	80028c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a87      	ldr	r2, [pc, #540]	@ (80031ec <HAL_ADC_ConfigChannel+0x490>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	f040 809a 	bne.w	8003108 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4984      	ldr	r1, [pc, #528]	@ (80031f0 <HAL_ADC_ConfigChannel+0x494>)
 8002fde:	428b      	cmp	r3, r1
 8002fe0:	d147      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x316>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4983      	ldr	r1, [pc, #524]	@ (80031f4 <HAL_ADC_ConfigChannel+0x498>)
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d040      	beq.n	800306e <HAL_ADC_ConfigChannel+0x312>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4981      	ldr	r1, [pc, #516]	@ (80031f8 <HAL_ADC_ConfigChannel+0x49c>)
 8002ff2:	428b      	cmp	r3, r1
 8002ff4:	d039      	beq.n	800306a <HAL_ADC_ConfigChannel+0x30e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4980      	ldr	r1, [pc, #512]	@ (80031fc <HAL_ADC_ConfigChannel+0x4a0>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d032      	beq.n	8003066 <HAL_ADC_ConfigChannel+0x30a>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	497e      	ldr	r1, [pc, #504]	@ (8003200 <HAL_ADC_ConfigChannel+0x4a4>)
 8003006:	428b      	cmp	r3, r1
 8003008:	d02b      	beq.n	8003062 <HAL_ADC_ConfigChannel+0x306>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	497d      	ldr	r1, [pc, #500]	@ (8003204 <HAL_ADC_ConfigChannel+0x4a8>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d024      	beq.n	800305e <HAL_ADC_ConfigChannel+0x302>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	497b      	ldr	r1, [pc, #492]	@ (8003208 <HAL_ADC_ConfigChannel+0x4ac>)
 800301a:	428b      	cmp	r3, r1
 800301c:	d01d      	beq.n	800305a <HAL_ADC_ConfigChannel+0x2fe>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	497a      	ldr	r1, [pc, #488]	@ (800320c <HAL_ADC_ConfigChannel+0x4b0>)
 8003024:	428b      	cmp	r3, r1
 8003026:	d016      	beq.n	8003056 <HAL_ADC_ConfigChannel+0x2fa>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4978      	ldr	r1, [pc, #480]	@ (8003210 <HAL_ADC_ConfigChannel+0x4b4>)
 800302e:	428b      	cmp	r3, r1
 8003030:	d00f      	beq.n	8003052 <HAL_ADC_ConfigChannel+0x2f6>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4977      	ldr	r1, [pc, #476]	@ (8003214 <HAL_ADC_ConfigChannel+0x4b8>)
 8003038:	428b      	cmp	r3, r1
 800303a:	d008      	beq.n	800304e <HAL_ADC_ConfigChannel+0x2f2>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4975      	ldr	r1, [pc, #468]	@ (8003218 <HAL_ADC_ConfigChannel+0x4bc>)
 8003042:	428b      	cmp	r3, r1
 8003044:	d101      	bne.n	800304a <HAL_ADC_ConfigChannel+0x2ee>
 8003046:	4b75      	ldr	r3, [pc, #468]	@ (800321c <HAL_ADC_ConfigChannel+0x4c0>)
 8003048:	e05a      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800304a:	2300      	movs	r3, #0
 800304c:	e058      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800304e:	4b74      	ldr	r3, [pc, #464]	@ (8003220 <HAL_ADC_ConfigChannel+0x4c4>)
 8003050:	e056      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 8003052:	4b74      	ldr	r3, [pc, #464]	@ (8003224 <HAL_ADC_ConfigChannel+0x4c8>)
 8003054:	e054      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 8003056:	4b6e      	ldr	r3, [pc, #440]	@ (8003210 <HAL_ADC_ConfigChannel+0x4b4>)
 8003058:	e052      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800305a:	4b6c      	ldr	r3, [pc, #432]	@ (800320c <HAL_ADC_ConfigChannel+0x4b0>)
 800305c:	e050      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800305e:	4b72      	ldr	r3, [pc, #456]	@ (8003228 <HAL_ADC_ConfigChannel+0x4cc>)
 8003060:	e04e      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 8003062:	4b72      	ldr	r3, [pc, #456]	@ (800322c <HAL_ADC_ConfigChannel+0x4d0>)
 8003064:	e04c      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 8003066:	4b72      	ldr	r3, [pc, #456]	@ (8003230 <HAL_ADC_ConfigChannel+0x4d4>)
 8003068:	e04a      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800306a:	4b72      	ldr	r3, [pc, #456]	@ (8003234 <HAL_ADC_ConfigChannel+0x4d8>)
 800306c:	e048      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 800306e:	2301      	movs	r3, #1
 8003070:	e046      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4970      	ldr	r1, [pc, #448]	@ (8003238 <HAL_ADC_ConfigChannel+0x4dc>)
 8003078:	428b      	cmp	r3, r1
 800307a:	d140      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x3a2>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	495c      	ldr	r1, [pc, #368]	@ (80031f4 <HAL_ADC_ConfigChannel+0x498>)
 8003082:	428b      	cmp	r3, r1
 8003084:	d039      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x39e>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	495b      	ldr	r1, [pc, #364]	@ (80031f8 <HAL_ADC_ConfigChannel+0x49c>)
 800308c:	428b      	cmp	r3, r1
 800308e:	d032      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x39a>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4959      	ldr	r1, [pc, #356]	@ (80031fc <HAL_ADC_ConfigChannel+0x4a0>)
 8003096:	428b      	cmp	r3, r1
 8003098:	d02b      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x396>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4958      	ldr	r1, [pc, #352]	@ (8003200 <HAL_ADC_ConfigChannel+0x4a4>)
 80030a0:	428b      	cmp	r3, r1
 80030a2:	d024      	beq.n	80030ee <HAL_ADC_ConfigChannel+0x392>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4956      	ldr	r1, [pc, #344]	@ (8003204 <HAL_ADC_ConfigChannel+0x4a8>)
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d01d      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x38e>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4955      	ldr	r1, [pc, #340]	@ (8003208 <HAL_ADC_ConfigChannel+0x4ac>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d016      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x38a>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4953      	ldr	r1, [pc, #332]	@ (800320c <HAL_ADC_ConfigChannel+0x4b0>)
 80030be:	428b      	cmp	r3, r1
 80030c0:	d00f      	beq.n	80030e2 <HAL_ADC_ConfigChannel+0x386>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4952      	ldr	r1, [pc, #328]	@ (8003210 <HAL_ADC_ConfigChannel+0x4b4>)
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d008      	beq.n	80030de <HAL_ADC_ConfigChannel+0x382>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4951      	ldr	r1, [pc, #324]	@ (8003218 <HAL_ADC_ConfigChannel+0x4bc>)
 80030d2:	428b      	cmp	r3, r1
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x37e>
 80030d6:	4b51      	ldr	r3, [pc, #324]	@ (800321c <HAL_ADC_ConfigChannel+0x4c0>)
 80030d8:	e012      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030da:	2300      	movs	r3, #0
 80030dc:	e010      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030de:	4b51      	ldr	r3, [pc, #324]	@ (8003224 <HAL_ADC_ConfigChannel+0x4c8>)
 80030e0:	e00e      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003210 <HAL_ADC_ConfigChannel+0x4b4>)
 80030e4:	e00c      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030e6:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_ADC_ConfigChannel+0x4b0>)
 80030e8:	e00a      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003228 <HAL_ADC_ConfigChannel+0x4cc>)
 80030ec:	e008      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030ee:	4b4f      	ldr	r3, [pc, #316]	@ (800322c <HAL_ADC_ConfigChannel+0x4d0>)
 80030f0:	e006      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030f2:	4b4f      	ldr	r3, [pc, #316]	@ (8003230 <HAL_ADC_ConfigChannel+0x4d4>)
 80030f4:	e004      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003234 <HAL_ADC_ConfigChannel+0x4d8>)
 80030f8:	e002      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <HAL_ADC_ConfigChannel+0x3a4>
 80030fe:	2300      	movs	r3, #0
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f7ff fafe 	bl	8002704 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f280 80fc 	bge.w	800330a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a36      	ldr	r2, [pc, #216]	@ (80031f0 <HAL_ADC_ConfigChannel+0x494>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x3ca>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a45      	ldr	r2, [pc, #276]	@ (8003238 <HAL_ADC_ConfigChannel+0x4dc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x3ce>
 8003126:	4b45      	ldr	r3, [pc, #276]	@ (800323c <HAL_ADC_ConfigChannel+0x4e0>)
 8003128:	e000      	b.n	800312c <HAL_ADC_ConfigChannel+0x3d0>
 800312a:	4b45      	ldr	r3, [pc, #276]	@ (8003240 <HAL_ADC_ConfigChannel+0x4e4>)
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fadb 	bl	80026e8 <LL_ADC_GetCommonPathInternalCh>
 8003132:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a2d      	ldr	r2, [pc, #180]	@ (80031f0 <HAL_ADC_ConfigChannel+0x494>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d004      	beq.n	8003148 <HAL_ADC_ConfigChannel+0x3ec>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3d      	ldr	r2, [pc, #244]	@ (8003238 <HAL_ADC_ConfigChannel+0x4dc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10e      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x40a>
 8003148:	4829      	ldr	r0, [pc, #164]	@ (80031f0 <HAL_ADC_ConfigChannel+0x494>)
 800314a:	f7ff fc2b 	bl	80029a4 <LL_ADC_IsEnabled>
 800314e:	4604      	mov	r4, r0
 8003150:	4839      	ldr	r0, [pc, #228]	@ (8003238 <HAL_ADC_ConfigChannel+0x4dc>)
 8003152:	f7ff fc27 	bl	80029a4 <LL_ADC_IsEnabled>
 8003156:	4603      	mov	r3, r0
 8003158:	4323      	orrs	r3, r4
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	e008      	b.n	8003178 <HAL_ADC_ConfigChannel+0x41c>
 8003166:	4837      	ldr	r0, [pc, #220]	@ (8003244 <HAL_ADC_ConfigChannel+0x4e8>)
 8003168:	f7ff fc1c 	bl	80029a4 <LL_ADC_IsEnabled>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80b3 	beq.w	80032e4 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a31      	ldr	r2, [pc, #196]	@ (8003248 <HAL_ADC_ConfigChannel+0x4ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d165      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x4f8>
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d160      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <HAL_ADC_ConfigChannel+0x4e8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	f040 80b6 	bne.w	800330a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <HAL_ADC_ConfigChannel+0x494>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d004      	beq.n	80031b2 <HAL_ADC_ConfigChannel+0x456>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a22      	ldr	r2, [pc, #136]	@ (8003238 <HAL_ADC_ConfigChannel+0x4dc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x45a>
 80031b2:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_ADC_ConfigChannel+0x4e0>)
 80031b4:	e000      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x45c>
 80031b6:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <HAL_ADC_ConfigChannel+0x4e4>)
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7ff fa7e 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031c6:	4b21      	ldr	r3, [pc, #132]	@ (800324c <HAL_ADC_ConfigChannel+0x4f0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	4a20      	ldr	r2, [pc, #128]	@ (8003250 <HAL_ADC_ConfigChannel+0x4f4>)
 80031ce:	fba2 2303 	umull	r2, r3, r2, r3
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	3301      	adds	r3, #1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80031da:	e002      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f9      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e8:	e08f      	b.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
 80031ea:	bf00      	nop
 80031ec:	47ff0000 	.word	0x47ff0000
 80031f0:	40022000 	.word	0x40022000
 80031f4:	04300002 	.word	0x04300002
 80031f8:	08600004 	.word	0x08600004
 80031fc:	0c900008 	.word	0x0c900008
 8003200:	10c00010 	.word	0x10c00010
 8003204:	14f00020 	.word	0x14f00020
 8003208:	2a000400 	.word	0x2a000400
 800320c:	2e300800 	.word	0x2e300800
 8003210:	32601000 	.word	0x32601000
 8003214:	43210000 	.word	0x43210000
 8003218:	4b840000 	.word	0x4b840000
 800321c:	4fb80000 	.word	0x4fb80000
 8003220:	47520000 	.word	0x47520000
 8003224:	36902000 	.word	0x36902000
 8003228:	25b00200 	.word	0x25b00200
 800322c:	21800100 	.word	0x21800100
 8003230:	1d500080 	.word	0x1d500080
 8003234:	19200040 	.word	0x19200040
 8003238:	40022100 	.word	0x40022100
 800323c:	40022300 	.word	0x40022300
 8003240:	58026300 	.word	0x58026300
 8003244:	58026000 	.word	0x58026000
 8003248:	cb840000 	.word	0xcb840000
 800324c:	24000000 	.word	0x24000000
 8003250:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a31      	ldr	r2, [pc, #196]	@ (8003320 <HAL_ADC_ConfigChannel+0x5c4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d11e      	bne.n	800329c <HAL_ADC_ConfigChannel+0x540>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <HAL_ADC_ConfigChannel+0x5c8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d14b      	bne.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2c      	ldr	r2, [pc, #176]	@ (8003328 <HAL_ADC_ConfigChannel+0x5cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_ConfigChannel+0x52a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <HAL_ADC_ConfigChannel+0x5d0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x52e>
 8003286:	4a2a      	ldr	r2, [pc, #168]	@ (8003330 <HAL_ADC_ConfigChannel+0x5d4>)
 8003288:	e000      	b.n	800328c <HAL_ADC_ConfigChannel+0x530>
 800328a:	4a2a      	ldr	r2, [pc, #168]	@ (8003334 <HAL_ADC_ConfigChannel+0x5d8>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff fa14 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800329a:	e036      	b.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <HAL_ADC_ConfigChannel+0x5dc>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d131      	bne.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d12c      	bne.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003324 <HAL_ADC_ConfigChannel+0x5c8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d127      	bne.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_ADC_ConfigChannel+0x5cc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d004      	beq.n	80032ce <HAL_ADC_ConfigChannel+0x572>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a18      	ldr	r2, [pc, #96]	@ (800332c <HAL_ADC_ConfigChannel+0x5d0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x576>
 80032ce:	4a18      	ldr	r2, [pc, #96]	@ (8003330 <HAL_ADC_ConfigChannel+0x5d4>)
 80032d0:	e000      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x578>
 80032d2:	4a18      	ldr	r2, [pc, #96]	@ (8003334 <HAL_ADC_ConfigChannel+0x5d8>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032da:	4619      	mov	r1, r3
 80032dc:	4610      	mov	r0, r2
 80032de:	f7ff f9f0 	bl	80026c2 <LL_ADC_SetCommonPathInternalCh>
 80032e2:	e012      	b.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80032f6:	e008      	b.n	800330a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003312:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003316:	4618      	mov	r0, r3
 8003318:	3734      	adds	r7, #52	@ 0x34
 800331a:	46bd      	mov	sp, r7
 800331c:	bd90      	pop	{r4, r7, pc}
 800331e:	bf00      	nop
 8003320:	c7520000 	.word	0xc7520000
 8003324:	58026000 	.word	0x58026000
 8003328:	40022000 	.word	0x40022000
 800332c:	40022100 	.word	0x40022100
 8003330:	40022300 	.word	0x40022300
 8003334:	58026300 	.word	0x58026300
 8003338:	cfb80000 	.word	0xcfb80000

0800333c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a7a      	ldr	r2, [pc, #488]	@ (8003534 <ADC_ConfigureBoostMode+0x1f8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d004      	beq.n	8003358 <ADC_ConfigureBoostMode+0x1c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a79      	ldr	r2, [pc, #484]	@ (8003538 <ADC_ConfigureBoostMode+0x1fc>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <ADC_ConfigureBoostMode+0x30>
 8003358:	4b78      	ldr	r3, [pc, #480]	@ (800353c <ADC_ConfigureBoostMode+0x200>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e008      	b.n	800337e <ADC_ConfigureBoostMode+0x42>
 800336c:	4b74      	ldr	r3, [pc, #464]	@ (8003540 <ADC_ConfigureBoostMode+0x204>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d01c      	beq.n	80033bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003382:	f005 fe1b 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8003386:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003390:	d010      	beq.n	80033b4 <ADC_ConfigureBoostMode+0x78>
 8003392:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003396:	d873      	bhi.n	8003480 <ADC_ConfigureBoostMode+0x144>
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800339c:	d002      	beq.n	80033a4 <ADC_ConfigureBoostMode+0x68>
 800339e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033a2:	d16d      	bne.n	8003480 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	60fb      	str	r3, [r7, #12]
        break;
 80033b2:	e068      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	60fb      	str	r3, [r7, #12]
        break;
 80033ba:	e064      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033bc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033c0:	f04f 0100 	mov.w	r1, #0
 80033c4:	f007 f860 	bl	800a488 <HAL_RCCEx_GetPeriphCLKFreq>
 80033c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033d2:	d051      	beq.n	8003478 <ADC_ConfigureBoostMode+0x13c>
 80033d4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033d8:	d854      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 80033da:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033de:	d047      	beq.n	8003470 <ADC_ConfigureBoostMode+0x134>
 80033e0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033e4:	d84e      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 80033e6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033ea:	d03d      	beq.n	8003468 <ADC_ConfigureBoostMode+0x12c>
 80033ec:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033f0:	d848      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 80033f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f6:	d033      	beq.n	8003460 <ADC_ConfigureBoostMode+0x124>
 80033f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033fc:	d842      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 80033fe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003402:	d029      	beq.n	8003458 <ADC_ConfigureBoostMode+0x11c>
 8003404:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003408:	d83c      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 800340a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800340e:	d01a      	beq.n	8003446 <ADC_ConfigureBoostMode+0x10a>
 8003410:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003414:	d836      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 8003416:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800341a:	d014      	beq.n	8003446 <ADC_ConfigureBoostMode+0x10a>
 800341c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003420:	d830      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003426:	d00e      	beq.n	8003446 <ADC_ConfigureBoostMode+0x10a>
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800342c:	d82a      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 800342e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003432:	d008      	beq.n	8003446 <ADC_ConfigureBoostMode+0x10a>
 8003434:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003438:	d824      	bhi.n	8003484 <ADC_ConfigureBoostMode+0x148>
 800343a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800343e:	d002      	beq.n	8003446 <ADC_ConfigureBoostMode+0x10a>
 8003440:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003444:	d11e      	bne.n	8003484 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	0c9b      	lsrs	r3, r3, #18
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e016      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
        break;
 800345e:	e012      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	60fb      	str	r3, [r7, #12]
        break;
 8003466:	e00e      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	60fb      	str	r3, [r7, #12]
        break;
 800346e:	e00a      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	09db      	lsrs	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
        break;
 8003476:	e006      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	60fb      	str	r3, [r7, #12]
        break;
 800347e:	e002      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003484:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003486:	f7ff f8d3 	bl	8002630 <HAL_GetREVID>
 800348a:	4603      	mov	r3, r0
 800348c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003490:	4293      	cmp	r3, r2
 8003492:	d815      	bhi.n	80034c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4a2b      	ldr	r2, [pc, #172]	@ (8003544 <ADC_ConfigureBoostMode+0x208>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d908      	bls.n	80034ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034ac:	e03e      	b.n	800352c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034bc:	609a      	str	r2, [r3, #8]
}
 80034be:	e035      	b.n	800352c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	085b      	lsrs	r3, r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003548 <ADC_ConfigureBoostMode+0x20c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d808      	bhi.n	80034e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	e025      	b.n	800352c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <ADC_ConfigureBoostMode+0x210>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d80a      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	e016      	b.n	800352c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <ADC_ConfigureBoostMode+0x214>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d80a      	bhi.n	800351c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	e007      	b.n	800352c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40022000 	.word	0x40022000
 8003538:	40022100 	.word	0x40022100
 800353c:	40022300 	.word	0x40022300
 8003540:	58026300 	.word	0x58026300
 8003544:	01312d00 	.word	0x01312d00
 8003548:	005f5e10 	.word	0x005f5e10
 800354c:	00bebc20 	.word	0x00bebc20
 8003550:	017d7840 	.word	0x017d7840

08003554 <LL_ADC_IsEnabled>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <LL_ADC_IsEnabled+0x18>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <LL_ADC_IsEnabled+0x1a>
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <LL_ADC_REG_IsConversionOngoing>:
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d101      	bne.n	8003592 <LL_ADC_REG_IsConversionOngoing+0x18>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b09f      	sub	sp, #124	@ 0x7c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d101      	bne.n	80035be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e0be      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035c6:	2300      	movs	r3, #0
 80035c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d102      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	e001      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e09d      	b.n	800373c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffb9 	bl	800357a <LL_ADC_REG_IsConversionOngoing>
 8003608:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ffb3 	bl	800357a <LL_ADC_REG_IsConversionOngoing>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d17f      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800361a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800361c:	2b00      	cmp	r3, #0
 800361e:	d17c      	bne.n	800371a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a47      	ldr	r2, [pc, #284]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d004      	beq.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d101      	bne.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003634:	4b45      	ldr	r3, [pc, #276]	@ (800374c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003636:	e000      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003638:	4b45      	ldr	r3, [pc, #276]	@ (8003750 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800363a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d039      	beq.n	80036b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003654:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a38      	ldr	r2, [pc, #224]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10e      	bne.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800366a:	4836      	ldr	r0, [pc, #216]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800366c:	f7ff ff72 	bl	8003554 <LL_ADC_IsEnabled>
 8003670:	4604      	mov	r4, r0
 8003672:	4835      	ldr	r0, [pc, #212]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003674:	f7ff ff6e 	bl	8003554 <LL_ADC_IsEnabled>
 8003678:	4603      	mov	r3, r0
 800367a:	4323      	orrs	r3, r4
 800367c:	2b00      	cmp	r3, #0
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e008      	b.n	800369a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003688:	4832      	ldr	r0, [pc, #200]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800368a:	f7ff ff63 	bl	8003554 <LL_ADC_IsEnabled>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d047      	beq.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800369e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6892      	ldr	r2, [r2, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b6:	e03a      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80036b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d004      	beq.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10e      	bne.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80036d8:	481a      	ldr	r0, [pc, #104]	@ (8003744 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80036da:	f7ff ff3b 	bl	8003554 <LL_ADC_IsEnabled>
 80036de:	4604      	mov	r4, r0
 80036e0:	4819      	ldr	r0, [pc, #100]	@ (8003748 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80036e2:	f7ff ff37 	bl	8003554 <LL_ADC_IsEnabled>
 80036e6:	4603      	mov	r3, r0
 80036e8:	4323      	orrs	r3, r4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	e008      	b.n	8003708 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036f6:	4817      	ldr	r0, [pc, #92]	@ (8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80036f8:	f7ff ff2c 	bl	8003554 <LL_ADC_IsEnabled>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800370c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003712:	4013      	ands	r3, r2
 8003714:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003716:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003718:	e009      	b.n	800372e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800372c:	e000      	b.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800372e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003738:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800373c:	4618      	mov	r0, r3
 800373e:	377c      	adds	r7, #124	@ 0x7c
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	40022000 	.word	0x40022000
 8003748:	40022100 	.word	0x40022100
 800374c:	40022300 	.word	0x40022300
 8003750:	58026300 	.word	0x58026300
 8003754:	58026000 	.word	0x58026000
 8003758:	fffff0e0 	.word	0xfffff0e0

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	@ (800379c <__NVIC_SetPriorityGrouping+0x40>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00
 80037a0:	05fa0000 	.word	0x05fa0000

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	@ (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	@ (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	@ (800384c <__NVIC_SetPriority+0x50>)
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff40 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff90 	bl	8003850 <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5f 	bl	80037fc <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff33 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa4 	bl	80038b8 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003980:	f3bf 8f5f 	dmb	sy
}
 8003984:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <HAL_MPU_Disable+0x28>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	4a06      	ldr	r2, [pc, #24]	@ (80039a4 <HAL_MPU_Disable+0x28>)
 800398c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003990:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003992:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <HAL_MPU_Disable+0x2c>)
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000ed00 	.word	0xe000ed00
 80039a8:	e000ed90 	.word	0xe000ed90

080039ac <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80039b4:	4a0b      	ldr	r2, [pc, #44]	@ (80039e4 <HAL_MPU_Enable+0x38>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_MPU_Enable+0x3c>)
 80039c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_MPU_Enable+0x3c>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80039ca:	f3bf 8f4f 	dsb	sy
}
 80039ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039d0:	f3bf 8f6f 	isb	sy
}
 80039d4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	e000ed90 	.word	0xe000ed90
 80039e8:	e000ed00 	.word	0xe000ed00

080039ec <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	785a      	ldrb	r2, [r3, #1]
 80039f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a68 <HAL_MPU_ConfigRegion+0x7c>)
 80039fa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80039fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a68 <HAL_MPU_ConfigRegion+0x7c>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	4a19      	ldr	r2, [pc, #100]	@ (8003a68 <HAL_MPU_ConfigRegion+0x7c>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003a08:	4a17      	ldr	r2, [pc, #92]	@ (8003a68 <HAL_MPU_ConfigRegion+0x7c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	7b1b      	ldrb	r3, [r3, #12]
 8003a14:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7adb      	ldrb	r3, [r3, #11]
 8003a1a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7a9b      	ldrb	r3, [r3, #10]
 8003a22:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7b5b      	ldrb	r3, [r3, #13]
 8003a2a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7b9b      	ldrb	r3, [r3, #14]
 8003a32:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	7bdb      	ldrb	r3, [r3, #15]
 8003a3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003a3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7a5b      	ldrb	r3, [r3, #9]
 8003a42:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003a44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	7a1b      	ldrb	r3, [r3, #8]
 8003a4a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003a4c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	7812      	ldrb	r2, [r2, #0]
 8003a52:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a54:	4a04      	ldr	r2, [pc, #16]	@ (8003a68 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003a56:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003a58:	6113      	str	r3, [r2, #16]
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	e000ed90 	.word	0xe000ed90

08003a6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0e3      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fd fee5 	bl	8001860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	4b6e      	ldr	r3, [pc, #440]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a9c:	4a6c      	ldr	r2, [pc, #432]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7a1b      	ldrb	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003abc:	2000      	movs	r0, #0
 8003abe:	f7fe fdc3 	bl	8002648 <HAL_SYSCFG_ETHInterfaceSelect>
 8003ac2:	e003      	b.n	8003acc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ac4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003ac8:	f7fe fdbe 	bl	8002648 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_ETH_Init+0x1e8>)
 8003ace:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae8:	f7fe fd72 	bl	80025d0 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003aee:	e011      	b.n	8003b14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003af0:	f7fe fd6e 	bl	80025d0 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003afe:	d909      	bls.n	8003b14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2204      	movs	r2, #4
 8003b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	22e0      	movs	r2, #224	@ 0xe0
 8003b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e098      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e4      	bne.n	8003af0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f89e 	bl	8003c68 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b2c:	f005 fa46 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4a49      	ldr	r2, [pc, #292]	@ (8003c58 <HAL_ETH_Init+0x1ec>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa81 	bl	800404c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b56:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b66:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	22e0      	movs	r2, #224	@ 0xe0
 8003b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e05d      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b92:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_ETH_Init+0x1f0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6952      	ldr	r2, [r2, #20]
 8003b9e:	0051      	lsls	r1, r2, #1
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003baa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fae9 	bl	8004186 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb2f 	bl	8004218 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	3305      	adds	r3, #5
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	061a      	lsls	r2, r3, #24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	3302      	adds	r3, #2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bf8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c06:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c08:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <HAL_ETH_Init+0x1f4>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <HAL_ETH_Init+0x1f8>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58000400 	.word	0x58000400
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	ffff8001 	.word	0xffff8001
 8003c60:	0c020060 	.word	0x0c020060
 8003c64:	0c20c000 	.word	0x0c20c000

08003c68 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c82:	f005 f99b 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8003c86:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d804      	bhi.n	8003c9a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e022      	b.n	8003ce0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4a16      	ldr	r2, [pc, #88]	@ (8003cf8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d204      	bcs.n	8003cac <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e019      	b.n	8003ce0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4a13      	ldr	r2, [pc, #76]	@ (8003cfc <HAL_ETH_SetMDIOClockRange+0x94>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d915      	bls.n	8003ce0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d804      	bhi.n	8003cc6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	e00c      	b.n	8003ce0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003d04 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d804      	bhi.n	8003cd8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e003      	b.n	8003ce0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	02160ebf 	.word	0x02160ebf
 8003cf8:	03938700 	.word	0x03938700
 8003cfc:	05f5e0ff 	.word	0x05f5e0ff
 8003d00:	08f0d17f 	.word	0x08f0d17f
 8003d04:	0ee6b27f 	.word	0x0ee6b27f

08003d08 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	791b      	ldrb	r3, [r3, #4]
 8003d20:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003d22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	7b1b      	ldrb	r3, [r3, #12]
 8003d28:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	7b5b      	ldrb	r3, [r3, #13]
 8003d30:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	7b9b      	ldrb	r3, [r3, #14]
 8003d38:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	7bdb      	ldrb	r3, [r3, #15]
 8003d40:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	7c12      	ldrb	r2, [r2, #16]
 8003d48:	2a00      	cmp	r2, #0
 8003d4a:	d102      	bne.n	8003d52 <ETH_SetMACConfig+0x4a>
 8003d4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003d50:	e000      	b.n	8003d54 <ETH_SetMACConfig+0x4c>
 8003d52:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	7c52      	ldrb	r2, [r2, #17]
 8003d5a:	2a00      	cmp	r2, #0
 8003d5c:	d102      	bne.n	8003d64 <ETH_SetMACConfig+0x5c>
 8003d5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d62:	e000      	b.n	8003d66 <ETH_SetMACConfig+0x5e>
 8003d64:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	7c9b      	ldrb	r3, [r3, #18]
 8003d6c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d6e:	431a      	orrs	r2, r3
               macconf->Speed |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d74:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	7f1b      	ldrb	r3, [r3, #28]
 8003d80:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	7f5b      	ldrb	r3, [r3, #29]
 8003d88:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	7f92      	ldrb	r2, [r2, #30]
 8003d90:	2a00      	cmp	r2, #0
 8003d92:	d102      	bne.n	8003d9a <ETH_SetMACConfig+0x92>
 8003d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d98:	e000      	b.n	8003d9c <ETH_SetMACConfig+0x94>
 8003d9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003d9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	7fdb      	ldrb	r3, [r3, #31]
 8003da2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003da4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003dac:	2a00      	cmp	r2, #0
 8003dae:	d102      	bne.n	8003db6 <ETH_SetMACConfig+0xae>
 8003db0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003db4:	e000      	b.n	8003db8 <ETH_SetMACConfig+0xb0>
 8003db6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003db8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003dbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003dc6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003dc8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	4b56      	ldr	r3, [pc, #344]	@ (8003f34 <ETH_SetMACConfig+0x22c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6812      	ldr	r2, [r2, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003df2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003df4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003dfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003dfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e06:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8003e10:	2a00      	cmp	r2, #0
 8003e12:	d102      	bne.n	8003e1a <ETH_SetMACConfig+0x112>
 8003e14:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e18:	e000      	b.n	8003e1c <ETH_SetMACConfig+0x114>
 8003e1a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e1c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	4b42      	ldr	r3, [pc, #264]	@ (8003f38 <ETH_SetMACConfig+0x230>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6812      	ldr	r2, [r2, #0]
 8003e34:	68f9      	ldr	r1, [r7, #12]
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b3a      	ldr	r3, [pc, #232]	@ (8003f3c <ETH_SetMACConfig+0x234>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	68f9      	ldr	r1, [r7, #12]
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003e64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003e72:	2a00      	cmp	r2, #0
 8003e74:	d101      	bne.n	8003e7a <ETH_SetMACConfig+0x172>
 8003e76:	2280      	movs	r2, #128	@ 0x80
 8003e78:	e000      	b.n	8003e7c <ETH_SetMACConfig+0x174>
 8003e7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003e7c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e8e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8003e92:	4013      	ands	r3, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8003ea4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003eac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eba:	f023 0103 	bic.w	r1, r3, #3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8003ed2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8003eee:	2a00      	cmp	r2, #0
 8003ef0:	d101      	bne.n	8003ef6 <ETH_SetMACConfig+0x1ee>
 8003ef2:	2240      	movs	r2, #64	@ 0x40
 8003ef4:	e000      	b.n	8003ef8 <ETH_SetMACConfig+0x1f0>
 8003ef6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003ef8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8003f00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003f0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8003f18:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	00048083 	.word	0x00048083
 8003f38:	c0f88000 	.word	0xc0f88000
 8003f3c:	fffffef0 	.word	0xfffffef0

08003f40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <ETH_SetDMAConfig+0xf8>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	6811      	ldr	r1, [r2, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f66:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	791b      	ldrb	r3, [r3, #4]
 8003f6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f72:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	7b1b      	ldrb	r3, [r3, #12]
 8003f78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	4b2c      	ldr	r3, [pc, #176]	@ (800403c <ETH_SetDMAConfig+0xfc>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	68f9      	ldr	r1, [r7, #12]
 8003f92:	430b      	orrs	r3, r1
 8003f94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f98:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	7b5b      	ldrb	r3, [r3, #13]
 8003f9e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003fb4:	4b22      	ldr	r3, [pc, #136]	@ (8004040 <ETH_SetDMAConfig+0x100>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6812      	ldr	r2, [r2, #0]
 8003fbc:	68f9      	ldr	r1, [r7, #12]
 8003fbe:	430b      	orrs	r3, r1
 8003fc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003fc4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	7d1b      	ldrb	r3, [r3, #20]
 8003fd0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fd2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	7f5b      	ldrb	r3, [r3, #29]
 8003fd8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fe6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8003fea:	4b16      	ldr	r3, [pc, #88]	@ (8004044 <ETH_SetDMAConfig+0x104>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ffa:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	7f1b      	ldrb	r3, [r3, #28]
 8004002:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004014:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <ETH_SetDMAConfig+0x108>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	68f9      	ldr	r1, [r7, #12]
 8004022:	430b      	orrs	r3, r1
 8004024:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004028:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800402c:	bf00      	nop
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	ffff87fd 	.word	0xffff87fd
 800403c:	ffff2ffe 	.word	0xffff2ffe
 8004040:	fffec000 	.word	0xfffec000
 8004044:	ffc0efef 	.word	0xffc0efef
 8004048:	7fc0ffff 	.word	0x7fc0ffff

0800404c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0a4      	sub	sp, #144	@ 0x90
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800405a:	2300      	movs	r3, #0
 800405c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004064:	2300      	movs	r3, #0
 8004066:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004094:	2300      	movs	r3, #0
 8004096:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004098:	2300      	movs	r3, #0
 800409a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80040a4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80040a8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80040b0:	2300      	movs	r3, #0
 80040b2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80040c6:	2300      	movs	r3, #0
 80040c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80040ce:	2300      	movs	r3, #0
 80040d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80040e4:	2320      	movs	r3, #32
 80040e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80040f6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80040fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004100:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004108:	2302      	movs	r3, #2
 800410a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004126:	2300      	movs	r3, #0
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fde6 	bl	8003d08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800413c:	2301      	movs	r3, #1
 800413e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004140:	2301      	movs	r3, #1
 8004142:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004152:	2300      	movs	r3, #0
 8004154:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004156:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800415a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800415c:	2300      	movs	r3, #0
 800415e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004160:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004164:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800416c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004170:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fee1 	bl	8003f40 <ETH_SetDMAConfig>
}
 800417e:	bf00      	nop
 8004180:	3790      	adds	r7, #144	@ 0x90
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e01d      	b.n	80041d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68d9      	ldr	r1, [r3, #12]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	440b      	add	r3, r1
 80041a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	3206      	adds	r2, #6
 80041c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d9de      	bls.n	8004194 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041e4:	461a      	mov	r2, r3
 80041e6:	2303      	movs	r3, #3
 80041e8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041f8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004208:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800420c:	bf00      	nop
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	60fb      	str	r3, [r7, #12]
 8004224:	e023      	b.n	800426e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6919      	ldr	r1, [r3, #16]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2200      	movs	r2, #0
 800425a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	3212      	adds	r2, #18
 8004264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d9d8      	bls.n	8004226 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800429a:	461a      	mov	r2, r3
 800429c:	2303      	movs	r3, #3
 800429e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042c2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	@ 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042e2:	4b89      	ldr	r3, [pc, #548]	@ (8004508 <HAL_GPIO_Init+0x234>)
 80042e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042e6:	e194      	b.n	8004612 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	2101      	movs	r1, #1
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8186 	beq.w	800460c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d005      	beq.n	8004318 <HAL_GPIO_Init+0x44>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d130      	bne.n	800437a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	2203      	movs	r2, #3
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4013      	ands	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800434e:	2201      	movs	r2, #1
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	091b      	lsrs	r3, r3, #4
 8004364:	f003 0201 	and.w	r2, r3, #1
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b03      	cmp	r3, #3
 8004384:	d017      	beq.n	80043b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	2203      	movs	r2, #3
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d123      	bne.n	800440a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	08da      	lsrs	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3208      	adds	r2, #8
 80043ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	08da      	lsrs	r2, r3, #3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3208      	adds	r2, #8
 8004404:	69b9      	ldr	r1, [r7, #24]
 8004406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	2203      	movs	r2, #3
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0203 	and.w	r2, r3, #3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 80e0 	beq.w	800460c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444c:	4b2f      	ldr	r3, [pc, #188]	@ (800450c <HAL_GPIO_Init+0x238>)
 800444e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004452:	4a2e      	ldr	r2, [pc, #184]	@ (800450c <HAL_GPIO_Init+0x238>)
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800445c:	4b2b      	ldr	r3, [pc, #172]	@ (800450c <HAL_GPIO_Init+0x238>)
 800445e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800446a:	4a29      	ldr	r2, [pc, #164]	@ (8004510 <HAL_GPIO_Init+0x23c>)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	3302      	adds	r3, #2
 8004472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	220f      	movs	r2, #15
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a20      	ldr	r2, [pc, #128]	@ (8004514 <HAL_GPIO_Init+0x240>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d052      	beq.n	800453c <HAL_GPIO_Init+0x268>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1f      	ldr	r2, [pc, #124]	@ (8004518 <HAL_GPIO_Init+0x244>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d031      	beq.n	8004502 <HAL_GPIO_Init+0x22e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <HAL_GPIO_Init+0x248>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <HAL_GPIO_Init+0x22a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004520 <HAL_GPIO_Init+0x24c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d025      	beq.n	80044fa <HAL_GPIO_Init+0x226>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004524 <HAL_GPIO_Init+0x250>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <HAL_GPIO_Init+0x222>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_GPIO_Init+0x254>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d019      	beq.n	80044f2 <HAL_GPIO_Init+0x21e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_GPIO_Init+0x258>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_GPIO_Init+0x21a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a19      	ldr	r2, [pc, #100]	@ (8004530 <HAL_GPIO_Init+0x25c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00d      	beq.n	80044ea <HAL_GPIO_Init+0x216>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a18      	ldr	r2, [pc, #96]	@ (8004534 <HAL_GPIO_Init+0x260>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <HAL_GPIO_Init+0x212>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a17      	ldr	r2, [pc, #92]	@ (8004538 <HAL_GPIO_Init+0x264>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_GPIO_Init+0x20e>
 80044de:	2309      	movs	r3, #9
 80044e0:	e02d      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044e2:	230a      	movs	r3, #10
 80044e4:	e02b      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044e6:	2308      	movs	r3, #8
 80044e8:	e029      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044ea:	2307      	movs	r3, #7
 80044ec:	e027      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044ee:	2306      	movs	r3, #6
 80044f0:	e025      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044f2:	2305      	movs	r3, #5
 80044f4:	e023      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044f6:	2304      	movs	r3, #4
 80044f8:	e021      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e01f      	b.n	800453e <HAL_GPIO_Init+0x26a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e01d      	b.n	800453e <HAL_GPIO_Init+0x26a>
 8004502:	2301      	movs	r3, #1
 8004504:	e01b      	b.n	800453e <HAL_GPIO_Init+0x26a>
 8004506:	bf00      	nop
 8004508:	58000080 	.word	0x58000080
 800450c:	58024400 	.word	0x58024400
 8004510:	58000400 	.word	0x58000400
 8004514:	58020000 	.word	0x58020000
 8004518:	58020400 	.word	0x58020400
 800451c:	58020800 	.word	0x58020800
 8004520:	58020c00 	.word	0x58020c00
 8004524:	58021000 	.word	0x58021000
 8004528:	58021400 	.word	0x58021400
 800452c:	58021800 	.word	0x58021800
 8004530:	58021c00 	.word	0x58021c00
 8004534:	58022000 	.word	0x58022000
 8004538:	58022400 	.word	0x58022400
 800453c:	2300      	movs	r3, #0
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	f002 0203 	and.w	r2, r2, #3
 8004544:	0092      	lsls	r2, r2, #2
 8004546:	4093      	lsls	r3, r2
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800454e:	4938      	ldr	r1, [pc, #224]	@ (8004630 <HAL_GPIO_Init+0x35c>)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	3302      	adds	r3, #2
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800455c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004582:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3301      	adds	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	f47f ae63 	bne.w	80042e8 <HAL_GPIO_Init+0x14>
  }
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	3724      	adds	r7, #36	@ 0x24
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	58000400 	.word	0x58000400

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af02      	add	r7, sp, #8
 800466c:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04f      	b.n	8004718 <HAL_HCD_Init+0xb2>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f013 ff79 	bl	8018584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f009 fd73 	bl	800e18a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	7c1a      	ldrb	r2, [r3, #16]
 80046ac:	f88d 2000 	strb.w	r2, [sp]
 80046b0:	3304      	adds	r3, #4
 80046b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046b4:	f009 fc44 	bl	800df40 <USB_CoreInit>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_HCD_Init+0x64>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e026      	b.n	8004718 <HAL_HCD_Init+0xb2>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2101      	movs	r1, #1
 80046d0:	4618      	mov	r0, r3
 80046d2:	f009 fd6b 	bl	800e1ac <USB_SetCurrentMode>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d005      	beq.n	80046e8 <HAL_HCD_Init+0x82>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e017      	b.n	8004718 <HAL_HCD_Init+0xb2>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7c1a      	ldrb	r2, [r3, #16]
 80046f0:	f88d 2000 	strb.w	r2, [sp]
 80046f4:	3304      	adds	r3, #4
 80046f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046f8:	f00a febe 	bl	800f478 <USB_HostInit>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_HCD_Init+0xa8>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e004      	b.n	8004718 <HAL_HCD_Init+0xb2>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b08b      	sub	sp, #44	@ 0x2c
 8004724:	af04      	add	r7, sp, #16
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	4608      	mov	r0, r1
 800472a:	4611      	mov	r1, r2
 800472c:	461a      	mov	r2, r3
 800472e:	4603      	mov	r3, r0
 8004730:	70fb      	strb	r3, [r7, #3]
 8004732:	460b      	mov	r3, r1
 8004734:	70bb      	strb	r3, [r7, #2]
 8004736:	4613      	mov	r3, r2
 8004738:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800473a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800473c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_HCD_HC_Init+0x2c>
 8004748:	2302      	movs	r3, #2
 800474a:	e09d      	b.n	8004888 <HAL_HCD_HC_Init+0x168>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3319      	adds	r3, #25
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3314      	adds	r3, #20
 8004778:	787a      	ldrb	r2, [r7, #1]
 800477a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3315      	adds	r3, #21
 800478c:	78fa      	ldrb	r2, [r7, #3]
 800478e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3326      	adds	r3, #38	@ 0x26
 80047a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80047a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	78bb      	ldrb	r3, [r7, #2]
 80047aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ae:	b2d8      	uxtb	r0, r3
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3316      	adds	r3, #22
 80047be:	4602      	mov	r2, r0
 80047c0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80047c2:	78fb      	ldrb	r3, [r7, #3]
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fbc8 	bl	8004f5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80047cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da0a      	bge.n	80047ea <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80047d4:	78fa      	ldrb	r2, [r7, #3]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	011b      	lsls	r3, r3, #4
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	3317      	adds	r3, #23
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
 80047e8:	e009      	b.n	80047fe <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80047ea:	78fa      	ldrb	r2, [r7, #3]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3317      	adds	r3, #23
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f00a ff82 	bl	800f70c <USB_GetHostSpeed>
 8004808:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800480a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10b      	bne.n	800482a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <HAL_HCD_HC_Init+0x10a>
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2bbc      	cmp	r3, #188	@ 0xbc
 8004824:	d901      	bls.n	800482a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004826:	23bc      	movs	r3, #188	@ 0xbc
 8004828:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800482a:	78fa      	ldrb	r2, [r7, #3]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3318      	adds	r3, #24
 800483a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800483e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004840:	78fa      	ldrb	r2, [r7, #3]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	b298      	uxth	r0, r3
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3328      	adds	r3, #40	@ 0x28
 8004854:	4602      	mov	r2, r0
 8004856:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	b29b      	uxth	r3, r3
 8004860:	787c      	ldrb	r4, [r7, #1]
 8004862:	78ba      	ldrb	r2, [r7, #2]
 8004864:	78f9      	ldrb	r1, [r7, #3]
 8004866:	9302      	str	r3, [sp, #8]
 8004868:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4623      	mov	r3, r4
 8004876:	f00a ff71 	bl	800f75c <USB_HC_Init>
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	bd90      	pop	{r4, r7, pc}

08004890 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_HCD_HC_Halt+0x1e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	e00f      	b.n	80048ce <HAL_HCD_HC_Halt+0x3e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f00b faf1 	bl	800fea6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	70fb      	strb	r3, [r7, #3]
 80048ea:	460b      	mov	r3, r1
 80048ec:	70bb      	strb	r3, [r7, #2]
 80048ee:	4613      	mov	r3, r2
 80048f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3317      	adds	r3, #23
 8004902:	78ba      	ldrb	r2, [r7, #2]
 8004904:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3326      	adds	r3, #38	@ 0x26
 8004916:	787a      	ldrb	r2, [r7, #1]
 8004918:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800491a:	7c3b      	ldrb	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d114      	bne.n	800494a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004920:	78fa      	ldrb	r2, [r7, #3]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	332a      	adds	r3, #42	@ 0x2a
 8004930:	2203      	movs	r2, #3
 8004932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	3319      	adds	r3, #25
 8004944:	7f3a      	ldrb	r2, [r7, #28]
 8004946:	701a      	strb	r2, [r3, #0]
 8004948:	e009      	b.n	800495e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	332a      	adds	r3, #42	@ 0x2a
 800495a:	2202      	movs	r2, #2
 800495c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800495e:	787b      	ldrb	r3, [r7, #1]
 8004960:	2b03      	cmp	r3, #3
 8004962:	f200 8102 	bhi.w	8004b6a <HAL_HCD_HC_SubmitRequest+0x292>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004b55 	.word	0x08004b55
 8004974:	08004a41 	.word	0x08004a41
 8004978:	08004acb 	.word	0x08004acb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800497c:	7c3b      	ldrb	r3, [r7, #16]
 800497e:	2b01      	cmp	r3, #1
 8004980:	f040 80f5 	bne.w	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004984:	78bb      	ldrb	r3, [r7, #2]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d12d      	bne.n	80049e6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800498a:	8b3b      	ldrh	r3, [r7, #24]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	333d      	adds	r3, #61	@ 0x3d
 80049a0:	2201      	movs	r2, #1
 80049a2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	333d      	adds	r3, #61	@ 0x3d
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10a      	bne.n	80049d0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	332a      	adds	r3, #42	@ 0x2a
 80049ca:	2200      	movs	r2, #0
 80049cc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80049ce:	e0ce      	b.n	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80049d0:	78fa      	ldrb	r2, [r7, #3]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	332a      	adds	r3, #42	@ 0x2a
 80049e0:	2202      	movs	r2, #2
 80049e2:	701a      	strb	r2, [r3, #0]
      break;
 80049e4:	e0c3      	b.n	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	331a      	adds	r3, #26
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	f040 80b8 	bne.w	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	333c      	adds	r3, #60	@ 0x3c
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	332a      	adds	r3, #42	@ 0x2a
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
      break;
 8004a28:	e0a1      	b.n	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	332a      	adds	r3, #42	@ 0x2a
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]
      break;
 8004a3e:	e096      	b.n	8004b6e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004a40:	78bb      	ldrb	r3, [r7, #2]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d120      	bne.n	8004a88 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	333d      	adds	r3, #61	@ 0x3d
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	332a      	adds	r3, #42	@ 0x2a
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004a70:	e07e      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	332a      	adds	r3, #42	@ 0x2a
 8004a82:	2202      	movs	r2, #2
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e073      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	333c      	adds	r3, #60	@ 0x3c
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	332a      	adds	r3, #42	@ 0x2a
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
      break;
 8004ab2:	e05d      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	332a      	adds	r3, #42	@ 0x2a
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	701a      	strb	r2, [r3, #0]
      break;
 8004ac8:	e052      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004aca:	78bb      	ldrb	r3, [r7, #2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d120      	bne.n	8004b12 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ad0:	78fa      	ldrb	r2, [r7, #3]
 8004ad2:	6879      	ldr	r1, [r7, #4]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	1a9b      	subs	r3, r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	333d      	adds	r3, #61	@ 0x3d
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	1a9b      	subs	r3, r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	332a      	adds	r3, #42	@ 0x2a
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004afa:	e039      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	332a      	adds	r3, #42	@ 0x2a
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	701a      	strb	r2, [r3, #0]
      break;
 8004b10:	e02e      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	333c      	adds	r3, #60	@ 0x3c
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10a      	bne.n	8004b3e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	332a      	adds	r3, #42	@ 0x2a
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]
      break;
 8004b3c:	e018      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	332a      	adds	r3, #42	@ 0x2a
 8004b4e:	2202      	movs	r2, #2
 8004b50:	701a      	strb	r2, [r3, #0]
      break;
 8004b52:	e00d      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	332a      	adds	r3, #42	@ 0x2a
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
      break;
 8004b68:	e002      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004b6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	1a9b      	subs	r3, r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	332c      	adds	r3, #44	@ 0x2c
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	8b39      	ldrh	r1, [r7, #24]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4403      	add	r3, r0
 8004b94:	3334      	adds	r3, #52	@ 0x34
 8004b96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	1a9b      	subs	r3, r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	334c      	adds	r3, #76	@ 0x4c
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	1a9b      	subs	r3, r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	3338      	adds	r3, #56	@ 0x38
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3315      	adds	r3, #21
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	6879      	ldr	r1, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	1a9b      	subs	r3, r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	334d      	adds	r3, #77	@ 0x4d
 8004be4:	2200      	movs	r2, #0
 8004be6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	799b      	ldrb	r3, [r3, #6]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f00a fece 	bl	800f9a4 <USB_HC_StartXfer>
 8004c08:	4603      	mov	r3, r0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f00a fb62 	bl	800f2f4 <USB_GetMode>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	f040 80fb 	bne.w	8004e2e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f00a faa5 	bl	800f18c <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80f1 	beq.w	8004e2c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f00a fa9c 	bl	800f18c <USB_ReadInterrupts>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c5e:	d104      	bne.n	8004c6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004c68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f00a fa8c 	bl	800f18c <USB_ReadInterrupts>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c7e:	d104      	bne.n	8004c8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004c88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f00a fa7c 	bl	800f18c <USB_ReadInterrupts>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c9e:	d104      	bne.n	8004caa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004ca8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f00a fa6c 	bl	800f18c <USB_ReadInterrupts>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d103      	bne.n	8004cc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f00a fa5e 	bl	800f18c <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cda:	d120      	bne.n	8004d1e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004ce4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d113      	bne.n	8004d1e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	6938      	ldr	r0, [r7, #16]
 8004cfa:	f009 fc01 	bl	800e500 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004cfe:	6938      	ldr	r0, [r7, #16]
 8004d00:	f009 fc30 	bl	800e564 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7a5b      	ldrb	r3, [r3, #9]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d105      	bne.n	8004d18 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f00a fc5a 	bl	800f5cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f013 fcd3 	bl	80186c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f00a fa32 	bl	800f18c <USB_ReadInterrupts>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d32:	d102      	bne.n	8004d3a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 fd4d 	bl	80067d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00a fa24 	bl	800f18c <USB_ReadInterrupts>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d106      	bne.n	8004d5c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f013 fc9c 	bl	801868c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2208      	movs	r2, #8
 8004d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f00a fa13 	bl	800f18c <USB_ReadInterrupts>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d70:	d139      	bne.n	8004de6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f00b f884 	bl	800fe84 <USB_HC_ReadInterrupt>
 8004d7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	e025      	b.n	8004dd0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d018      	beq.n	8004dca <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004daa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dae:	d106      	bne.n	8004dbe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	4619      	mov	r1, r3
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f905 	bl	8004fc6 <HCD_HC_IN_IRQHandler>
 8004dbc:	e005      	b.n	8004dca <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 ff67 	bl	8005c98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	795b      	ldrb	r3, [r3, #5]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d3d3      	bcc.n	8004d84 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f00a f9ce 	bl	800f18c <USB_ReadInterrupts>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d101      	bne.n	8004dfe <HAL_HCD_IRQHandler+0x1ea>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_HCD_IRQHandler+0x1ec>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d014      	beq.n	8004e2e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0210 	bic.w	r2, r2, #16
 8004e12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 fbfe 	bl	8006616 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	699a      	ldr	r2, [r3, #24]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0210 	orr.w	r2, r2, #16
 8004e28:	619a      	str	r2, [r3, #24]
 8004e2a:	e000      	b.n	8004e2e <HAL_HCD_IRQHandler+0x21a>
      return;
 8004e2c:	bf00      	nop
    }
  }
}
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_HCD_Start+0x16>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e013      	b.n	8004e72 <HAL_HCD_Start+0x3e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2101      	movs	r1, #1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f00a fc1e 	bl	800f69a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f009 f980 	bl	800e168 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_HCD_Stop+0x16>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e00d      	b.n	8004eac <HAL_HCD_Stop+0x32>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f00b f95f 	bl	8010160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f00a fbc0 	bl	800f646 <USB_ResetPort>
 8004ec6:	4603      	mov	r3, r0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	334c      	adds	r3, #76	@ 0x4c
 8004eec:	781b      	ldrb	r3, [r3, #0]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3338      	adds	r3, #56	@ 0x38
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f00a fc02 	bl	800f73a <USB_GetCurrentFrame>
 8004f36:	4603      	mov	r3, r0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f00a fbdd 	bl	800f70c <USB_GetHostSpeed>
 8004f52:	4603      	mov	r3, r0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	331a      	adds	r3, #26
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	331b      	adds	r3, #27
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3325      	adds	r3, #37	@ 0x25
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	1a9b      	subs	r3, r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	3324      	adds	r3, #36	@ 0x24
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b086      	sub	sp, #24
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f00a f8e4 	bl	800f1b2 <USB_ReadChInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d11a      	bne.n	800502a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005000:	461a      	mov	r2, r3
 8005002:	2304      	movs	r3, #4
 8005004:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	334d      	adds	r3, #77	@ 0x4d
 8005016:	2207      	movs	r2, #7
 8005018:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	78fa      	ldrb	r2, [r7, #3]
 8005020:	4611      	mov	r1, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f00a ff3f 	bl	800fea6 <USB_HC_Halt>
 8005028:	e09e      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	4611      	mov	r1, r2
 8005032:	4618      	mov	r0, r3
 8005034:	f00a f8bd 	bl	800f1b2 <USB_ReadChInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005042:	d11b      	bne.n	800507c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005050:	461a      	mov	r2, r3
 8005052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005056:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	334d      	adds	r3, #77	@ 0x4d
 8005068:	2208      	movs	r2, #8
 800506a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f00a ff16 	bl	800fea6 <USB_HC_Halt>
 800507a:	e075      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	78fa      	ldrb	r2, [r7, #3]
 8005082:	4611      	mov	r1, r2
 8005084:	4618      	mov	r0, r3
 8005086:	f00a f894 	bl	800f1b2 <USB_ReadChInterrupts>
 800508a:	4603      	mov	r3, r0
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d11a      	bne.n	80050ca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4413      	add	r3, r2
 800509c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a0:	461a      	mov	r2, r3
 80050a2:	2308      	movs	r3, #8
 80050a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	334d      	adds	r3, #77	@ 0x4d
 80050b6:	2206      	movs	r2, #6
 80050b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	4611      	mov	r1, r2
 80050c2:	4618      	mov	r0, r3
 80050c4:	f00a feef 	bl	800fea6 <USB_HC_Halt>
 80050c8:	e04e      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f00a f86d 	bl	800f1b2 <USB_ReadChInterrupts>
 80050d8:	4603      	mov	r3, r0
 80050da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e2:	d11b      	bne.n	800511c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f0:	461a      	mov	r2, r3
 80050f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	334d      	adds	r3, #77	@ 0x4d
 8005108:	2209      	movs	r2, #9
 800510a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	4611      	mov	r1, r2
 8005114:	4618      	mov	r0, r3
 8005116:	f00a fec6 	bl	800fea6 <USB_HC_Halt>
 800511a:	e025      	b.n	8005168 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f00a f844 	bl	800f1b2 <USB_ReadChInterrupts>
 800512a:	4603      	mov	r3, r0
 800512c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005130:	2b80      	cmp	r3, #128	@ 0x80
 8005132:	d119      	bne.n	8005168 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	4413      	add	r3, r2
 800513c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005140:	461a      	mov	r2, r3
 8005142:	2380      	movs	r3, #128	@ 0x80
 8005144:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	334d      	adds	r3, #77	@ 0x4d
 8005156:	2207      	movs	r2, #7
 8005158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f00a fe9f 	bl	800fea6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	78fa      	ldrb	r2, [r7, #3]
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f00a f81e 	bl	800f1b2 <USB_ReadChInterrupts>
 8005176:	4603      	mov	r3, r0
 8005178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d112      	bne.n	80051a8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f00a fe8b 	bl	800fea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4413      	add	r3, r2
 8005198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800519c:	461a      	mov	r2, r3
 800519e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051a2:	6093      	str	r3, [r2, #8]
 80051a4:	f000 bd75 	b.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f009 fffe 	bl	800f1b2 <USB_ReadChInterrupts>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 8128 	bne.w	8005412 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ce:	461a      	mov	r2, r3
 80051d0:	2320      	movs	r3, #32
 80051d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	331b      	adds	r3, #27
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d119      	bne.n	800521e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	440b      	add	r3, r1
 80051f8:	331b      	adds	r3, #27
 80051fa:	2200      	movs	r2, #0
 80051fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	440a      	add	r2, r1
 8005214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800521c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	799b      	ldrb	r3, [r3, #6]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01b      	beq.n	800525e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3330      	adds	r3, #48	@ 0x30
 8005236:	6819      	ldr	r1, [r3, #0]
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	1ac9      	subs	r1, r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	4613      	mov	r3, r2
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4403      	add	r3, r0
 800525a:	3338      	adds	r3, #56	@ 0x38
 800525c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	334d      	adds	r3, #77	@ 0x4d
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3344      	adds	r3, #68	@ 0x44
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005292:	461a      	mov	r2, r3
 8005294:	2301      	movs	r3, #1
 8005296:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3326      	adds	r3, #38	@ 0x26
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3326      	adds	r3, #38	@ 0x26
 80052be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d110      	bne.n	80052e6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	4611      	mov	r1, r2
 80052cc:	4618      	mov	r0, r3
 80052ce:	f00a fdea 	bl	800fea6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052de:	461a      	mov	r2, r3
 80052e0:	2310      	movs	r3, #16
 80052e2:	6093      	str	r3, [r2, #8]
 80052e4:	e03d      	b.n	8005362 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	3326      	adds	r3, #38	@ 0x26
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d00a      	beq.n	8005312 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3326      	adds	r3, #38	@ 0x26
 800530c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800530e:	2b01      	cmp	r3, #1
 8005310:	d127      	bne.n	8005362 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005312:	78fb      	ldrb	r3, [r7, #3]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	0151      	lsls	r1, r2, #5
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	440a      	add	r2, r1
 8005328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800532c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005330:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	334c      	adds	r3, #76	@ 0x4c
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4613      	mov	r3, r2
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	440b      	add	r3, r1
 8005354:	334c      	adds	r3, #76	@ 0x4c
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f013 f9bf 	bl	80186e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	799b      	ldrb	r3, [r3, #6]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d13b      	bne.n	80053e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800536a:	78fa      	ldrb	r2, [r7, #3]
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4613      	mov	r3, r2
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	1a9b      	subs	r3, r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	440b      	add	r3, r1
 8005378:	3338      	adds	r3, #56	@ 0x38
 800537a:	6819      	ldr	r1, [r3, #0]
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4613      	mov	r3, r2
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	1a9b      	subs	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4403      	add	r3, r0
 800538a:	3328      	adds	r3, #40	@ 0x28
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	440b      	add	r3, r1
 8005390:	1e59      	subs	r1, r3, #1
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4403      	add	r3, r0
 80053a0:	3328      	adds	r3, #40	@ 0x28
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8470 	beq.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	333c      	adds	r3, #60	@ 0x3c
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	f083 0301 	eor.w	r3, r3, #1
 80053ca:	b2d8      	uxtb	r0, r3
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	333c      	adds	r3, #60	@ 0x3c
 80053da:	4602      	mov	r2, r0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	f000 bc58 	b.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80053e2:	78fa      	ldrb	r2, [r7, #3]
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	4613      	mov	r3, r2
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	440b      	add	r3, r1
 80053f0:	333c      	adds	r3, #60	@ 0x3c
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	78fa      	ldrb	r2, [r7, #3]
 80053f6:	f083 0301 	eor.w	r3, r3, #1
 80053fa:	b2d8      	uxtb	r0, r3
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	440b      	add	r3, r1
 8005408:	333c      	adds	r3, #60	@ 0x3c
 800540a:	4602      	mov	r2, r0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	f000 bc40 	b.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	4611      	mov	r1, r2
 800541a:	4618      	mov	r0, r3
 800541c:	f009 fec9 	bl	800f1b2 <USB_ReadChInterrupts>
 8005420:	4603      	mov	r3, r0
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d131      	bne.n	800548e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800542a:	78fb      	ldrb	r3, [r7, #3]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4413      	add	r3, r2
 8005432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005436:	461a      	mov	r2, r3
 8005438:	2320      	movs	r3, #32
 800543a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	331a      	adds	r3, #26
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 841f 	bne.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	4613      	mov	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	1a9b      	subs	r3, r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	331b      	adds	r3, #27
 8005464:	2201      	movs	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	334d      	adds	r3, #77	@ 0x4d
 8005478:	2203      	movs	r2, #3
 800547a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f00a fd0e 	bl	800fea6 <USB_HC_Halt>
 800548a:	f000 bc02 	b.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f009 fe8b 	bl	800f1b2 <USB_ReadChInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	f040 8305 	bne.w	8005ab2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054b4:	461a      	mov	r2, r3
 80054b6:	2302      	movs	r3, #2
 80054b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	334d      	adds	r3, #77	@ 0x4d
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d114      	bne.n	80054fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	334d      	adds	r3, #77	@ 0x4d
 80054e0:	2202      	movs	r2, #2
 80054e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054e4:	78fa      	ldrb	r2, [r7, #3]
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	1a9b      	subs	r3, r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	334c      	adds	r3, #76	@ 0x4c
 80054f4:	2201      	movs	r2, #1
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	e2cc      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	334d      	adds	r3, #77	@ 0x4d
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b06      	cmp	r3, #6
 800550e:	d114      	bne.n	800553a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334d      	adds	r3, #77	@ 0x4d
 8005520:	2202      	movs	r2, #2
 8005522:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	1a9b      	subs	r3, r3, r2
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	334c      	adds	r3, #76	@ 0x4c
 8005534:	2205      	movs	r2, #5
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	e2ac      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	1a9b      	subs	r3, r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	334d      	adds	r3, #77	@ 0x4d
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b07      	cmp	r3, #7
 800554e:	d00b      	beq.n	8005568 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	334d      	adds	r3, #77	@ 0x4d
 8005560:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005562:	2b09      	cmp	r3, #9
 8005564:	f040 80a6 	bne.w	80056b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334d      	adds	r3, #77	@ 0x4d
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3344      	adds	r3, #68	@ 0x44
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4403      	add	r3, r0
 800559c:	3344      	adds	r3, #68	@ 0x44
 800559e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	3344      	adds	r3, #68	@ 0x44
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d943      	bls.n	800563e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	3344      	adds	r3, #68	@ 0x44
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	331a      	adds	r3, #26
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d123      	bne.n	8005628 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	331b      	adds	r3, #27
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	331c      	adds	r3, #28
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	440a      	add	r2, r1
 800561e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005626:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005628:	78fa      	ldrb	r2, [r7, #3]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	334c      	adds	r3, #76	@ 0x4c
 8005638:	2204      	movs	r2, #4
 800563a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800563c:	e229      	b.n	8005a92 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	334c      	adds	r3, #76	@ 0x4c
 800564e:	2202      	movs	r2, #2
 8005650:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005652:	78fa      	ldrb	r2, [r7, #3]
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	440b      	add	r3, r1
 8005660:	3326      	adds	r3, #38	@ 0x26
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	1a9b      	subs	r3, r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	3326      	adds	r3, #38	@ 0x26
 8005678:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800567a:	2b02      	cmp	r3, #2
 800567c:	f040 8209 	bne.w	8005a92 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005696:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800569e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ac:	461a      	mov	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056b2:	e1ee      	b.n	8005a92 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80056b4:	78fa      	ldrb	r2, [r7, #3]
 80056b6:	6879      	ldr	r1, [r7, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	1a9b      	subs	r3, r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	334d      	adds	r3, #77	@ 0x4d
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	f040 80c8 	bne.w	800585c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056cc:	78fa      	ldrb	r2, [r7, #3]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	011b      	lsls	r3, r3, #4
 80056d4:	1a9b      	subs	r3, r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	334d      	adds	r3, #77	@ 0x4d
 80056dc:	2202      	movs	r2, #2
 80056de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056e0:	78fa      	ldrb	r2, [r7, #3]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	331b      	adds	r3, #27
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	f040 81ce 	bne.w	8005a94 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80056f8:	78fa      	ldrb	r2, [r7, #3]
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3326      	adds	r3, #38	@ 0x26
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d16b      	bne.n	80057e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3348      	adds	r3, #72	@ 0x48
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	1c59      	adds	r1, r3, #1
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4403      	add	r3, r0
 800572e:	3348      	adds	r3, #72	@ 0x48
 8005730:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	3348      	adds	r3, #72	@ 0x48
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d943      	bls.n	80057d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	440b      	add	r3, r1
 8005756:	3348      	adds	r3, #72	@ 0x48
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	331b      	adds	r3, #27
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005770:	78fa      	ldrb	r2, [r7, #3]
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	1a9b      	subs	r3, r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	3344      	adds	r3, #68	@ 0x44
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d809      	bhi.n	800579a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	331c      	adds	r3, #28
 8005796:	2201      	movs	r2, #1
 8005798:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800579a:	78fb      	ldrb	r3, [r7, #3]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	4613      	mov	r3, r2
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	1a9b      	subs	r3, r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	334c      	adds	r3, #76	@ 0x4c
 80057ca:	2204      	movs	r2, #4
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e014      	b.n	80057fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	334c      	adds	r3, #76	@ 0x4c
 80057e0:	2202      	movs	r2, #2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e009      	b.n	80057fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	334c      	adds	r3, #76	@ 0x4c
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	6879      	ldr	r1, [r7, #4]
 80057fe:	4613      	mov	r3, r2
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	440b      	add	r3, r1
 8005808:	3326      	adds	r3, #38	@ 0x26
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	4613      	mov	r3, r2
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	3326      	adds	r3, #38	@ 0x26
 8005820:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005822:	2b02      	cmp	r3, #2
 8005824:	f040 8136 	bne.w	8005a94 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800583e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005846:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005854:	461a      	mov	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e11b      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	334d      	adds	r3, #77	@ 0x4d
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b03      	cmp	r3, #3
 8005870:	f040 8081 	bne.w	8005976 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	334d      	adds	r3, #77	@ 0x4d
 8005884:	2202      	movs	r2, #2
 8005886:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	331b      	adds	r3, #27
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b01      	cmp	r3, #1
 800589c:	f040 80fa 	bne.w	8005a94 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058a0:	78fa      	ldrb	r2, [r7, #3]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	011b      	lsls	r3, r3, #4
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	334c      	adds	r3, #76	@ 0x4c
 80058b0:	2202      	movs	r2, #2
 80058b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	78fa      	ldrb	r2, [r7, #3]
 80058c4:	0151      	lsls	r1, r2, #5
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	440a      	add	r2, r1
 80058ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	78fa      	ldrb	r2, [r7, #3]
 80058e4:	0151      	lsls	r1, r2, #5
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	440a      	add	r2, r1
 80058ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	015a      	lsls	r2, r3, #5
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	78fa      	ldrb	r2, [r7, #3]
 8005904:	0151      	lsls	r1, r2, #5
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	440a      	add	r2, r1
 800590a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800590e:	f023 0320 	bic.w	r3, r3, #32
 8005912:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	3326      	adds	r3, #38	@ 0x26
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00b      	beq.n	8005942 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800592a:	78fa      	ldrb	r2, [r7, #3]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3326      	adds	r3, #38	@ 0x26
 800593a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800593c:	2b02      	cmp	r3, #2
 800593e:	f040 80a9 	bne.w	8005a94 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005958:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005960:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e08e      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334d      	adds	r3, #77	@ 0x4d
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d143      	bne.n	8005a14 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	6879      	ldr	r1, [r7, #4]
 8005990:	4613      	mov	r3, r2
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	334d      	adds	r3, #77	@ 0x4d
 800599c:	2202      	movs	r2, #2
 800599e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	334c      	adds	r3, #76	@ 0x4c
 80059b0:	2202      	movs	r2, #2
 80059b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	6879      	ldr	r1, [r7, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	440b      	add	r3, r1
 80059c2:	3326      	adds	r3, #38	@ 0x26
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059ca:	78fa      	ldrb	r2, [r7, #3]
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	011b      	lsls	r3, r3, #4
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3326      	adds	r3, #38	@ 0x26
 80059da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d159      	bne.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e03f      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	334d      	adds	r3, #77	@ 0x4d
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d126      	bne.n	8005a78 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a2a:	78fa      	ldrb	r2, [r7, #3]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	011b      	lsls	r3, r3, #4
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	440b      	add	r3, r1
 8005a38:	334d      	adds	r3, #77	@ 0x4d
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005a3e:	78fa      	ldrb	r2, [r7, #3]
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	4613      	mov	r3, r2
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	1a9b      	subs	r3, r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	440b      	add	r3, r1
 8005a4c:	3344      	adds	r3, #68	@ 0x44
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4403      	add	r3, r0
 8005a5e:	3344      	adds	r3, #68	@ 0x44
 8005a60:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a62:	78fa      	ldrb	r2, [r7, #3]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	1a9b      	subs	r3, r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	334c      	adds	r3, #76	@ 0x4c
 8005a72:	2204      	movs	r2, #4
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e00d      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005a78:	78fa      	ldrb	r2, [r7, #3]
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	334d      	adds	r3, #77	@ 0x4d
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	f000 8100 	beq.w	8005c90 <HCD_HC_IN_IRQHandler+0xcca>
 8005a90:	e000      	b.n	8005a94 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a92:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	334c      	adds	r3, #76	@ 0x4c
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f012 fe18 	bl	80186e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ab0:	e0ef      	b.n	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f009 fb79 	bl	800f1b2 <USB_ReadChInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac6:	2b40      	cmp	r3, #64	@ 0x40
 8005ac8:	d12f      	bne.n	8005b2a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2340      	movs	r3, #64	@ 0x40
 8005ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	334d      	adds	r3, #77	@ 0x4d
 8005aec:	2205      	movs	r2, #5
 8005aee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005af0:	78fa      	ldrb	r2, [r7, #3]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	331a      	adds	r3, #26
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d109      	bne.n	8005b1a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005b06:	78fa      	ldrb	r2, [r7, #3]
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	1a9b      	subs	r3, r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	3344      	adds	r3, #68	@ 0x44
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f00a f9bf 	bl	800fea6 <USB_HC_Halt>
 8005b28:	e0b3      	b.n	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f009 fb3d 	bl	800f1b2 <USB_ReadChInterrupts>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f003 0310 	and.w	r3, r3, #16
 8005b3e:	2b10      	cmp	r3, #16
 8005b40:	f040 80a7 	bne.w	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	3326      	adds	r3, #38	@ 0x26
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d11b      	bne.n	8005b92 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	011b      	lsls	r3, r3, #4
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3344      	adds	r3, #68	@ 0x44
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	334d      	adds	r3, #77	@ 0x4d
 8005b7e:	2204      	movs	r2, #4
 8005b80:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f00a f98b 	bl	800fea6 <USB_HC_Halt>
 8005b90:	e03f      	b.n	8005c12 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	1a9b      	subs	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	3326      	adds	r3, #38	@ 0x26
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3326      	adds	r3, #38	@ 0x26
 8005bb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d129      	bne.n	8005c12 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005bbe:	78fa      	ldrb	r2, [r7, #3]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	3344      	adds	r3, #68	@ 0x44
 8005bce:	2200      	movs	r2, #0
 8005bd0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	799b      	ldrb	r3, [r3, #6]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HCD_HC_IN_IRQHandler+0xc2a>
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	331b      	adds	r3, #27
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d110      	bne.n	8005c12 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	334d      	adds	r3, #77	@ 0x4d
 8005c00:	2204      	movs	r2, #4
 8005c02:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f00a f94a 	bl	800fea6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	331b      	adds	r3, #27
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d129      	bne.n	8005c7c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	331b      	adds	r3, #27
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005c5c:	78fb      	ldrb	r3, [r7, #3]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c76:	f043 0320 	orr.w	r3, r3, #32
 8005c7a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c88:	461a      	mov	r2, r3
 8005c8a:	2310      	movs	r3, #16
 8005c8c:	6093      	str	r3, [r2, #8]
 8005c8e:	e000      	b.n	8005c92 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005c90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f009 fa7b 	bl	800f1b2 <USB_ReadChInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d11b      	bne.n	8005cfe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	334d      	adds	r3, #77	@ 0x4d
 8005ce8:	2207      	movs	r2, #7
 8005cea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f00a f8d6 	bl	800fea6 <USB_HC_Halt>
 8005cfa:	f000 bc89 	b.w	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f009 fa53 	bl	800f1b2 <USB_ReadChInterrupts>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	f040 8082 	bne.w	8005e1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2320      	movs	r3, #32
 8005d28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	3319      	adds	r3, #25
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d124      	bne.n	8005d8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	1a9b      	subs	r3, r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	440b      	add	r3, r1
 8005d4e:	3319      	adds	r3, #25
 8005d50:	2200      	movs	r2, #0
 8005d52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	6879      	ldr	r1, [r7, #4]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	1a9b      	subs	r3, r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	440b      	add	r3, r1
 8005d62:	334c      	adds	r3, #76	@ 0x4c
 8005d64:	2202      	movs	r2, #2
 8005d66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	334d      	adds	r3, #77	@ 0x4d
 8005d78:	2203      	movs	r2, #3
 8005d7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	78fa      	ldrb	r2, [r7, #3]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f00a f88e 	bl	800fea6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	331a      	adds	r3, #26
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	f040 8437 	bne.w	8006610 <HCD_HC_OUT_IRQHandler+0x978>
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	331b      	adds	r3, #27
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 842b 	bne.w	8006610 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	3326      	adds	r3, #38	@ 0x26
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d009      	beq.n	8005de4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	1a9b      	subs	r3, r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	440b      	add	r3, r1
 8005dde:	331b      	adds	r3, #27
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	4613      	mov	r3, r2
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	334d      	adds	r3, #77	@ 0x4d
 8005df4:	2203      	movs	r2, #3
 8005df6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4618      	mov	r0, r3
 8005e02:	f00a f850 	bl	800fea6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	3344      	adds	r3, #68	@ 0x44
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	e3f9      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	78fa      	ldrb	r2, [r7, #3]
 8005e22:	4611      	mov	r1, r2
 8005e24:	4618      	mov	r0, r3
 8005e26:	f009 f9c4 	bl	800f1b2 <USB_ReadChInterrupts>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e34:	d111      	bne.n	8005e5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	4611      	mov	r1, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00a f827 	bl	800fea6 <USB_HC_Halt>
 8005e58:	e3da      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	78fa      	ldrb	r2, [r7, #3]
 8005e60:	4611      	mov	r1, r2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f009 f9a5 	bl	800f1b2 <USB_ReadChInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d168      	bne.n	8005f44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005e72:	78fa      	ldrb	r2, [r7, #3]
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	011b      	lsls	r3, r3, #4
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	3344      	adds	r3, #68	@ 0x44
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f009 f98f 	bl	800f1b2 <USB_ReadChInterrupts>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	d112      	bne.n	8005ec4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	3319      	adds	r3, #25
 8005eae:	2201      	movs	r2, #1
 8005eb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005eb2:	78fb      	ldrb	r3, [r7, #3]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	2340      	movs	r3, #64	@ 0x40
 8005ec2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	331b      	adds	r3, #27
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d019      	beq.n	8005f0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	331b      	adds	r3, #27
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	78fa      	ldrb	r2, [r7, #3]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005f20:	78fa      	ldrb	r2, [r7, #3]
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	4613      	mov	r3, r2
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	334d      	adds	r3, #77	@ 0x4d
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f009 ffb2 	bl	800fea6 <USB_HC_Halt>
 8005f42:	e365      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	78fa      	ldrb	r2, [r7, #3]
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f009 f930 	bl	800f1b2 <USB_ReadChInterrupts>
 8005f52:	4603      	mov	r3, r0
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d139      	bne.n	8005fd0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	334d      	adds	r3, #77	@ 0x4d
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	331a      	adds	r3, #26
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005f86:	78fa      	ldrb	r2, [r7, #3]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	3319      	adds	r3, #25
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3344      	adds	r3, #68	@ 0x44
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f009 ff75 	bl	800fea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005fbc:	78fb      	ldrb	r3, [r7, #3]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2340      	movs	r3, #64	@ 0x40
 8005fcc:	6093      	str	r3, [r2, #8]
 8005fce:	e31f      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f009 f8ea 	bl	800f1b2 <USB_ReadChInterrupts>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d11a      	bne.n	800601e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	334d      	adds	r3, #77	@ 0x4d
 800600a:	2206      	movs	r2, #6
 800600c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f009 ff45 	bl	800fea6 <USB_HC_Halt>
 800601c:	e2f8      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f009 f8c3 	bl	800f1b2 <USB_ReadChInterrupts>
 800602c:	4603      	mov	r3, r0
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d144      	bne.n	80060c0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	3344      	adds	r3, #68	@ 0x44
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	334d      	adds	r3, #77	@ 0x4d
 800605a:	2204      	movs	r2, #4
 800605c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800605e:	78fa      	ldrb	r2, [r7, #3]
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	4613      	mov	r3, r2
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3319      	adds	r3, #25
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d114      	bne.n	800609e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	1a9b      	subs	r3, r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	440b      	add	r3, r1
 8006082:	3318      	adds	r3, #24
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d109      	bne.n	800609e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3319      	adds	r3, #25
 800609a:	2201      	movs	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f009 fefd 	bl	800fea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b8:	461a      	mov	r2, r3
 80060ba:	2310      	movs	r3, #16
 80060bc:	6093      	str	r3, [r2, #8]
 80060be:	e2a7      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	78fa      	ldrb	r2, [r7, #3]
 80060c6:	4611      	mov	r1, r2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f009 f872 	bl	800f1b2 <USB_ReadChInterrupts>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060d4:	2b80      	cmp	r3, #128	@ 0x80
 80060d6:	f040 8083 	bne.w	80061e0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	799b      	ldrb	r3, [r3, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d111      	bne.n	8006106 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80060e2:	78fa      	ldrb	r2, [r7, #3]
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	334d      	adds	r3, #77	@ 0x4d
 80060f2:	2207      	movs	r2, #7
 80060f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f009 fed1 	bl	800fea6 <USB_HC_Halt>
 8006104:	e062      	b.n	80061cc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006106:	78fa      	ldrb	r2, [r7, #3]
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	3344      	adds	r3, #68	@ 0x44
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4403      	add	r3, r0
 8006126:	3344      	adds	r3, #68	@ 0x44
 8006128:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800612a:	78fa      	ldrb	r2, [r7, #3]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3344      	adds	r3, #68	@ 0x44
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d922      	bls.n	8006186 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	4613      	mov	r3, r2
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	3344      	adds	r3, #68	@ 0x44
 8006150:	2200      	movs	r2, #0
 8006152:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	334c      	adds	r3, #76	@ 0x4c
 8006164:	2204      	movs	r2, #4
 8006166:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006168:	78fa      	ldrb	r2, [r7, #3]
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	334c      	adds	r3, #76	@ 0x4c
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f012 faae 	bl	80186e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006184:	e022      	b.n	80061cc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	6879      	ldr	r1, [r7, #4]
 800618a:	4613      	mov	r3, r2
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	334c      	adds	r3, #76	@ 0x4c
 8006196:	2202      	movs	r2, #2
 8006198:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061b0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061b8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d8:	461a      	mov	r2, r3
 80061da:	2380      	movs	r3, #128	@ 0x80
 80061dc:	6093      	str	r3, [r2, #8]
 80061de:	e217      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f008 ffe2 	bl	800f1b2 <USB_ReadChInterrupts>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f8:	d11b      	bne.n	8006232 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80061fa:	78fa      	ldrb	r2, [r7, #3]
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	4613      	mov	r3, r2
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	440b      	add	r3, r1
 8006208:	334d      	adds	r3, #77	@ 0x4d
 800620a:	2209      	movs	r2, #9
 800620c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	78fa      	ldrb	r2, [r7, #3]
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f009 fe45 	bl	800fea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006228:	461a      	mov	r2, r3
 800622a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800622e:	6093      	str	r3, [r2, #8]
 8006230:	e1ee      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	78fa      	ldrb	r2, [r7, #3]
 8006238:	4611      	mov	r1, r2
 800623a:	4618      	mov	r0, r3
 800623c:	f008 ffb9 	bl	800f1b2 <USB_ReadChInterrupts>
 8006240:	4603      	mov	r3, r0
 8006242:	f003 0302 	and.w	r3, r3, #2
 8006246:	2b02      	cmp	r3, #2
 8006248:	f040 81df 	bne.w	800660a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006258:	461a      	mov	r2, r3
 800625a:	2302      	movs	r3, #2
 800625c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800625e:	78fa      	ldrb	r2, [r7, #3]
 8006260:	6879      	ldr	r1, [r7, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	011b      	lsls	r3, r3, #4
 8006266:	1a9b      	subs	r3, r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	440b      	add	r3, r1
 800626c:	334d      	adds	r3, #77	@ 0x4d
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	f040 8093 	bne.w	800639c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006276:	78fa      	ldrb	r2, [r7, #3]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	334d      	adds	r3, #77	@ 0x4d
 8006286:	2202      	movs	r2, #2
 8006288:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	334c      	adds	r3, #76	@ 0x4c
 800629a:	2201      	movs	r2, #1
 800629c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3326      	adds	r3, #38	@ 0x26
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d00b      	beq.n	80062cc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	3326      	adds	r3, #38	@ 0x26
 80062c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	f040 8190 	bne.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	799b      	ldrb	r3, [r3, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d115      	bne.n	8006300 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80062d4:	78fa      	ldrb	r2, [r7, #3]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	1a9b      	subs	r3, r3, r2
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	440b      	add	r3, r1
 80062e2:	333d      	adds	r3, #61	@ 0x3d
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	78fa      	ldrb	r2, [r7, #3]
 80062e8:	f083 0301 	eor.w	r3, r3, #1
 80062ec:	b2d8      	uxtb	r0, r3
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	4613      	mov	r3, r2
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	1a9b      	subs	r3, r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	333d      	adds	r3, #61	@ 0x3d
 80062fc:	4602      	mov	r2, r0
 80062fe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	799b      	ldrb	r3, [r3, #6]
 8006304:	2b01      	cmp	r3, #1
 8006306:	f040 8171 	bne.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3334      	adds	r3, #52	@ 0x34
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 8165 	beq.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	011b      	lsls	r3, r3, #4
 800632a:	1a9b      	subs	r3, r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	3334      	adds	r3, #52	@ 0x34
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	78fa      	ldrb	r2, [r7, #3]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	1a9b      	subs	r3, r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4403      	add	r3, r0
 8006342:	3328      	adds	r3, #40	@ 0x28
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	440b      	add	r3, r1
 8006348:	1e59      	subs	r1, r3, #1
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	011b      	lsls	r3, r3, #4
 8006352:	1a9b      	subs	r3, r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4403      	add	r3, r0
 8006358:	3328      	adds	r3, #40	@ 0x28
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006360:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 813f 	beq.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	333d      	adds	r3, #61	@ 0x3d
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2d8      	uxtb	r0, r3
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	333d      	adds	r3, #61	@ 0x3d
 8006396:	4602      	mov	r2, r0
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	e127      	b.n	80065ec <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	334d      	adds	r3, #77	@ 0x4d
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d120      	bne.n	80063f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063b2:	78fa      	ldrb	r2, [r7, #3]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	440b      	add	r3, r1
 80063c0:	334d      	adds	r3, #77	@ 0x4d
 80063c2:	2202      	movs	r2, #2
 80063c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80063c6:	78fa      	ldrb	r2, [r7, #3]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	331b      	adds	r3, #27
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8107 	bne.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063de:	78fa      	ldrb	r2, [r7, #3]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	011b      	lsls	r3, r3, #4
 80063e6:	1a9b      	subs	r3, r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	334c      	adds	r3, #76	@ 0x4c
 80063ee:	2202      	movs	r2, #2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	e0fb      	b.n	80065ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	334d      	adds	r3, #77	@ 0x4d
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d13a      	bne.n	8006480 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800640a:	78fa      	ldrb	r2, [r7, #3]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	1a9b      	subs	r3, r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	334d      	adds	r3, #77	@ 0x4d
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	4613      	mov	r3, r2
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	334c      	adds	r3, #76	@ 0x4c
 800642e:	2202      	movs	r2, #2
 8006430:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006432:	78fa      	ldrb	r2, [r7, #3]
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	1a9b      	subs	r3, r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	440b      	add	r3, r1
 8006440:	331b      	adds	r3, #27
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	2b01      	cmp	r3, #1
 8006446:	f040 80d1 	bne.w	80065ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800644a:	78fa      	ldrb	r2, [r7, #3]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	331b      	adds	r3, #27
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	4413      	add	r3, r2
 8006466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	440a      	add	r2, r1
 8006474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006478:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800647c:	6053      	str	r3, [r2, #4]
 800647e:	e0b5      	b.n	80065ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	334d      	adds	r3, #77	@ 0x4d
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b05      	cmp	r3, #5
 8006494:	d114      	bne.n	80064c0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	334d      	adds	r3, #77	@ 0x4d
 80064a6:	2202      	movs	r2, #2
 80064a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	334c      	adds	r3, #76	@ 0x4c
 80064ba:	2202      	movs	r2, #2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e095      	b.n	80065ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	334d      	adds	r3, #77	@ 0x4d
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b06      	cmp	r3, #6
 80064d4:	d114      	bne.n	8006500 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	334d      	adds	r3, #77	@ 0x4d
 80064e6:	2202      	movs	r2, #2
 80064e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	011b      	lsls	r3, r3, #4
 80064f2:	1a9b      	subs	r3, r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	334c      	adds	r3, #76	@ 0x4c
 80064fa:	2205      	movs	r2, #5
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	e075      	b.n	80065ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	334d      	adds	r3, #77	@ 0x4d
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b07      	cmp	r3, #7
 8006514:	d00a      	beq.n	800652c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	334d      	adds	r3, #77	@ 0x4d
 8006526:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006528:	2b09      	cmp	r3, #9
 800652a:	d170      	bne.n	800660e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4613      	mov	r3, r2
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	334d      	adds	r3, #77	@ 0x4d
 800653c:	2202      	movs	r2, #2
 800653e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	6879      	ldr	r1, [r7, #4]
 8006544:	4613      	mov	r3, r2
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	3344      	adds	r3, #68	@ 0x44
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	1a9b      	subs	r3, r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4403      	add	r3, r0
 8006560:	3344      	adds	r3, #68	@ 0x44
 8006562:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3344      	adds	r3, #68	@ 0x44
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d914      	bls.n	80065a4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	3344      	adds	r3, #68	@ 0x44
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	440b      	add	r3, r1
 800659c:	334c      	adds	r3, #76	@ 0x4c
 800659e:	2204      	movs	r2, #4
 80065a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80065a2:	e022      	b.n	80065ea <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80065a4:	78fa      	ldrb	r2, [r7, #3]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	011b      	lsls	r3, r3, #4
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	334c      	adds	r3, #76	@ 0x4c
 80065b4:	2202      	movs	r2, #2
 80065b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e4:	461a      	mov	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80065ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065ec:	78fa      	ldrb	r2, [r7, #3]
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	4613      	mov	r3, r2
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	334c      	adds	r3, #76	@ 0x4c
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f012 f86c 	bl	80186e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006608:	e002      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800660e:	bf00      	nop
  }
}
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08a      	sub	sp, #40	@ 0x28
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	0c5b      	lsrs	r3, r3, #17
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800664a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d004      	beq.n	800665c <HCD_RXQLVL_IRQHandler+0x46>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b05      	cmp	r3, #5
 8006656:	f000 80b6 	beq.w	80067c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800665a:	e0b7      	b.n	80067cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80b3 	beq.w	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4613      	mov	r3, r2
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	332c      	adds	r3, #44	@ 0x2c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80a7 	beq.w	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800667c:	6879      	ldr	r1, [r7, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4613      	mov	r3, r2
 8006682:	011b      	lsls	r3, r3, #4
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3338      	adds	r3, #56	@ 0x38
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	18d1      	adds	r1, r2, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4613      	mov	r3, r2
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4403      	add	r3, r0
 80066a0:	3334      	adds	r3, #52	@ 0x34
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4299      	cmp	r1, r3
 80066a6:	f200 8083 	bhi.w	80067b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6818      	ldr	r0, [r3, #0]
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	4613      	mov	r3, r2
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	332c      	adds	r3, #44	@ 0x2c
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	b292      	uxth	r2, r2
 80066c4:	4619      	mov	r1, r3
 80066c6:	f008 fbcd 	bl	800ee64 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4613      	mov	r3, r2
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	1a9b      	subs	r3, r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	332c      	adds	r3, #44	@ 0x2c
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	18d1      	adds	r1, r2, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4613      	mov	r3, r2
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4403      	add	r3, r0
 80066ee:	332c      	adds	r3, #44	@ 0x2c
 80066f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	69ba      	ldr	r2, [r7, #24]
 80066f6:	4613      	mov	r3, r2
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3338      	adds	r3, #56	@ 0x38
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	18d1      	adds	r1, r2, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4613      	mov	r3, r2
 800670e:	011b      	lsls	r3, r3, #4
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4403      	add	r3, r0
 8006716:	3338      	adds	r3, #56	@ 0x38
 8006718:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	0cdb      	lsrs	r3, r3, #19
 800672a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800672e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	4613      	mov	r3, r2
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	1a9b      	subs	r3, r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	3328      	adds	r3, #40	@ 0x28
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4293      	cmp	r3, r2
 8006748:	d13f      	bne.n	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d03c      	beq.n	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006766:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800676e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	4413      	add	r3, r2
 8006778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677c:	461a      	mov	r2, r3
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	333c      	adds	r3, #60	@ 0x3c
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	f083 0301 	eor.w	r3, r3, #1
 8006798:	b2d8      	uxtb	r0, r3
 800679a:	6879      	ldr	r1, [r7, #4]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4613      	mov	r3, r2
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	440b      	add	r3, r1
 80067a8:	333c      	adds	r3, #60	@ 0x3c
 80067aa:	4602      	mov	r2, r0
 80067ac:	701a      	strb	r2, [r3, #0]
      break;
 80067ae:	e00c      	b.n	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4613      	mov	r3, r2
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	1a9b      	subs	r3, r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	334c      	adds	r3, #76	@ 0x4c
 80067c0:	2204      	movs	r2, #4
 80067c2:	701a      	strb	r2, [r3, #0]
      break;
 80067c4:	e001      	b.n	80067ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80067ca:	bf00      	nop
  }
}
 80067cc:	bf00      	nop
 80067ce:	3728      	adds	r7, #40	@ 0x28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006800:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b02      	cmp	r3, #2
 800680a:	d10b      	bne.n	8006824 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d102      	bne.n	800681c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f011 ff46 	bl	80186a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f043 0302 	orr.w	r3, r3, #2
 8006822:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b08      	cmp	r3, #8
 800682c:	d132      	bne.n	8006894 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	f043 0308 	orr.w	r3, r3, #8
 8006834:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d126      	bne.n	800688e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7a5b      	ldrb	r3, [r3, #9]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d113      	bne.n	8006870 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800684e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006852:	d106      	bne.n	8006862 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2102      	movs	r1, #2
 800685a:	4618      	mov	r0, r3
 800685c:	f008 feb6 	bl	800f5cc <USB_InitFSLSPClkSel>
 8006860:	e011      	b.n	8006886 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2101      	movs	r1, #1
 8006868:	4618      	mov	r0, r3
 800686a:	f008 feaf 	bl	800f5cc <USB_InitFSLSPClkSel>
 800686e:	e00a      	b.n	8006886 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	79db      	ldrb	r3, [r3, #7]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800687e:	461a      	mov	r2, r3
 8006880:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006884:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f011 ff3c 	bl	8018704 <HAL_HCD_PortEnabled_Callback>
 800688c:	e002      	b.n	8006894 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f011 ff46 	bl	8018720 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b20      	cmp	r3, #32
 800689c:	d103      	bne.n	80068a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	f043 0320 	orr.w	r3, r3, #32
 80068a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80068ac:	461a      	mov	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	6013      	str	r3, [r2, #0]
}
 80068b2:	bf00      	nop
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e08b      	b.n	80069e6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d106      	bne.n	80068e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fb f88a 	bl	80019fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	@ 0x24
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800690c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800691c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006932:	609a      	str	r2, [r3, #8]
 8006934:	e006      	b.n	8006944 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d108      	bne.n	800695e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800695a:	605a      	str	r2, [r3, #4]
 800695c:	e007      	b.n	800696e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800696c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6859      	ldr	r1, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4b1d      	ldr	r3, [pc, #116]	@ (80069f0 <HAL_I2C_Init+0x134>)
 800697a:	430b      	orrs	r3, r1
 800697c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800698c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	69d9      	ldr	r1, [r3, #28]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1a      	ldr	r2, [r3, #32]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	02008000 	.word	0x02008000

080069f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	d138      	bne.n	8006a7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d101      	bne.n	8006a18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a14:	2302      	movs	r3, #2
 8006a16:	e032      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	@ 0x24
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006a46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	430a      	orrs	r2, r1
 8006a56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 0201 	orr.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d139      	bne.n	8006b14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e033      	b.n	8006b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2224      	movs	r2, #36	@ 0x24
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006adc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af02      	add	r7, sp, #8
 8006b28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0fe      	b.n	8006d32 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f011 f995 	bl	8017e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2203      	movs	r2, #3
 8006b52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f007 fb15 	bl	800e18a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7c1a      	ldrb	r2, [r3, #16]
 8006b68:	f88d 2000 	strb.w	r2, [sp]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b70:	f007 f9e6 	bl	800df40 <USB_CoreInit>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e0d5      	b.n	8006d32 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f007 fb0d 	bl	800e1ac <USB_SetCurrentMode>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e0c6      	b.n	8006d32 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73fb      	strb	r3, [r7, #15]
 8006ba8:	e04a      	b.n	8006c40 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3315      	adds	r3, #21
 8006bba:	2201      	movs	r2, #1
 8006bbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006bbe:	7bfa      	ldrb	r2, [r7, #15]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3314      	adds	r3, #20
 8006bce:	7bfa      	ldrb	r2, [r7, #15]
 8006bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	b298      	uxth	r0, r3
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	00db      	lsls	r3, r3, #3
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	440b      	add	r3, r1
 8006be4:	332e      	adds	r3, #46	@ 0x2e
 8006be6:	4602      	mov	r2, r0
 8006be8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006bea:	7bfa      	ldrb	r2, [r7, #15]
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	3318      	adds	r3, #24
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	331c      	adds	r3, #28
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c12:	7bfa      	ldrb	r2, [r7, #15]
 8006c14:	6879      	ldr	r1, [r7, #4]
 8006c16:	4613      	mov	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	440b      	add	r3, r1
 8006c20:	3320      	adds	r3, #32
 8006c22:	2200      	movs	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c26:	7bfa      	ldrb	r2, [r7, #15]
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	00db      	lsls	r3, r3, #3
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	3324      	adds	r3, #36	@ 0x24
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	791b      	ldrb	r3, [r3, #4]
 8006c44:	7bfa      	ldrb	r2, [r7, #15]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d3af      	bcc.n	8006baa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]
 8006c4e:	e044      	b.n	8006cda <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c50:	7bfa      	ldrb	r2, [r7, #15]
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	4613      	mov	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	440b      	add	r3, r1
 8006c5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006c66:	7bfa      	ldrb	r2, [r7, #15]
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	440b      	add	r3, r1
 8006c74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006c78:	7bfa      	ldrb	r2, [r7, #15]
 8006c7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	440b      	add	r3, r1
 8006c8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006c92:	7bfa      	ldrb	r2, [r7, #15]
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ca8:	7bfa      	ldrb	r2, [r7, #15]
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006cba:	2200      	movs	r2, #0
 8006cbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006cbe:	7bfa      	ldrb	r2, [r7, #15]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	73fb      	strb	r3, [r7, #15]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	791b      	ldrb	r3, [r3, #4]
 8006cde:	7bfa      	ldrb	r2, [r7, #15]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d3b5      	bcc.n	8006c50 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	7c1a      	ldrb	r2, [r3, #16]
 8006cec:	f88d 2000 	strb.w	r2, [sp]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cf4:	f007 faa6 	bl	800e244 <USB_DevInit>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d005      	beq.n	8006d0a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e013      	b.n	8006d32 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7b1b      	ldrb	r3, [r3, #12]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d102      	bne.n	8006d26 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 f947 	bl	8007fb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f008 fa0d 	bl	800f14a <USB_DevDisconnect>

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_PCD_Start+0x1c>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e022      	b.n	8006d9c <HAL_PCD_Start+0x62>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f007 f9f0 	bl	800e168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f008 f9bb 	bl	800f108 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_PCD_Stop+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e028      	b.n	8006e12 <HAL_PCD_Stop+0x6e>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_DISABLE(hpcd);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f007 f9dc 	bl	800e18a <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f008 f9b7 	bl	800f14a <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2110      	movs	r1, #16
 8006de2:	4618      	mov	r0, r3
 8006de4:	f007 fb8c 	bl	800e500 <USB_FlushTxFifo>

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d009      	beq.n	8006e08 <HAL_PCD_Stop+0x64>
      (hpcd->Init.battery_charging_enable == 1U))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d105      	bne.n	8006e08 <HAL_PCD_Stop+0x64>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_UNLOCK(hpcd);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e1a:	b590      	push	{r4, r7, lr}
 8006e1c:	b08d      	sub	sp, #52	@ 0x34
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f008 fa5f 	bl	800f2f4 <USB_GetMode>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f040 84b9 	bne.w	80077b0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f008 f9a2 	bl	800f18c <USB_ReadInterrupts>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 84af 	beq.w	80077ae <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f008 f98f 	bl	800f18c <USB_ReadInterrupts>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d107      	bne.n	8006e88 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695a      	ldr	r2, [r3, #20]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f002 0202 	and.w	r2, r2, #2
 8006e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f008 f97d 	bl	800f18c <USB_ReadInterrupts>
 8006e92:	4603      	mov	r3, r0
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d161      	bne.n	8006f60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699a      	ldr	r2, [r3, #24]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f022 0210 	bic.w	r2, r2, #16
 8006eaa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	4613      	mov	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	3304      	adds	r3, #4
 8006eca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006ed2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ed6:	d124      	bne.n	8006f22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d035      	beq.n	8006f50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6a38      	ldr	r0, [r7, #32]
 8006ef8:	f007 ffb4 	bl	800ee64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f08:	441a      	add	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	091b      	lsrs	r3, r3, #4
 8006f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f1a:	441a      	add	r2, r3
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	615a      	str	r2, [r3, #20]
 8006f20:	e016      	b.n	8006f50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006f28:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f2c:	d110      	bne.n	8006f50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f34:	2208      	movs	r2, #8
 8006f36:	4619      	mov	r1, r3
 8006f38:	6a38      	ldr	r0, [r7, #32]
 8006f3a:	f007 ff93 	bl	800ee64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4a:	441a      	add	r2, r3
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0210 	orr.w	r2, r2, #16
 8006f5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f008 f911 	bl	800f18c <USB_ReadInterrupts>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f74:	f040 80a7 	bne.w	80070c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f008 f937 	bl	800f1f4 <USB_ReadDevAllOutEpInterrupt>
 8006f86:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006f88:	e099      	b.n	80070be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f000 808e 	beq.w	80070b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9c:	b2d2      	uxtb	r2, r2
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f008 f95b 	bl	800f25c <USB_ReadDevOutEPInterrupt>
 8006fa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fe6e 	bl	8007ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fe8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ff44 	bl	8007e78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	f003 0310 	and.w	r3, r3, #16
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007006:	461a      	mov	r2, r3
 8007008:	2310      	movs	r3, #16
 800700a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d030      	beq.n	8007078 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b80      	cmp	r3, #128	@ 0x80
 8007020:	d109      	bne.n	8007036 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	69fa      	ldr	r2, [r7, #28]
 800702c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007034:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007038:	4613      	mov	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	3304      	adds	r3, #4
 800704a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	78db      	ldrb	r3, [r3, #3]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d108      	bne.n	8007066 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	2200      	movs	r2, #0
 8007058:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	b2db      	uxtb	r3, r3
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f011 f83f 	bl	80180e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007072:	461a      	mov	r2, r3
 8007074:	2302      	movs	r3, #2
 8007076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708e:	461a      	mov	r2, r3
 8007090:	2320      	movs	r3, #32
 8007092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d009      	beq.n	80070b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	461a      	mov	r2, r3
 80070ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	3301      	adds	r3, #1
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f47f af62 	bne.w	8006f8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f008 f85e 	bl	800f18c <USB_ReadInterrupts>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070da:	f040 80db 	bne.w	8007294 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f008 f8a0 	bl	800f228 <USB_ReadDevAllInEpInterrupt>
 80070e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80070ee:	e0cd      	b.n	800728c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 80c2 	beq.w	8007280 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007102:	b2d2      	uxtb	r2, r2
 8007104:	4611      	mov	r1, r2
 8007106:	4618      	mov	r0, r3
 8007108:	f008 f8c6 	bl	800f298 <USB_ReadDevInEPInterrupt>
 800710c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d057      	beq.n	80071c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	2201      	movs	r2, #1
 8007120:	fa02 f303 	lsl.w	r3, r2, r3
 8007124:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	43db      	mvns	r3, r3
 8007132:	69f9      	ldr	r1, [r7, #28]
 8007134:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007138:	4013      	ands	r3, r2
 800713a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007148:	461a      	mov	r2, r3
 800714a:	2301      	movs	r3, #1
 800714c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	799b      	ldrb	r3, [r3, #6]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d132      	bne.n	80071bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	440b      	add	r3, r1
 8007164:	3320      	adds	r3, #32
 8007166:	6819      	ldr	r1, [r3, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716c:	4613      	mov	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4403      	add	r3, r0
 8007176:	331c      	adds	r3, #28
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4419      	add	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007180:	4613      	mov	r3, r2
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4403      	add	r3, r0
 800718a:	3320      	adds	r3, #32
 800718c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d113      	bne.n	80071bc <HAL_PCD_IRQHandler+0x3a2>
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	3324      	adds	r3, #36	@ 0x24
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d108      	bne.n	80071bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071b4:	461a      	mov	r2, r3
 80071b6:	2101      	movs	r1, #1
 80071b8:	f008 f8ce 	bl	800f358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f010 ff09 	bl	8017fda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d008      	beq.n	80071e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071de:	461a      	mov	r2, r3
 80071e0:	2308      	movs	r3, #8
 80071e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d008      	beq.n	8007200 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071fa:	461a      	mov	r2, r3
 80071fc:	2310      	movs	r3, #16
 80071fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d008      	beq.n	800721c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007216:	461a      	mov	r2, r3
 8007218:	2340      	movs	r3, #64	@ 0x40
 800721a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d023      	beq.n	800726e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007226:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007228:	6a38      	ldr	r0, [r7, #32]
 800722a:	f007 f969 	bl	800e500 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800722e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007230:	4613      	mov	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	3310      	adds	r3, #16
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	4413      	add	r3, r2
 800723e:	3304      	adds	r3, #4
 8007240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	78db      	ldrb	r3, [r3, #3]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d108      	bne.n	800725c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2200      	movs	r2, #0
 800724e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	b2db      	uxtb	r3, r3
 8007254:	4619      	mov	r1, r3
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f010 ff56 	bl	8018108 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007268:	461a      	mov	r2, r3
 800726a:	2302      	movs	r3, #2
 800726c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fc88 	bl	8007b90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007282:	3301      	adds	r3, #1
 8007284:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007288:	085b      	lsrs	r3, r3, #1
 800728a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	2b00      	cmp	r3, #0
 8007290:	f47f af2e 	bne.w	80070f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f007 ff77 	bl	800f18c <USB_ReadInterrupts>
 800729e:	4603      	mov	r3, r0
 80072a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a8:	d122      	bne.n	80072f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072b8:	f023 0301 	bic.w	r3, r3, #1
 80072bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d108      	bne.n	80072da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80072d0:	2100      	movs	r1, #0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fe92 	bl	8007ffc <HAL_PCDEx_LPM_Callback>
 80072d8:	e002      	b.n	80072e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f010 fef4 	bl	80180c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695a      	ldr	r2, [r3, #20]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80072ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f007 ff49 	bl	800f18c <USB_ReadInterrupts>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007304:	d112      	bne.n	800732c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b01      	cmp	r3, #1
 8007314:	d102      	bne.n	800731c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f010 feb0 	bl	801807c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695a      	ldr	r2, [r3, #20]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800732a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f007 ff2b 	bl	800f18c <USB_ReadInterrupts>
 8007336:	4603      	mov	r3, r0
 8007338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007340:	d121      	bne.n	8007386 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695a      	ldr	r2, [r3, #20]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007350:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007358:	2b00      	cmp	r3, #0
 800735a:	d111      	bne.n	8007380 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007376:	2101      	movs	r1, #1
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fe3f 	bl	8007ffc <HAL_PCDEx_LPM_Callback>
 800737e:	e002      	b.n	8007386 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f010 fe7b 	bl	801807c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f007 fefe 	bl	800f18c <USB_ReadInterrupts>
 8007390:	4603      	mov	r3, r0
 8007392:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739a:	f040 80b7 	bne.w	800750c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2110      	movs	r1, #16
 80073b8:	4618      	mov	r0, r3
 80073ba:	f007 f8a1 	bl	800e500 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073be:	2300      	movs	r3, #0
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c2:	e046      	b.n	8007452 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d0:	461a      	mov	r2, r3
 80073d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	69fa      	ldr	r2, [r7, #28]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	461a      	mov	r2, r3
 8007406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800740a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800740c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800742a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800742c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800743c:	0151      	lsls	r1, r2, #5
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	440a      	add	r2, r1
 8007442:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007446:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800744a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744e:	3301      	adds	r3, #1
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	461a      	mov	r2, r3
 8007458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745a:	4293      	cmp	r3, r2
 800745c:	d3b2      	bcc.n	80073c4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	69fa      	ldr	r2, [r7, #28]
 8007468:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800746c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007470:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7bdb      	ldrb	r3, [r3, #15]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d016      	beq.n	80074a8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748a:	f043 030b 	orr.w	r3, r3, #11
 800748e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a0:	f043 030b 	orr.w	r3, r3, #11
 80074a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80074a6:	e015      	b.n	80074d4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ae:	695a      	ldr	r2, [r3, #20]
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b6:	4619      	mov	r1, r3
 80074b8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80074bc:	4313      	orrs	r3, r2
 80074be:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ce:	f043 030b 	orr.w	r3, r3, #11
 80074d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69fa      	ldr	r2, [r7, #28]
 80074de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074f6:	461a      	mov	r2, r3
 80074f8:	f007 ff2e 	bl	800f358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800750a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f007 fe3b 	bl	800f18c <USB_ReadInterrupts>
 8007516:	4603      	mov	r3, r0
 8007518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800751c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007520:	d123      	bne.n	800756a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f007 fef2 	bl	800f310 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f007 f85e 	bl	800e5f2 <USB_GetDevSpeed>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681c      	ldr	r4, [r3, #0]
 8007542:	f001 fd3b 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8007546:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800754c:	461a      	mov	r2, r3
 800754e:	4620      	mov	r0, r4
 8007550:	f006 fd68 	bl	800e024 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f010 fd68 	bl	801802a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695a      	ldr	r2, [r3, #20]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007568:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f007 fe0c 	bl	800f18c <USB_ReadInterrupts>
 8007574:	4603      	mov	r3, r0
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b08      	cmp	r3, #8
 800757c:	d10a      	bne.n	8007594 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f010 fd45 	bl	801800e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f002 0208 	and.w	r2, r2, #8
 8007592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f007 fdf7 	bl	800f18c <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a4:	2b80      	cmp	r3, #128	@ 0x80
 80075a6:	d123      	bne.n	80075f0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075b4:	2301      	movs	r3, #1
 80075b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075b8:	e014      	b.n	80075e4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075be:	4613      	mov	r3, r2
 80075c0:	00db      	lsls	r3, r3, #3
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d105      	bne.n	80075de <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 faa8 	bl	8007b2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e0:	3301      	adds	r3, #1
 80075e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	791b      	ldrb	r3, [r3, #4]
 80075e8:	461a      	mov	r2, r3
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d3e4      	bcc.n	80075ba <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f007 fdc9 	bl	800f18c <USB_ReadInterrupts>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007600:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007604:	d13c      	bne.n	8007680 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007606:	2301      	movs	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
 800760a:	e02b      	b.n	8007664 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	3318      	adds	r3, #24
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d115      	bne.n	800765e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007632:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007634:	2b00      	cmp	r3, #0
 8007636:	da12      	bge.n	800765e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763c:	4613      	mov	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	4413      	add	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	440b      	add	r3, r1
 8007646:	3317      	adds	r3, #23
 8007648:	2201      	movs	r2, #1
 800764a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800764c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007654:	b2db      	uxtb	r3, r3
 8007656:	4619      	mov	r1, r3
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa68 	bl	8007b2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800765e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007660:	3301      	adds	r3, #1
 8007662:	627b      	str	r3, [r7, #36]	@ 0x24
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	791b      	ldrb	r3, [r3, #4]
 8007668:	461a      	mov	r2, r3
 800766a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766c:	4293      	cmp	r3, r2
 800766e:	d3cd      	bcc.n	800760c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	695a      	ldr	r2, [r3, #20]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800767e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f007 fd81 	bl	800f18c <USB_ReadInterrupts>
 800768a:	4603      	mov	r3, r0
 800768c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007694:	d156      	bne.n	8007744 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007696:	2301      	movs	r3, #1
 8007698:	627b      	str	r3, [r7, #36]	@ 0x24
 800769a:	e045      	b.n	8007728 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b0:	4613      	mov	r3, r2
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d12e      	bne.n	8007722 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da2b      	bge.n	8007722 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	0c1a      	lsrs	r2, r3, #16
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80076d4:	4053      	eors	r3, r2
 80076d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d121      	bne.n	8007722 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80076de:	6879      	ldr	r1, [r7, #4]
 80076e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	440b      	add	r3, r1
 80076ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80076f0:	2201      	movs	r2, #1
 80076f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800771a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800771e:	6053      	str	r3, [r2, #4]
            break;
 8007720:	e008      	b.n	8007734 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	3301      	adds	r3, #1
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	791b      	ldrb	r3, [r3, #4]
 800772c:	461a      	mov	r2, r3
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	4293      	cmp	r3, r2
 8007732:	d3b3      	bcc.n	800769c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695a      	ldr	r2, [r3, #20]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f007 fd1f 	bl	800f18c <USB_ReadInterrupts>
 800774e:	4603      	mov	r3, r0
 8007750:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007758:	d10a      	bne.n	8007770 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f010 fce6 	bl	801812c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800776e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f007 fd09 	bl	800f18c <USB_ReadInterrupts>
 800777a:	4603      	mov	r3, r0
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b04      	cmp	r3, #4
 8007782:	d115      	bne.n	80077b0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f010 fcd6 	bl	8018148 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6859      	ldr	r1, [r3, #4]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	605a      	str	r2, [r3, #4]
 80077ac:	e000      	b.n	80077b0 <HAL_PCD_IRQHandler+0x996>
      return;
 80077ae:	bf00      	nop
    }
  }
}
 80077b0:	3734      	adds	r7, #52	@ 0x34
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd90      	pop	{r4, r7, pc}

080077b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_PCD_SetAddress+0x1a>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e012      	b.n	80077f6 <HAL_PCD_SetAddress+0x40>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f007 fc68 	bl	800f0bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	4608      	mov	r0, r1
 8007808:	4611      	mov	r1, r2
 800780a:	461a      	mov	r2, r3
 800780c:	4603      	mov	r3, r0
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	460b      	mov	r3, r1
 8007812:	803b      	strh	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800781c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007820:	2b00      	cmp	r3, #0
 8007822:	da0f      	bge.n	8007844 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	3310      	adds	r3, #16
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	4413      	add	r3, r2
 8007838:	3304      	adds	r3, #4
 800783a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	705a      	strb	r2, [r3, #1]
 8007842:	e00f      	b.n	8007864 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	4613      	mov	r3, r2
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	4413      	add	r3, r2
 800785a:	3304      	adds	r3, #4
 800785c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007870:	883b      	ldrh	r3, [r7, #0]
 8007872:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	78ba      	ldrb	r2, [r7, #2]
 800787e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007892:	78bb      	ldrb	r3, [r7, #2]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d102      	bne.n	800789e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_PCD_EP_Open+0xae>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e00e      	b.n	80078ca <HAL_PCD_EP_Open+0xcc>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68f9      	ldr	r1, [r7, #12]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f006 febe 	bl	800e63c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80078c8:	7afb      	ldrb	r3, [r7, #11]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	460b      	mov	r3, r1
 80078e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	f003 020f 	and.w	r2, r3, #15
 80078e8:	4613      	mov	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4413      	add	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2200      	movs	r2, #0
 800790c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007914:	7afb      	ldrb	r3, [r7, #11]
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	b2da      	uxtb	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	799b      	ldrb	r3, [r3, #6]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d102      	bne.n	800792e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	799b      	ldrb	r3, [r3, #6]
 8007936:	461a      	mov	r2, r3
 8007938:	6979      	ldr	r1, [r7, #20]
 800793a:	f006 ff07 	bl	800e74c <USB_EPStartXfer>

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	607a      	str	r2, [r7, #4]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	460b      	mov	r3, r1
 8007956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007958:	7afb      	ldrb	r3, [r7, #11]
 800795a:	f003 020f 	and.w	r2, r3, #15
 800795e:	4613      	mov	r3, r2
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	3310      	adds	r3, #16
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	683a      	ldr	r2, [r7, #0]
 800797a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2200      	movs	r2, #0
 8007980:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2201      	movs	r2, #1
 8007986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007988:	7afb      	ldrb	r3, [r7, #11]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	b2da      	uxtb	r2, r3
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	799b      	ldrb	r3, [r3, #6]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d102      	bne.n	80079a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	799b      	ldrb	r3, [r3, #6]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6979      	ldr	r1, [r7, #20]
 80079ae:	f006 fecd 	bl	800e74c <USB_EPStartXfer>

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	460b      	mov	r3, r1
 80079c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079c8:	78fb      	ldrb	r3, [r7, #3]
 80079ca:	f003 030f 	and.w	r3, r3, #15
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	7912      	ldrb	r2, [r2, #4]
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d901      	bls.n	80079da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e04f      	b.n	8007a7a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da0f      	bge.n	8007a02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	f003 020f 	and.w	r2, r3, #15
 80079e8:	4613      	mov	r3, r2
 80079ea:	00db      	lsls	r3, r3, #3
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	3310      	adds	r3, #16
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	4413      	add	r3, r2
 80079f6:	3304      	adds	r3, #4
 80079f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	705a      	strb	r2, [r3, #1]
 8007a00:	e00d      	b.n	8007a1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a02:	78fa      	ldrb	r2, [r7, #3]
 8007a04:	4613      	mov	r3, r2
 8007a06:	00db      	lsls	r3, r3, #3
 8007a08:	4413      	add	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4413      	add	r3, r2
 8007a14:	3304      	adds	r3, #4
 8007a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a24:	78fb      	ldrb	r3, [r7, #3]
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d101      	bne.n	8007a3e <HAL_PCD_EP_SetStall+0x82>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	e01d      	b.n	8007a7a <HAL_PCD_EP_SetStall+0xbe>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f007 fa61 	bl	800ef14 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6818      	ldr	r0, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7999      	ldrb	r1, [r3, #6]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f007 fc74 	bl	800f358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7912      	ldrb	r2, [r2, #4]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e042      	b.n	8007b26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007aa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	da0f      	bge.n	8007ac8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	f003 020f 	and.w	r2, r3, #15
 8007aae:	4613      	mov	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	3304      	adds	r3, #4
 8007abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	705a      	strb	r2, [r3, #1]
 8007ac6:	e00f      	b.n	8007ae8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	f003 020f 	and.w	r2, r3, #15
 8007ace:	4613      	mov	r3, r2
 8007ad0:	00db      	lsls	r3, r3, #3
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4413      	add	r3, r2
 8007ade:	3304      	adds	r3, #4
 8007ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_PCD_EP_ClrStall+0x86>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e00e      	b.n	8007b26 <HAL_PCD_EP_ClrStall+0xa4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68f9      	ldr	r1, [r7, #12]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f007 fa6a 	bl	800eff0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	460b      	mov	r3, r1
 8007b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da0c      	bge.n	8007b5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	4613      	mov	r3, r2
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3310      	adds	r3, #16
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	4413      	add	r3, r2
 8007b56:	3304      	adds	r3, #4
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	e00c      	b.n	8007b76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	f003 020f 	and.w	r2, r3, #15
 8007b62:	4613      	mov	r3, r2
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68f9      	ldr	r1, [r7, #12]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f007 f889 	bl	800ec94 <USB_EPStopXfer>
 8007b82:	4603      	mov	r3, r0
 8007b84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007b86:	7afb      	ldrb	r3, [r7, #11]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	@ 0x28
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3310      	adds	r3, #16
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d901      	bls.n	8007bc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e06b      	b.n	8007ca0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	691a      	ldr	r2, [r3, #16]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d902      	bls.n	8007be4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	3303      	adds	r3, #3
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007bec:	e02a      	b.n	8007c44 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d902      	bls.n	8007c0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	3303      	adds	r3, #3
 8007c0e:	089b      	lsrs	r3, r3, #2
 8007c10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	68d9      	ldr	r1, [r3, #12]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	4603      	mov	r3, r0
 8007c26:	6978      	ldr	r0, [r7, #20]
 8007c28:	f007 f8de 	bl	800ede8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	68da      	ldr	r2, [r3, #12]
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	441a      	add	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	695a      	ldr	r2, [r3, #20]
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	441a      	add	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d809      	bhi.n	8007c6e <PCD_WriteEmptyTxFifo+0xde>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	695a      	ldr	r2, [r3, #20]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d203      	bcs.n	8007c6e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1bf      	bne.n	8007bee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d811      	bhi.n	8007c9e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	f003 030f 	and.w	r3, r3, #15
 8007c80:	2201      	movs	r2, #1
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	43db      	mvns	r3, r3
 8007c94:	6939      	ldr	r1, [r7, #16]
 8007c96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	333c      	adds	r3, #60	@ 0x3c
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	799b      	ldrb	r3, [r3, #6]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d17b      	bne.n	8007dd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d015      	beq.n	8007d14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	4a61      	ldr	r2, [pc, #388]	@ (8007e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	f240 80b9 	bls.w	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80b3 	beq.w	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d10:	6093      	str	r3, [r2, #8]
 8007d12:	e0a7      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f003 0320 	and.w	r3, r3, #32
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2320      	movs	r3, #32
 8007d2e:	6093      	str	r3, [r2, #8]
 8007d30:	e098      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f040 8093 	bne.w	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4a4b      	ldr	r2, [pc, #300]	@ (8007e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d90f      	bls.n	8007d66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00a      	beq.n	8007d66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d62:	6093      	str	r3, [r2, #8]
 8007d64:	e07e      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	4413      	add	r3, r2
 8007d78:	3304      	adds	r3, #4
 8007d7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1a      	ldr	r2, [r3, #32]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	0159      	lsls	r1, r3, #5
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	440b      	add	r3, r1
 8007d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d114      	bne.n	8007dc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d109      	bne.n	8007dba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007db0:	461a      	mov	r2, r3
 8007db2:	2101      	movs	r1, #1
 8007db4:	f007 fad0 	bl	800f358 <USB_EP0_OutStart>
 8007db8:	e006      	b.n	8007dc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	441a      	add	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f010 f8e8 	bl	8017fa4 <HAL_PCD_DataOutStageCallback>
 8007dd4:	e046      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4a26      	ldr	r2, [pc, #152]	@ (8007e74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d124      	bne.n	8007e28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df4:	461a      	mov	r2, r3
 8007df6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dfa:	6093      	str	r3, [r2, #8]
 8007dfc:	e032      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f003 0320 	and.w	r3, r3, #32
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d008      	beq.n	8007e1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	015a      	lsls	r2, r3, #5
 8007e0c:	69bb      	ldr	r3, [r7, #24]
 8007e0e:	4413      	add	r3, r2
 8007e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e14:	461a      	mov	r2, r3
 8007e16:	2320      	movs	r3, #32
 8007e18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f010 f8bf 	bl	8017fa4 <HAL_PCD_DataOutStageCallback>
 8007e26:	e01d      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d114      	bne.n	8007e58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	683a      	ldr	r2, [r7, #0]
 8007e32:	4613      	mov	r3, r2
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d108      	bne.n	8007e58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e50:	461a      	mov	r2, r3
 8007e52:	2100      	movs	r1, #0
 8007e54:	f007 fa80 	bl	800f358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f010 f8a0 	bl	8017fa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	4f54300a 	.word	0x4f54300a
 8007e74:	4f54310a 	.word	0x4f54310a

08007e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	333c      	adds	r3, #60	@ 0x3c
 8007e90:	3304      	adds	r3, #4
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d90e      	bls.n	8007ecc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d009      	beq.n	8007ecc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f010 f857 	bl	8017f80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d90c      	bls.n	8007ef4 <PCD_EP_OutSetupPacket_int+0x7c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	799b      	ldrb	r3, [r3, #6]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d108      	bne.n	8007ef4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007eec:	461a      	mov	r2, r3
 8007eee:	2101      	movs	r1, #1
 8007ef0:	f007 fa32 	bl	800f358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	4f54300a 	.word	0x4f54300a

08007f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
 8007f10:	4613      	mov	r3, r2
 8007f12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f22:	883b      	ldrh	r3, [r7, #0]
 8007f24:	0419      	lsls	r1, r3, #16
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f30:	e028      	b.n	8007f84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
 8007f44:	e00d      	b.n	8007f62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	3340      	adds	r3, #64	@ 0x40
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	0c1b      	lsrs	r3, r3, #16
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	73fb      	strb	r3, [r7, #15]
 8007f62:	7bfa      	ldrb	r2, [r7, #15]
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3ec      	bcc.n	8007f46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007f6c:	883b      	ldrh	r3, [r7, #0]
 8007f6e:	0418      	lsls	r0, r3, #16
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	4302      	orrs	r2, r0
 8007f7c:	3340      	adds	r3, #64	@ 0x40
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	887a      	ldrh	r2, [r7, #2]
 8007fa4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fe2:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <HAL_PCDEx_ActivateLPM+0x44>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	10000003 	.word	0x10000003

08007ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800801c:	4b19      	ldr	r3, [pc, #100]	@ (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b04      	cmp	r3, #4
 8008026:	d00a      	beq.n	800803e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008028:	4b16      	ldr	r3, [pc, #88]	@ (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d001      	beq.n	800803a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e01f      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	e01d      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800803e:	4b11      	ldr	r3, [pc, #68]	@ (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f023 0207 	bic.w	r2, r3, #7
 8008046:	490f      	ldr	r1, [pc, #60]	@ (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4313      	orrs	r3, r2
 800804c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800804e:	f7fa fabf 	bl	80025d0 <HAL_GetTick>
 8008052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008054:	e009      	b.n	800806a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008056:	f7fa fabb 	bl	80025d0 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008064:	d901      	bls.n	800806a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e007      	b.n	800807a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800806a:	4b06      	ldr	r3, [pc, #24]	@ (8008084 <HAL_PWREx_ConfigSupply+0x70>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008076:	d1ee      	bne.n	8008056 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	58024800 	.word	0x58024800

08008088 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800808c:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	4a04      	ldr	r2, [pc, #16]	@ (80080a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008096:	60d3      	str	r3, [r2, #12]
}
 8008098:	bf00      	nop
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	58024800 	.word	0x58024800

080080a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	@ 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d102      	bne.n	80080bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	f000 bc48 	b.w	800894c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8088 	beq.w	80081da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ca:	4b99      	ldr	r3, [pc, #612]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080d4:	4b96      	ldr	r3, [pc, #600]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080dc:	2b10      	cmp	r3, #16
 80080de:	d007      	beq.n	80080f0 <HAL_RCC_OscConfig+0x48>
 80080e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e2:	2b18      	cmp	r3, #24
 80080e4:	d111      	bne.n	800810a <HAL_RCC_OscConfig+0x62>
 80080e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e8:	f003 0303 	and.w	r3, r3, #3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d10c      	bne.n	800810a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080f0:	4b8f      	ldr	r3, [pc, #572]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d06d      	beq.n	80081d8 <HAL_RCC_OscConfig+0x130>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d169      	bne.n	80081d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	f000 bc21 	b.w	800894c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008112:	d106      	bne.n	8008122 <HAL_RCC_OscConfig+0x7a>
 8008114:	4b86      	ldr	r3, [pc, #536]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a85      	ldr	r2, [pc, #532]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800811a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	e02e      	b.n	8008180 <HAL_RCC_OscConfig+0xd8>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10c      	bne.n	8008144 <HAL_RCC_OscConfig+0x9c>
 800812a:	4b81      	ldr	r3, [pc, #516]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a80      	ldr	r2, [pc, #512]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008130:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008134:	6013      	str	r3, [r2, #0]
 8008136:	4b7e      	ldr	r3, [pc, #504]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a7d      	ldr	r2, [pc, #500]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800813c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	e01d      	b.n	8008180 <HAL_RCC_OscConfig+0xd8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800814c:	d10c      	bne.n	8008168 <HAL_RCC_OscConfig+0xc0>
 800814e:	4b78      	ldr	r3, [pc, #480]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a77      	ldr	r2, [pc, #476]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008154:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	4b75      	ldr	r3, [pc, #468]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a74      	ldr	r2, [pc, #464]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e00b      	b.n	8008180 <HAL_RCC_OscConfig+0xd8>
 8008168:	4b71      	ldr	r3, [pc, #452]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a70      	ldr	r2, [pc, #448]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800816e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	4b6e      	ldr	r3, [pc, #440]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a6d      	ldr	r2, [pc, #436]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800817a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800817e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d013      	beq.n	80081b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008188:	f7fa fa22 	bl	80025d0 <HAL_GetTick>
 800818c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800818e:	e008      	b.n	80081a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008190:	f7fa fa1e 	bl	80025d0 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	2b64      	cmp	r3, #100	@ 0x64
 800819c:	d901      	bls.n	80081a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800819e:	2303      	movs	r3, #3
 80081a0:	e3d4      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081a2:	4b63      	ldr	r3, [pc, #396]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d0f0      	beq.n	8008190 <HAL_RCC_OscConfig+0xe8>
 80081ae:	e014      	b.n	80081da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b0:	f7fa fa0e 	bl	80025d0 <HAL_GetTick>
 80081b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081b6:	e008      	b.n	80081ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80081b8:	f7fa fa0a 	bl	80025d0 <HAL_GetTick>
 80081bc:	4602      	mov	r2, r0
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b64      	cmp	r3, #100	@ 0x64
 80081c4:	d901      	bls.n	80081ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e3c0      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081ca:	4b59      	ldr	r3, [pc, #356]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1f0      	bne.n	80081b8 <HAL_RCC_OscConfig+0x110>
 80081d6:	e000      	b.n	80081da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80ca 	beq.w	800837c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081e8:	4b51      	ldr	r3, [pc, #324]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d007      	beq.n	800820e <HAL_RCC_OscConfig+0x166>
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2b18      	cmp	r3, #24
 8008202:	d156      	bne.n	80082b2 <HAL_RCC_OscConfig+0x20a>
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	2b00      	cmp	r3, #0
 800820c:	d151      	bne.n	80082b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800820e:	4b48      	ldr	r3, [pc, #288]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0304 	and.w	r3, r3, #4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <HAL_RCC_OscConfig+0x17e>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e392      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008226:	4b42      	ldr	r3, [pc, #264]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f023 0219 	bic.w	r2, r3, #25
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	493f      	ldr	r1, [pc, #252]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fa f9ca 	bl	80025d0 <HAL_GetTick>
 800823c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008240:	f7fa f9c6 	bl	80025d0 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e37c      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008252:	4b37      	ldr	r3, [pc, #220]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0304 	and.w	r3, r3, #4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0f0      	beq.n	8008240 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800825e:	f7fa f9e7 	bl	8002630 <HAL_GetREVID>
 8008262:	4603      	mov	r3, r0
 8008264:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008268:	4293      	cmp	r3, r2
 800826a:	d817      	bhi.n	800829c <HAL_RCC_OscConfig+0x1f4>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	2b40      	cmp	r3, #64	@ 0x40
 8008272:	d108      	bne.n	8008286 <HAL_RCC_OscConfig+0x1de>
 8008274:	4b2e      	ldr	r3, [pc, #184]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800827c:	4a2c      	ldr	r2, [pc, #176]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800827e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008282:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008284:	e07a      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008286:	4b2a      	ldr	r3, [pc, #168]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	031b      	lsls	r3, r3, #12
 8008294:	4926      	ldr	r1, [pc, #152]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008296:	4313      	orrs	r3, r2
 8008298:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800829a:	e06f      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800829c:	4b24      	ldr	r3, [pc, #144]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	061b      	lsls	r3, r3, #24
 80082aa:	4921      	ldr	r1, [pc, #132]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80082b0:	e064      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d047      	beq.n	800834a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80082ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f023 0219 	bic.w	r2, r3, #25
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	491a      	ldr	r1, [pc, #104]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082cc:	f7fa f980 	bl	80025d0 <HAL_GetTick>
 80082d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082d2:	e008      	b.n	80082e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082d4:	f7fa f97c 	bl	80025d0 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d901      	bls.n	80082e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e332      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082e6:	4b12      	ldr	r3, [pc, #72]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082f2:	f7fa f99d 	bl	8002630 <HAL_GetREVID>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d819      	bhi.n	8008334 <HAL_RCC_OscConfig+0x28c>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	2b40      	cmp	r3, #64	@ 0x40
 8008306:	d108      	bne.n	800831a <HAL_RCC_OscConfig+0x272>
 8008308:	4b09      	ldr	r3, [pc, #36]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008310:	4a07      	ldr	r2, [pc, #28]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 8008312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008316:	6053      	str	r3, [r2, #4]
 8008318:	e030      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
 800831a:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	031b      	lsls	r3, r3, #12
 8008328:	4901      	ldr	r1, [pc, #4]	@ (8008330 <HAL_RCC_OscConfig+0x288>)
 800832a:	4313      	orrs	r3, r2
 800832c:	604b      	str	r3, [r1, #4]
 800832e:	e025      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
 8008330:	58024400 	.word	0x58024400
 8008334:	4b9a      	ldr	r3, [pc, #616]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	061b      	lsls	r3, r3, #24
 8008342:	4997      	ldr	r1, [pc, #604]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008344:	4313      	orrs	r3, r2
 8008346:	604b      	str	r3, [r1, #4]
 8008348:	e018      	b.n	800837c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800834a:	4b95      	ldr	r3, [pc, #596]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a94      	ldr	r2, [pc, #592]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008350:	f023 0301 	bic.w	r3, r3, #1
 8008354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008356:	f7fa f93b 	bl	80025d0 <HAL_GetTick>
 800835a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800835c:	e008      	b.n	8008370 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800835e:	f7fa f937 	bl	80025d0 <HAL_GetTick>
 8008362:	4602      	mov	r2, r0
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	2b02      	cmp	r3, #2
 800836a:	d901      	bls.n	8008370 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800836c:	2303      	movs	r3, #3
 800836e:	e2ed      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008370:	4b8b      	ldr	r3, [pc, #556]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f0      	bne.n	800835e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 80a9 	beq.w	80084dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838a:	4b85      	ldr	r3, [pc, #532]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008392:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008394:	4b82      	ldr	r3, [pc, #520]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d007      	beq.n	80083b0 <HAL_RCC_OscConfig+0x308>
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b18      	cmp	r3, #24
 80083a4:	d13a      	bne.n	800841c <HAL_RCC_OscConfig+0x374>
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d135      	bne.n	800841c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b0:	4b7b      	ldr	r3, [pc, #492]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <HAL_RCC_OscConfig+0x320>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	69db      	ldr	r3, [r3, #28]
 80083c0:	2b80      	cmp	r3, #128	@ 0x80
 80083c2:	d001      	beq.n	80083c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e2c1      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083c8:	f7fa f932 	bl	8002630 <HAL_GetREVID>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d817      	bhi.n	8008406 <HAL_RCC_OscConfig+0x35e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d108      	bne.n	80083f0 <HAL_RCC_OscConfig+0x348>
 80083de:	4b70      	ldr	r3, [pc, #448]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80083e6:	4a6e      	ldr	r2, [pc, #440]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ee:	e075      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083f0:	4b6b      	ldr	r3, [pc, #428]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a1b      	ldr	r3, [r3, #32]
 80083fc:	069b      	lsls	r3, r3, #26
 80083fe:	4968      	ldr	r1, [pc, #416]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008400:	4313      	orrs	r3, r2
 8008402:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008404:	e06a      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008406:	4b66      	ldr	r3, [pc, #408]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	061b      	lsls	r3, r3, #24
 8008414:	4962      	ldr	r1, [pc, #392]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008416:	4313      	orrs	r3, r2
 8008418:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800841a:	e05f      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d042      	beq.n	80084aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008424:	4b5e      	ldr	r3, [pc, #376]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a5d      	ldr	r2, [pc, #372]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800842a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800842e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fa f8ce 	bl	80025d0 <HAL_GetTick>
 8008434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008438:	f7fa f8ca 	bl	80025d0 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e280      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800844a:	4b55      	ldr	r3, [pc, #340]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f0      	beq.n	8008438 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008456:	f7fa f8eb 	bl	8002630 <HAL_GetREVID>
 800845a:	4603      	mov	r3, r0
 800845c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008460:	4293      	cmp	r3, r2
 8008462:	d817      	bhi.n	8008494 <HAL_RCC_OscConfig+0x3ec>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	2b20      	cmp	r3, #32
 800846a:	d108      	bne.n	800847e <HAL_RCC_OscConfig+0x3d6>
 800846c:	4b4c      	ldr	r3, [pc, #304]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008474:	4a4a      	ldr	r2, [pc, #296]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008476:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800847a:	6053      	str	r3, [r2, #4]
 800847c:	e02e      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
 800847e:	4b48      	ldr	r3, [pc, #288]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	069b      	lsls	r3, r3, #26
 800848c:	4944      	ldr	r1, [pc, #272]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800848e:	4313      	orrs	r3, r2
 8008490:	604b      	str	r3, [r1, #4]
 8008492:	e023      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
 8008494:	4b42      	ldr	r3, [pc, #264]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a1b      	ldr	r3, [r3, #32]
 80084a0:	061b      	lsls	r3, r3, #24
 80084a2:	493f      	ldr	r1, [pc, #252]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60cb      	str	r3, [r1, #12]
 80084a8:	e018      	b.n	80084dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80084aa:	4b3d      	ldr	r3, [pc, #244]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a3c      	ldr	r2, [pc, #240]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b6:	f7fa f88b 	bl	80025d0 <HAL_GetTick>
 80084ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80084be:	f7fa f887 	bl	80025d0 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e23d      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80084d0:	4b33      	ldr	r3, [pc, #204]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f0      	bne.n	80084be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d036      	beq.n	8008556 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d019      	beq.n	8008524 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084f0:	4b2b      	ldr	r3, [pc, #172]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f4:	4a2a      	ldr	r2, [pc, #168]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fc:	f7fa f868 	bl	80025d0 <HAL_GetTick>
 8008500:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008504:	f7fa f864 	bl	80025d0 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e21a      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008516:	4b22      	ldr	r3, [pc, #136]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800851a:	f003 0302 	and.w	r3, r3, #2
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x45c>
 8008522:	e018      	b.n	8008556 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008524:	4b1e      	ldr	r3, [pc, #120]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008528:	4a1d      	ldr	r2, [pc, #116]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800852a:	f023 0301 	bic.w	r3, r3, #1
 800852e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008530:	f7fa f84e 	bl	80025d0 <HAL_GetTick>
 8008534:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008538:	f7fa f84a 	bl	80025d0 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b02      	cmp	r3, #2
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e200      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800854a:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800854c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d039      	beq.n	80085d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d01c      	beq.n	80085a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800856a:	4b0d      	ldr	r3, [pc, #52]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a0c      	ldr	r2, [pc, #48]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008574:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008576:	f7fa f82b 	bl	80025d0 <HAL_GetTick>
 800857a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800857c:	e008      	b.n	8008590 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800857e:	f7fa f827 	bl	80025d0 <HAL_GetTick>
 8008582:	4602      	mov	r2, r0
 8008584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008586:	1ad3      	subs	r3, r2, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d901      	bls.n	8008590 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e1dd      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008590:	4b03      	ldr	r3, [pc, #12]	@ (80085a0 <HAL_RCC_OscConfig+0x4f8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d0f0      	beq.n	800857e <HAL_RCC_OscConfig+0x4d6>
 800859c:	e01b      	b.n	80085d6 <HAL_RCC_OscConfig+0x52e>
 800859e:	bf00      	nop
 80085a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80085a4:	4b9b      	ldr	r3, [pc, #620]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a9a      	ldr	r2, [pc, #616]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80085b0:	f7fa f80e 	bl	80025d0 <HAL_GetTick>
 80085b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085b6:	e008      	b.n	80085ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80085b8:	f7fa f80a 	bl	80025d0 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d901      	bls.n	80085ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e1c0      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80085ca:	4b92      	ldr	r3, [pc, #584]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f0      	bne.n	80085b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 8081 	beq.w	80086e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085e4:	4b8c      	ldr	r3, [pc, #560]	@ (8008818 <HAL_RCC_OscConfig+0x770>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a8b      	ldr	r2, [pc, #556]	@ (8008818 <HAL_RCC_OscConfig+0x770>)
 80085ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085f0:	f7f9 ffee 	bl	80025d0 <HAL_GetTick>
 80085f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085f6:	e008      	b.n	800860a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085f8:	f7f9 ffea 	bl	80025d0 <HAL_GetTick>
 80085fc:	4602      	mov	r2, r0
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b64      	cmp	r3, #100	@ 0x64
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e1a0      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800860a:	4b83      	ldr	r3, [pc, #524]	@ (8008818 <HAL_RCC_OscConfig+0x770>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f0      	beq.n	80085f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d106      	bne.n	800862c <HAL_RCC_OscConfig+0x584>
 800861e:	4b7d      	ldr	r3, [pc, #500]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008622:	4a7c      	ldr	r2, [pc, #496]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	@ 0x70
 800862a:	e02d      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10c      	bne.n	800864e <HAL_RCC_OscConfig+0x5a6>
 8008634:	4b77      	ldr	r3, [pc, #476]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008638:	4a76      	ldr	r2, [pc, #472]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800863a:	f023 0301 	bic.w	r3, r3, #1
 800863e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008640:	4b74      	ldr	r3, [pc, #464]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008644:	4a73      	ldr	r2, [pc, #460]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008646:	f023 0304 	bic.w	r3, r3, #4
 800864a:	6713      	str	r3, [r2, #112]	@ 0x70
 800864c:	e01c      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b05      	cmp	r3, #5
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x5c8>
 8008656:	4b6f      	ldr	r3, [pc, #444]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865a:	4a6e      	ldr	r2, [pc, #440]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800865c:	f043 0304 	orr.w	r3, r3, #4
 8008660:	6713      	str	r3, [r2, #112]	@ 0x70
 8008662:	4b6c      	ldr	r3, [pc, #432]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008666:	4a6b      	ldr	r2, [pc, #428]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008668:	f043 0301 	orr.w	r3, r3, #1
 800866c:	6713      	str	r3, [r2, #112]	@ 0x70
 800866e:	e00b      	b.n	8008688 <HAL_RCC_OscConfig+0x5e0>
 8008670:	4b68      	ldr	r3, [pc, #416]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008674:	4a67      	ldr	r2, [pc, #412]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008676:	f023 0301 	bic.w	r3, r3, #1
 800867a:	6713      	str	r3, [r2, #112]	@ 0x70
 800867c:	4b65      	ldr	r3, [pc, #404]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800867e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008680:	4a64      	ldr	r2, [pc, #400]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008682:	f023 0304 	bic.w	r3, r3, #4
 8008686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d015      	beq.n	80086bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008690:	f7f9 ff9e 	bl	80025d0 <HAL_GetTick>
 8008694:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008696:	e00a      	b.n	80086ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008698:	f7f9 ff9a 	bl	80025d0 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d901      	bls.n	80086ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e14e      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086ae:	4b59      	ldr	r3, [pc, #356]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0ee      	beq.n	8008698 <HAL_RCC_OscConfig+0x5f0>
 80086ba:	e014      	b.n	80086e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086bc:	f7f9 ff88 	bl	80025d0 <HAL_GetTick>
 80086c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086c2:	e00a      	b.n	80086da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086c4:	f7f9 ff84 	bl	80025d0 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d901      	bls.n	80086da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e138      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80086da:	4b4e      	ldr	r3, [pc, #312]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	f003 0302 	and.w	r3, r3, #2
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1ee      	bne.n	80086c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 812d 	beq.w	800894a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086f0:	4b48      	ldr	r3, [pc, #288]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80086f8:	2b18      	cmp	r3, #24
 80086fa:	f000 80bd 	beq.w	8008878 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008702:	2b02      	cmp	r3, #2
 8008704:	f040 809e 	bne.w	8008844 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008708:	4b42      	ldr	r3, [pc, #264]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a41      	ldr	r2, [pc, #260]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800870e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008714:	f7f9 ff5c 	bl	80025d0 <HAL_GetTick>
 8008718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800871a:	e008      	b.n	800872e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800871c:	f7f9 ff58 	bl	80025d0 <HAL_GetTick>
 8008720:	4602      	mov	r2, r0
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	2b02      	cmp	r3, #2
 8008728:	d901      	bls.n	800872e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e10e      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800872e:	4b39      	ldr	r3, [pc, #228]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f0      	bne.n	800871c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800873a:	4b36      	ldr	r3, [pc, #216]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800873c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800873e:	4b37      	ldr	r3, [pc, #220]	@ (800881c <HAL_RCC_OscConfig+0x774>)
 8008740:	4013      	ands	r3, r2
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800874a:	0112      	lsls	r2, r2, #4
 800874c:	430a      	orrs	r2, r1
 800874e:	4931      	ldr	r1, [pc, #196]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008750:	4313      	orrs	r3, r2
 8008752:	628b      	str	r3, [r1, #40]	@ 0x28
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	3b01      	subs	r3, #1
 800875a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008762:	3b01      	subs	r3, #1
 8008764:	025b      	lsls	r3, r3, #9
 8008766:	b29b      	uxth	r3, r3
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876e:	3b01      	subs	r3, #1
 8008770:	041b      	lsls	r3, r3, #16
 8008772:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877c:	3b01      	subs	r3, #1
 800877e:	061b      	lsls	r3, r3, #24
 8008780:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008784:	4923      	ldr	r1, [pc, #140]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008786:	4313      	orrs	r3, r2
 8008788:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800878a:	4b22      	ldr	r3, [pc, #136]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 800878c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878e:	4a21      	ldr	r2, [pc, #132]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008796:	4b1f      	ldr	r3, [pc, #124]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800879a:	4b21      	ldr	r3, [pc, #132]	@ (8008820 <HAL_RCC_OscConfig+0x778>)
 800879c:	4013      	ands	r3, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087a2:	00d2      	lsls	r2, r2, #3
 80087a4:	491b      	ldr	r1, [pc, #108]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80087aa:	4b1a      	ldr	r3, [pc, #104]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	f023 020c 	bic.w	r2, r3, #12
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b6:	4917      	ldr	r1, [pc, #92]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80087bc:	4b15      	ldr	r3, [pc, #84]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c0:	f023 0202 	bic.w	r2, r3, #2
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c8:	4912      	ldr	r1, [pc, #72]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80087ce:	4b11      	ldr	r3, [pc, #68]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	4a10      	ldr	r2, [pc, #64]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087da:	4b0e      	ldr	r3, [pc, #56]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087de:	4a0d      	ldr	r2, [pc, #52]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80087e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80087f2:	4b08      	ldr	r3, [pc, #32]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f6:	4a07      	ldr	r2, [pc, #28]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 80087f8:	f043 0301 	orr.w	r3, r3, #1
 80087fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087fe:	4b05      	ldr	r3, [pc, #20]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a04      	ldr	r2, [pc, #16]	@ (8008814 <HAL_RCC_OscConfig+0x76c>)
 8008804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880a:	f7f9 fee1 	bl	80025d0 <HAL_GetTick>
 800880e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008810:	e011      	b.n	8008836 <HAL_RCC_OscConfig+0x78e>
 8008812:	bf00      	nop
 8008814:	58024400 	.word	0x58024400
 8008818:	58024800 	.word	0x58024800
 800881c:	fffffc0c 	.word	0xfffffc0c
 8008820:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008824:	f7f9 fed4 	bl	80025d0 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e08a      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008836:	4b47      	ldr	r3, [pc, #284]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f0      	beq.n	8008824 <HAL_RCC_OscConfig+0x77c>
 8008842:	e082      	b.n	800894a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008844:	4b43      	ldr	r3, [pc, #268]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a42      	ldr	r2, [pc, #264]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800884a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800884e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008850:	f7f9 febe 	bl	80025d0 <HAL_GetTick>
 8008854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008856:	e008      	b.n	800886a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008858:	f7f9 feba 	bl	80025d0 <HAL_GetTick>
 800885c:	4602      	mov	r2, r0
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	1ad3      	subs	r3, r2, r3
 8008862:	2b02      	cmp	r3, #2
 8008864:	d901      	bls.n	800886a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	e070      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800886a:	4b3a      	ldr	r3, [pc, #232]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1f0      	bne.n	8008858 <HAL_RCC_OscConfig+0x7b0>
 8008876:	e068      	b.n	800894a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008878:	4b36      	ldr	r3, [pc, #216]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800887a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800887e:	4b35      	ldr	r3, [pc, #212]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008882:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	2b01      	cmp	r3, #1
 800888a:	d031      	beq.n	80088f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f003 0203 	and.w	r2, r3, #3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d12a      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d122      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d11a      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	0a5b      	lsrs	r3, r3, #9
 80088be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d111      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	0c1b      	lsrs	r3, r3, #16
 80088d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80088da:	429a      	cmp	r2, r3
 80088dc:	d108      	bne.n	80088f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	0e1b      	lsrs	r3, r3, #24
 80088e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d001      	beq.n	80088f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e02b      	b.n	800894c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80088f4:	4b17      	ldr	r3, [pc, #92]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 80088f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f8:	08db      	lsrs	r3, r3, #3
 80088fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	429a      	cmp	r2, r3
 8008908:	d01f      	beq.n	800894a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800890a:	4b12      	ldr	r3, [pc, #72]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	4a11      	ldr	r2, [pc, #68]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008916:	f7f9 fe5b 	bl	80025d0 <HAL_GetTick>
 800891a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800891c:	bf00      	nop
 800891e:	f7f9 fe57 	bl	80025d0 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	4293      	cmp	r3, r2
 8008928:	d0f9      	beq.n	800891e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800892a:	4b0a      	ldr	r3, [pc, #40]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800892c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800892e:	4b0a      	ldr	r3, [pc, #40]	@ (8008958 <HAL_RCC_OscConfig+0x8b0>)
 8008930:	4013      	ands	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008936:	00d2      	lsls	r2, r2, #3
 8008938:	4906      	ldr	r1, [pc, #24]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 800893a:	4313      	orrs	r3, r2
 800893c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800893e:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	4a04      	ldr	r2, [pc, #16]	@ (8008954 <HAL_RCC_OscConfig+0x8ac>)
 8008944:	f043 0301 	orr.w	r3, r3, #1
 8008948:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3730      	adds	r7, #48	@ 0x30
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}
 8008954:	58024400 	.word	0x58024400
 8008958:	ffff0007 	.word	0xffff0007

0800895c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e19c      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008970:	4b8a      	ldr	r3, [pc, #552]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 030f 	and.w	r3, r3, #15
 8008978:	683a      	ldr	r2, [r7, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d910      	bls.n	80089a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897e:	4b87      	ldr	r3, [pc, #540]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f023 020f 	bic.w	r2, r3, #15
 8008986:	4985      	ldr	r1, [pc, #532]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	4313      	orrs	r3, r2
 800898c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800898e:	4b83      	ldr	r3, [pc, #524]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	429a      	cmp	r2, r3
 800899a:	d001      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e184      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d010      	beq.n	80089ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	4b7b      	ldr	r3, [pc, #492]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d908      	bls.n	80089ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80089bc:	4b78      	ldr	r3, [pc, #480]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	4975      	ldr	r1, [pc, #468]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d010      	beq.n	80089fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695a      	ldr	r2, [r3, #20]
 80089de:	4b70      	ldr	r3, [pc, #448]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d908      	bls.n	80089fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80089ea:	4b6d      	ldr	r3, [pc, #436]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	496a      	ldr	r1, [pc, #424]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d010      	beq.n	8008a2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699a      	ldr	r2, [r3, #24]
 8008a0c:	4b64      	ldr	r3, [pc, #400]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	69db      	ldr	r3, [r3, #28]
 8008a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d908      	bls.n	8008a2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008a18:	4b61      	ldr	r3, [pc, #388]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	495e      	ldr	r1, [pc, #376]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a26:	4313      	orrs	r3, r2
 8008a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d010      	beq.n	8008a58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	4b59      	ldr	r3, [pc, #356]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d908      	bls.n	8008a58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008a46:	4b56      	ldr	r3, [pc, #344]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	4953      	ldr	r1, [pc, #332]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d010      	beq.n	8008a86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	4b4d      	ldr	r3, [pc, #308]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d908      	bls.n	8008a86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a74:	4b4a      	ldr	r3, [pc, #296]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	f023 020f 	bic.w	r2, r3, #15
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4947      	ldr	r1, [pc, #284]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d055      	beq.n	8008b3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008a92:	4b43      	ldr	r3, [pc, #268]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	4940      	ldr	r1, [pc, #256]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d107      	bne.n	8008abc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008aac:	4b3c      	ldr	r3, [pc, #240]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d121      	bne.n	8008afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e0f6      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b03      	cmp	r3, #3
 8008ac2:	d107      	bne.n	8008ad4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008ac4:	4b36      	ldr	r3, [pc, #216]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d115      	bne.n	8008afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e0ea      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d107      	bne.n	8008aec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008adc:	4b30      	ldr	r3, [pc, #192]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e0de      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008aec:	4b2c      	ldr	r3, [pc, #176]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e0d6      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008afc:	4b28      	ldr	r3, [pc, #160]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	f023 0207 	bic.w	r2, r3, #7
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	4925      	ldr	r1, [pc, #148]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b0e:	f7f9 fd5f 	bl	80025d0 <HAL_GetTick>
 8008b12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b14:	e00a      	b.n	8008b2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b16:	f7f9 fd5b 	bl	80025d0 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d901      	bls.n	8008b2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e0be      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d1eb      	bne.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d010      	beq.n	8008b6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 030f 	and.w	r3, r3, #15
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d208      	bcs.n	8008b6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b5a:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	f023 020f 	bic.w	r2, r3, #15
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	490e      	ldr	r1, [pc, #56]	@ (8008ba0 <HAL_RCC_ClockConfig+0x244>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	683a      	ldr	r2, [r7, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d214      	bcs.n	8008ba4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b7a:	4b08      	ldr	r3, [pc, #32]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f023 020f 	bic.w	r2, r3, #15
 8008b82:	4906      	ldr	r1, [pc, #24]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b8a:	4b04      	ldr	r3, [pc, #16]	@ (8008b9c <HAL_RCC_ClockConfig+0x240>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d005      	beq.n	8008ba4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e086      	b.n	8008caa <HAL_RCC_ClockConfig+0x34e>
 8008b9c:	52002000 	.word	0x52002000
 8008ba0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0304 	and.w	r3, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d208      	bcs.n	8008bd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008bc2:	699b      	ldr	r3, [r3, #24]
 8008bc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	4939      	ldr	r1, [pc, #228]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d010      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	4b34      	ldr	r3, [pc, #208]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d208      	bcs.n	8008c00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008bee:	4b31      	ldr	r3, [pc, #196]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	492e      	ldr	r1, [pc, #184]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d010      	beq.n	8008c2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699a      	ldr	r2, [r3, #24]
 8008c10:	4b28      	ldr	r3, [pc, #160]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d208      	bcs.n	8008c2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c1c:	4b25      	ldr	r3, [pc, #148]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	4922      	ldr	r1, [pc, #136]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d010      	beq.n	8008c5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	69da      	ldr	r2, [r3, #28]
 8008c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d208      	bcs.n	8008c5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	4917      	ldr	r1, [pc, #92]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008c5c:	f000 f834 	bl	8008cc8 <HAL_RCC_GetSysClockFreq>
 8008c60:	4602      	mov	r2, r0
 8008c62:	4b14      	ldr	r3, [pc, #80]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	0a1b      	lsrs	r3, r3, #8
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	4912      	ldr	r1, [pc, #72]	@ (8008cb8 <HAL_RCC_ClockConfig+0x35c>)
 8008c6e:	5ccb      	ldrb	r3, [r1, r3]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	fa22 f303 	lsr.w	r3, r2, r3
 8008c78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb4 <HAL_RCC_ClockConfig+0x358>)
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	4a0d      	ldr	r2, [pc, #52]	@ (8008cb8 <HAL_RCC_ClockConfig+0x35c>)
 8008c84:	5cd3      	ldrb	r3, [r2, r3]
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c90:	4a0a      	ldr	r2, [pc, #40]	@ (8008cbc <HAL_RCC_ClockConfig+0x360>)
 8008c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c94:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc0 <HAL_RCC_ClockConfig+0x364>)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc4 <HAL_RCC_ClockConfig+0x368>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7f9 fc4c 	bl	800253c <HAL_InitTick>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	08018ec0 	.word	0x08018ec0
 8008cbc:	24000004 	.word	0x24000004
 8008cc0:	24000000 	.word	0x24000000
 8008cc4:	24000008 	.word	0x24000008

08008cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b089      	sub	sp, #36	@ 0x24
 8008ccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008cce:	4bb3      	ldr	r3, [pc, #716]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cd6:	2b18      	cmp	r3, #24
 8008cd8:	f200 8155 	bhi.w	8008f86 <HAL_RCC_GetSysClockFreq+0x2be>
 8008cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce2:	bf00      	nop
 8008ce4:	08008d49 	.word	0x08008d49
 8008ce8:	08008f87 	.word	0x08008f87
 8008cec:	08008f87 	.word	0x08008f87
 8008cf0:	08008f87 	.word	0x08008f87
 8008cf4:	08008f87 	.word	0x08008f87
 8008cf8:	08008f87 	.word	0x08008f87
 8008cfc:	08008f87 	.word	0x08008f87
 8008d00:	08008f87 	.word	0x08008f87
 8008d04:	08008d6f 	.word	0x08008d6f
 8008d08:	08008f87 	.word	0x08008f87
 8008d0c:	08008f87 	.word	0x08008f87
 8008d10:	08008f87 	.word	0x08008f87
 8008d14:	08008f87 	.word	0x08008f87
 8008d18:	08008f87 	.word	0x08008f87
 8008d1c:	08008f87 	.word	0x08008f87
 8008d20:	08008f87 	.word	0x08008f87
 8008d24:	08008d75 	.word	0x08008d75
 8008d28:	08008f87 	.word	0x08008f87
 8008d2c:	08008f87 	.word	0x08008f87
 8008d30:	08008f87 	.word	0x08008f87
 8008d34:	08008f87 	.word	0x08008f87
 8008d38:	08008f87 	.word	0x08008f87
 8008d3c:	08008f87 	.word	0x08008f87
 8008d40:	08008f87 	.word	0x08008f87
 8008d44:	08008d7b 	.word	0x08008d7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d48:	4b94      	ldr	r3, [pc, #592]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0320 	and.w	r3, r3, #32
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d54:	4b91      	ldr	r3, [pc, #580]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	08db      	lsrs	r3, r3, #3
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	4a90      	ldr	r2, [pc, #576]	@ (8008fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008d66:	e111      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008d68:	4b8d      	ldr	r3, [pc, #564]	@ (8008fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d6a:	61bb      	str	r3, [r7, #24]
      break;
 8008d6c:	e10e      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008d6e:	4b8d      	ldr	r3, [pc, #564]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008d70:	61bb      	str	r3, [r7, #24]
      break;
 8008d72:	e10b      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008d74:	4b8c      	ldr	r3, [pc, #560]	@ (8008fa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008d76:	61bb      	str	r3, [r7, #24]
      break;
 8008d78:	e108      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d7a:	4b88      	ldr	r3, [pc, #544]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008d84:	4b85      	ldr	r3, [pc, #532]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d88:	091b      	lsrs	r3, r3, #4
 8008d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008d90:	4b82      	ldr	r3, [pc, #520]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d9a:	4b80      	ldr	r3, [pc, #512]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d9e:	08db      	lsrs	r3, r3, #3
 8008da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	fb02 f303 	mul.w	r3, r2, r3
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 80e1 	beq.w	8008f80 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	f000 8083 	beq.w	8008ecc <HAL_RCC_GetSysClockFreq+0x204>
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	f200 80a1 	bhi.w	8008f10 <HAL_RCC_GetSysClockFreq+0x248>
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <HAL_RCC_GetSysClockFreq+0x114>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d056      	beq.n	8008e88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008dda:	e099      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d02d      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008de8:	4b6c      	ldr	r3, [pc, #432]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	08db      	lsrs	r3, r3, #3
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	4a6b      	ldr	r2, [pc, #428]	@ (8008fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
 8008df8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	ee07 3a90 	vmov	s15, r3
 8008e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	ee07 3a90 	vmov	s15, r3
 8008e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e12:	4b62      	ldr	r3, [pc, #392]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1a:	ee07 3a90 	vmov	s15, r3
 8008e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008e42:	e087      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008fb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e56:	4b51      	ldr	r3, [pc, #324]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e86:	e065      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e9a:	4b40      	ldr	r3, [pc, #256]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea2:	ee07 3a90 	vmov	s15, r3
 8008ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ec6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008eca:	e043      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008fb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ede:	4b2f      	ldr	r3, [pc, #188]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee6:	ee07 3a90 	vmov	s15, r3
 8008eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ef2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008efe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f0e:	e021      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f22:	4b1e      	ldr	r3, [pc, #120]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f2a:	ee07 3a90 	vmov	s15, r3
 8008f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008f54:	4b11      	ldr	r3, [pc, #68]	@ (8008f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f58:	0a5b      	lsrs	r3, r3, #9
 8008f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f5e:	3301      	adds	r3, #1
 8008f60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	ee07 3a90 	vmov	s15, r3
 8008f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f78:	ee17 3a90 	vmov	r3, s15
 8008f7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008f7e:	e005      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	61bb      	str	r3, [r7, #24]
      break;
 8008f84:	e002      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008f86:	4b07      	ldr	r3, [pc, #28]	@ (8008fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008f88:	61bb      	str	r3, [r7, #24]
      break;
 8008f8a:	bf00      	nop
  }

  return sysclockfreq;
 8008f8c:	69bb      	ldr	r3, [r7, #24]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3724      	adds	r7, #36	@ 0x24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	03d09000 	.word	0x03d09000
 8008fa4:	003d0900 	.word	0x003d0900
 8008fa8:	017d7840 	.word	0x017d7840
 8008fac:	46000000 	.word	0x46000000
 8008fb0:	4c742400 	.word	0x4c742400
 8008fb4:	4a742400 	.word	0x4a742400
 8008fb8:	4bbebc20 	.word	0x4bbebc20

08008fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008fc2:	f7ff fe81 	bl	8008cc8 <HAL_RCC_GetSysClockFreq>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	4b10      	ldr	r3, [pc, #64]	@ (800900c <HAL_RCC_GetHCLKFreq+0x50>)
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	0a1b      	lsrs	r3, r3, #8
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	490f      	ldr	r1, [pc, #60]	@ (8009010 <HAL_RCC_GetHCLKFreq+0x54>)
 8008fd4:	5ccb      	ldrb	r3, [r1, r3]
 8008fd6:	f003 031f 	and.w	r3, r3, #31
 8008fda:	fa22 f303 	lsr.w	r3, r2, r3
 8008fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800900c <HAL_RCC_GetHCLKFreq+0x50>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	f003 030f 	and.w	r3, r3, #15
 8008fe8:	4a09      	ldr	r2, [pc, #36]	@ (8009010 <HAL_RCC_GetHCLKFreq+0x54>)
 8008fea:	5cd3      	ldrb	r3, [r2, r3]
 8008fec:	f003 031f 	and.w	r3, r3, #31
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff6:	4a07      	ldr	r2, [pc, #28]	@ (8009014 <HAL_RCC_GetHCLKFreq+0x58>)
 8008ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008ffa:	4a07      	ldr	r2, [pc, #28]	@ (8009018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009000:	4b04      	ldr	r3, [pc, #16]	@ (8009014 <HAL_RCC_GetHCLKFreq+0x58>)
 8009002:	681b      	ldr	r3, [r3, #0]
}
 8009004:	4618      	mov	r0, r3
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	58024400 	.word	0x58024400
 8009010:	08018ec0 	.word	0x08018ec0
 8009014:	24000004 	.word	0x24000004
 8009018:	24000000 	.word	0x24000000

0800901c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009020:	f7ff ffcc 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8009024:	4602      	mov	r2, r0
 8009026:	4b06      	ldr	r3, [pc, #24]	@ (8009040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	091b      	lsrs	r3, r3, #4
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	4904      	ldr	r1, [pc, #16]	@ (8009044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009032:	5ccb      	ldrb	r3, [r1, r3]
 8009034:	f003 031f 	and.w	r3, r3, #31
 8009038:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800903c:	4618      	mov	r0, r3
 800903e:	bd80      	pop	{r7, pc}
 8009040:	58024400 	.word	0x58024400
 8009044:	08018ec0 	.word	0x08018ec0

08009048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800904c:	f7ff ffb6 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 8009050:	4602      	mov	r2, r0
 8009052:	4b06      	ldr	r3, [pc, #24]	@ (800906c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	0a1b      	lsrs	r3, r3, #8
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	4904      	ldr	r1, [pc, #16]	@ (8009070 <HAL_RCC_GetPCLK2Freq+0x28>)
 800905e:	5ccb      	ldrb	r3, [r1, r3]
 8009060:	f003 031f 	and.w	r3, r3, #31
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009068:	4618      	mov	r0, r3
 800906a:	bd80      	pop	{r7, pc}
 800906c:	58024400 	.word	0x58024400
 8009070:	08018ec0 	.word	0x08018ec0

08009074 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009078:	b0ca      	sub	sp, #296	@ 0x128
 800907a:	af00      	add	r7, sp, #0
 800907c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009080:	2300      	movs	r3, #0
 8009082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009086:	2300      	movs	r3, #0
 8009088:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009098:	2500      	movs	r5, #0
 800909a:	ea54 0305 	orrs.w	r3, r4, r5
 800909e:	d049      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80090a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090aa:	d02f      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80090ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090b0:	d828      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090b6:	d01a      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80090b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090bc:	d822      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80090c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090c6:	d007      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80090c8:	e01c      	b.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ca:	4bb8      	ldr	r3, [pc, #736]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ce:	4ab7      	ldr	r2, [pc, #732]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090d6:	e01a      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090dc:	3308      	adds	r3, #8
 80090de:	2102      	movs	r1, #2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f002 fb61 	bl	800b7a8 <RCCEx_PLL2_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80090ec:	e00f      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f2:	3328      	adds	r3, #40	@ 0x28
 80090f4:	2102      	movs	r1, #2
 80090f6:	4618      	mov	r0, r3
 80090f8:	f002 fc08 	bl	800b90c <RCCEx_PLL3_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009102:	e004      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800910a:	e000      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800910c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800910e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009116:	4ba5      	ldr	r3, [pc, #660]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800911a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800911e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009124:	4aa1      	ldr	r2, [pc, #644]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009126:	430b      	orrs	r3, r1
 8009128:	6513      	str	r3, [r2, #80]	@ 0x50
 800912a:	e003      	b.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800912c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009140:	f04f 0900 	mov.w	r9, #0
 8009144:	ea58 0309 	orrs.w	r3, r8, r9
 8009148:	d047      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009150:	2b04      	cmp	r3, #4
 8009152:	d82a      	bhi.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009154:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915a:	bf00      	nop
 800915c:	08009171 	.word	0x08009171
 8009160:	0800917f 	.word	0x0800917f
 8009164:	08009195 	.word	0x08009195
 8009168:	080091b3 	.word	0x080091b3
 800916c:	080091b3 	.word	0x080091b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009170:	4b8e      	ldr	r3, [pc, #568]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	4a8d      	ldr	r2, [pc, #564]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800917a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800917c:	e01a      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	3308      	adds	r3, #8
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f002 fb0e 	bl	800b7a8 <RCCEx_PLL2_Config>
 800918c:	4603      	mov	r3, r0
 800918e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009192:	e00f      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009198:	3328      	adds	r3, #40	@ 0x28
 800919a:	2100      	movs	r1, #0
 800919c:	4618      	mov	r0, r3
 800919e:	f002 fbb5 	bl	800b90c <RCCEx_PLL3_Config>
 80091a2:	4603      	mov	r3, r0
 80091a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091a8:	e004      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091b0:	e000      	b.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80091b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80091bc:	4b7b      	ldr	r3, [pc, #492]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c0:	f023 0107 	bic.w	r1, r3, #7
 80091c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ca:	4a78      	ldr	r2, [pc, #480]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091cc:	430b      	orrs	r3, r1
 80091ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80091d0:	e003      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80091e6:	f04f 0b00 	mov.w	fp, #0
 80091ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80091ee:	d04c      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80091f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091fa:	d030      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80091fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009200:	d829      	bhi.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009202:	2bc0      	cmp	r3, #192	@ 0xc0
 8009204:	d02d      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009206:	2bc0      	cmp	r3, #192	@ 0xc0
 8009208:	d825      	bhi.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800920a:	2b80      	cmp	r3, #128	@ 0x80
 800920c:	d018      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800920e:	2b80      	cmp	r3, #128	@ 0x80
 8009210:	d821      	bhi.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009212:	2b00      	cmp	r3, #0
 8009214:	d002      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009216:	2b40      	cmp	r3, #64	@ 0x40
 8009218:	d007      	beq.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800921a:	e01c      	b.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800921c:	4b63      	ldr	r3, [pc, #396]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800921e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009220:	4a62      	ldr	r2, [pc, #392]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009228:	e01c      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922e:	3308      	adds	r3, #8
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f002 fab8 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009238:	4603      	mov	r3, r0
 800923a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800923e:	e011      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009244:	3328      	adds	r3, #40	@ 0x28
 8009246:	2100      	movs	r1, #0
 8009248:	4618      	mov	r0, r3
 800924a:	f002 fb5f 	bl	800b90c <RCCEx_PLL3_Config>
 800924e:	4603      	mov	r3, r0
 8009250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009254:	e006      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800925c:	e002      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10a      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800926c:	4b4f      	ldr	r3, [pc, #316]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800926e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009270:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800927a:	4a4c      	ldr	r2, [pc, #304]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800927c:	430b      	orrs	r3, r1
 800927e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009280:	e003      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800928a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009296:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800929a:	2300      	movs	r3, #0
 800929c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80092a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80092a4:	460b      	mov	r3, r1
 80092a6:	4313      	orrs	r3, r2
 80092a8:	d053      	beq.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80092aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80092b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092b6:	d035      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80092b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80092bc:	d82e      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092c2:	d031      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80092c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80092c8:	d828      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092ce:	d01a      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80092d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092d4:	d822      	bhi.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80092da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80092de:	d007      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80092e0:	e01c      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e2:	4b32      	ldr	r3, [pc, #200]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e6:	4a31      	ldr	r2, [pc, #196]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80092e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092ee:	e01c      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f4:	3308      	adds	r3, #8
 80092f6:	2100      	movs	r1, #0
 80092f8:	4618      	mov	r0, r3
 80092fa:	f002 fa55 	bl	800b7a8 <RCCEx_PLL2_Config>
 80092fe:	4603      	mov	r3, r0
 8009300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009304:	e011      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800930a:	3328      	adds	r3, #40	@ 0x28
 800930c:	2100      	movs	r1, #0
 800930e:	4618      	mov	r0, r3
 8009310:	f002 fafc 	bl	800b90c <RCCEx_PLL3_Config>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800931a:	e006      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800931c:	2301      	movs	r3, #1
 800931e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009322:	e002      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009324:	bf00      	nop
 8009326:	e000      	b.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800932a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009332:	4b1e      	ldr	r3, [pc, #120]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009336:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800933e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009342:	4a1a      	ldr	r2, [pc, #104]	@ (80093ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009344:	430b      	orrs	r3, r1
 8009346:	6593      	str	r3, [r2, #88]	@ 0x58
 8009348:	e003      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800934e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800935e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009362:	2300      	movs	r3, #0
 8009364:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009368:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800936c:	460b      	mov	r3, r1
 800936e:	4313      	orrs	r3, r2
 8009370:	d056      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009376:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800937a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800937e:	d038      	beq.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009384:	d831      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800938a:	d034      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800938c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009390:	d82b      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009396:	d01d      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800939c:	d825      	bhi.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d006      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80093a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093a6:	d00a      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80093a8:	e01f      	b.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80093aa:	bf00      	nop
 80093ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093b0:	4ba2      	ldr	r3, [pc, #648]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b4:	4aa1      	ldr	r2, [pc, #644]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093bc:	e01c      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c2:	3308      	adds	r3, #8
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f002 f9ee 	bl	800b7a8 <RCCEx_PLL2_Config>
 80093cc:	4603      	mov	r3, r0
 80093ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80093d2:	e011      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d8:	3328      	adds	r3, #40	@ 0x28
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 fa95 	bl	800b90c <RCCEx_PLL3_Config>
 80093e2:	4603      	mov	r3, r0
 80093e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80093e8:	e006      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093f0:	e002      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093f2:	bf00      	nop
 80093f4:	e000      	b.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80093f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009400:	4b8e      	ldr	r3, [pc, #568]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009404:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009410:	4a8a      	ldr	r2, [pc, #552]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009412:	430b      	orrs	r3, r1
 8009414:	6593      	str	r3, [r2, #88]	@ 0x58
 8009416:	e003      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800942c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009430:	2300      	movs	r3, #0
 8009432:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009436:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800943a:	460b      	mov	r3, r1
 800943c:	4313      	orrs	r3, r2
 800943e:	d03a      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009446:	2b30      	cmp	r3, #48	@ 0x30
 8009448:	d01f      	beq.n	800948a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800944a:	2b30      	cmp	r3, #48	@ 0x30
 800944c:	d819      	bhi.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800944e:	2b20      	cmp	r3, #32
 8009450:	d00c      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009452:	2b20      	cmp	r3, #32
 8009454:	d815      	bhi.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d019      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800945a:	2b10      	cmp	r3, #16
 800945c:	d111      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800945e:	4b77      	ldr	r3, [pc, #476]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009462:	4a76      	ldr	r2, [pc, #472]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800946a:	e011      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800946c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009470:	3308      	adds	r3, #8
 8009472:	2102      	movs	r1, #2
 8009474:	4618      	mov	r0, r3
 8009476:	f002 f997 	bl	800b7a8 <RCCEx_PLL2_Config>
 800947a:	4603      	mov	r3, r0
 800947c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009480:	e006      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009488:	e002      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800948a:	bf00      	nop
 800948c:	e000      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800948e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10a      	bne.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009498:	4b68      	ldr	r3, [pc, #416]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800949a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094a6:	4a65      	ldr	r2, [pc, #404]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094a8:	430b      	orrs	r3, r1
 80094aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094ac:	e003      	b.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80094c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80094c6:	2300      	movs	r3, #0
 80094c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80094cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4313      	orrs	r3, r2
 80094d4:	d051      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80094d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e0:	d035      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80094e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094e6:	d82e      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094ec:	d031      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80094ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80094f2:	d828      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80094f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094f8:	d01a      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80094fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094fe:	d822      	bhi.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009508:	d007      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800950a:	e01c      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950c:	4b4b      	ldr	r3, [pc, #300]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	4a4a      	ldr	r2, [pc, #296]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009518:	e01c      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951e:	3308      	adds	r3, #8
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f002 f940 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009528:	4603      	mov	r3, r0
 800952a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800952e:	e011      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009534:	3328      	adds	r3, #40	@ 0x28
 8009536:	2100      	movs	r1, #0
 8009538:	4618      	mov	r0, r3
 800953a:	f002 f9e7 	bl	800b90c <RCCEx_PLL3_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009544:	e006      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800954c:	e002      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800955c:	4b37      	ldr	r3, [pc, #220]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800955e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009560:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956a:	4a34      	ldr	r2, [pc, #208]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800956c:	430b      	orrs	r3, r1
 800956e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009570:	e003      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800957a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009582:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800958a:	2300      	movs	r3, #0
 800958c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009590:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009594:	460b      	mov	r3, r1
 8009596:	4313      	orrs	r3, r2
 8009598:	d056      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800959a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095a4:	d033      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80095a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80095aa:	d82c      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095b0:	d02f      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80095b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80095b6:	d826      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095bc:	d02b      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80095be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80095c2:	d820      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095c8:	d012      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80095ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ce:	d81a      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d022      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80095d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095d8:	d115      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095de:	3308      	adds	r3, #8
 80095e0:	2101      	movs	r1, #1
 80095e2:	4618      	mov	r0, r3
 80095e4:	f002 f8e0 	bl	800b7a8 <RCCEx_PLL2_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80095ee:	e015      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f4:	3328      	adds	r3, #40	@ 0x28
 80095f6:	2101      	movs	r1, #1
 80095f8:	4618      	mov	r0, r3
 80095fa:	f002 f987 	bl	800b90c <RCCEx_PLL3_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009604:	e00a      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800960c:	e006      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800960e:	bf00      	nop
 8009610:	e004      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800961a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800961c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10d      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009624:	4b05      	ldr	r3, [pc, #20]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009628:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009632:	4a02      	ldr	r2, [pc, #8]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009634:	430b      	orrs	r3, r1
 8009636:	6513      	str	r3, [r2, #80]	@ 0x50
 8009638:	e006      	b.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800963a:	bf00      	nop
 800963c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009644:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009650:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009658:	2300      	movs	r3, #0
 800965a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800965e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009662:	460b      	mov	r3, r1
 8009664:	4313      	orrs	r3, r2
 8009666:	d055      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009674:	d033      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800967a:	d82c      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800967c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009680:	d02f      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009686:	d826      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009688:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800968c:	d02b      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800968e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009692:	d820      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009698:	d012      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800969a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800969e:	d81a      	bhi.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d022      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80096a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096a8:	d115      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80096aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ae:	3308      	adds	r3, #8
 80096b0:	2101      	movs	r1, #1
 80096b2:	4618      	mov	r0, r3
 80096b4:	f002 f878 	bl	800b7a8 <RCCEx_PLL2_Config>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096be:	e015      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80096c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c4:	3328      	adds	r3, #40	@ 0x28
 80096c6:	2101      	movs	r1, #1
 80096c8:	4618      	mov	r0, r3
 80096ca:	f002 f91f 	bl	800b90c <RCCEx_PLL3_Config>
 80096ce:	4603      	mov	r3, r0
 80096d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80096d4:	e00a      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096dc:	e006      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096de:	bf00      	nop
 80096e0:	e004      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096e2:	bf00      	nop
 80096e4:	e002      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096e6:	bf00      	nop
 80096e8:	e000      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80096ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10b      	bne.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80096f4:	4ba3      	ldr	r3, [pc, #652]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80096fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009700:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009704:	4a9f      	ldr	r2, [pc, #636]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009706:	430b      	orrs	r3, r1
 8009708:	6593      	str	r3, [r2, #88]	@ 0x58
 800970a:	e003      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009710:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009720:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009724:	2300      	movs	r3, #0
 8009726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800972a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800972e:	460b      	mov	r3, r1
 8009730:	4313      	orrs	r3, r2
 8009732:	d037      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800973a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800973e:	d00e      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009744:	d816      	bhi.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d018      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800974a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800974e:	d111      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009750:	4b8c      	ldr	r3, [pc, #560]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009754:	4a8b      	ldr	r2, [pc, #556]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800975a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800975c:	e00f      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800975e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009762:	3308      	adds	r3, #8
 8009764:	2101      	movs	r1, #1
 8009766:	4618      	mov	r0, r3
 8009768:	f002 f81e 	bl	800b7a8 <RCCEx_PLL2_Config>
 800976c:	4603      	mov	r3, r0
 800976e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009772:	e004      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800977a:	e000      	b.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800977c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800977e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10a      	bne.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009786:	4b7f      	ldr	r3, [pc, #508]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009788:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800978a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009794:	4a7b      	ldr	r2, [pc, #492]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009796:	430b      	orrs	r3, r1
 8009798:	6513      	str	r3, [r2, #80]	@ 0x50
 800979a:	e003      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80097b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097b4:	2300      	movs	r3, #0
 80097b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80097ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80097be:	460b      	mov	r3, r1
 80097c0:	4313      	orrs	r3, r2
 80097c2:	d039      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d81c      	bhi.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009811 	.word	0x08009811
 80097d8:	080097e5 	.word	0x080097e5
 80097dc:	080097f3 	.word	0x080097f3
 80097e0:	08009811 	.word	0x08009811
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097e4:	4b67      	ldr	r3, [pc, #412]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e8:	4a66      	ldr	r2, [pc, #408]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80097f0:	e00f      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f6:	3308      	adds	r3, #8
 80097f8:	2102      	movs	r1, #2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f001 ffd4 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009800:	4603      	mov	r3, r0
 8009802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009806:	e004      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800980e:	e000      	b.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10a      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800981a:	4b5a      	ldr	r3, [pc, #360]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800981c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800981e:	f023 0103 	bic.w	r1, r3, #3
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009828:	4a56      	ldr	r2, [pc, #344]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800982a:	430b      	orrs	r3, r1
 800982c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800982e:	e003      	b.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009848:	2300      	movs	r3, #0
 800984a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800984e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009852:	460b      	mov	r3, r1
 8009854:	4313      	orrs	r3, r2
 8009856:	f000 809f 	beq.w	8009998 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800985a:	4b4b      	ldr	r3, [pc, #300]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a4a      	ldr	r2, [pc, #296]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009864:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009866:	f7f8 feb3 	bl	80025d0 <HAL_GetTick>
 800986a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800986e:	e00b      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009870:	f7f8 feae 	bl	80025d0 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	2b64      	cmp	r3, #100	@ 0x64
 800987e:	d903      	bls.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009886:	e005      	b.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009888:	4b3f      	ldr	r3, [pc, #252]	@ (8009988 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0ed      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009894:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009898:	2b00      	cmp	r3, #0
 800989a:	d179      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800989c:	4b39      	ldr	r3, [pc, #228]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800989e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80098a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098a8:	4053      	eors	r3, r2
 80098aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d015      	beq.n	80098de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80098b2:	4b34      	ldr	r3, [pc, #208]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80098be:	4b31      	ldr	r3, [pc, #196]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098c2:	4a30      	ldr	r2, [pc, #192]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80098ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ce:	4a2d      	ldr	r2, [pc, #180]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80098d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80098d6:	4a2b      	ldr	r2, [pc, #172]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80098dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ea:	d118      	bne.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ec:	f7f8 fe70 	bl	80025d0 <HAL_GetTick>
 80098f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80098f4:	e00d      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80098f6:	f7f8 fe6b 	bl	80025d0 <HAL_GetTick>
 80098fa:	4602      	mov	r2, r0
 80098fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009900:	1ad2      	subs	r2, r2, r3
 8009902:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009906:	429a      	cmp	r2, r3
 8009908:	d903      	bls.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009910:	e005      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009912:	4b1c      	ldr	r3, [pc, #112]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0eb      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800991e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009922:	2b00      	cmp	r3, #0
 8009924:	d129      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800992a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800992e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009936:	d10e      	bne.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009938:	4b12      	ldr	r3, [pc, #72]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009944:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009948:	091a      	lsrs	r2, r3, #4
 800994a:	4b10      	ldr	r3, [pc, #64]	@ (800998c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800994c:	4013      	ands	r3, r2
 800994e:	4a0d      	ldr	r2, [pc, #52]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009950:	430b      	orrs	r3, r1
 8009952:	6113      	str	r3, [r2, #16]
 8009954:	e005      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009956:	4b0b      	ldr	r3, [pc, #44]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	4a0a      	ldr	r2, [pc, #40]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800995c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009960:	6113      	str	r3, [r2, #16]
 8009962:	4b08      	ldr	r3, [pc, #32]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009964:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800996e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009972:	4a04      	ldr	r2, [pc, #16]	@ (8009984 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009974:	430b      	orrs	r3, r1
 8009976:	6713      	str	r3, [r2, #112]	@ 0x70
 8009978:	e00e      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800997a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009982:	e009      	b.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009984:	58024400 	.word	0x58024400
 8009988:	58024800 	.word	0x58024800
 800998c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f002 0301 	and.w	r3, r2, #1
 80099a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099a8:	2300      	movs	r3, #0
 80099aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f000 8089 	beq.w	8009acc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c0:	2b28      	cmp	r3, #40	@ 0x28
 80099c2:	d86b      	bhi.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80099c4:	a201      	add	r2, pc, #4	@ (adr r2, 80099cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009aa5 	.word	0x08009aa5
 80099d0:	08009a9d 	.word	0x08009a9d
 80099d4:	08009a9d 	.word	0x08009a9d
 80099d8:	08009a9d 	.word	0x08009a9d
 80099dc:	08009a9d 	.word	0x08009a9d
 80099e0:	08009a9d 	.word	0x08009a9d
 80099e4:	08009a9d 	.word	0x08009a9d
 80099e8:	08009a9d 	.word	0x08009a9d
 80099ec:	08009a71 	.word	0x08009a71
 80099f0:	08009a9d 	.word	0x08009a9d
 80099f4:	08009a9d 	.word	0x08009a9d
 80099f8:	08009a9d 	.word	0x08009a9d
 80099fc:	08009a9d 	.word	0x08009a9d
 8009a00:	08009a9d 	.word	0x08009a9d
 8009a04:	08009a9d 	.word	0x08009a9d
 8009a08:	08009a9d 	.word	0x08009a9d
 8009a0c:	08009a87 	.word	0x08009a87
 8009a10:	08009a9d 	.word	0x08009a9d
 8009a14:	08009a9d 	.word	0x08009a9d
 8009a18:	08009a9d 	.word	0x08009a9d
 8009a1c:	08009a9d 	.word	0x08009a9d
 8009a20:	08009a9d 	.word	0x08009a9d
 8009a24:	08009a9d 	.word	0x08009a9d
 8009a28:	08009a9d 	.word	0x08009a9d
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009a9d 	.word	0x08009a9d
 8009a34:	08009a9d 	.word	0x08009a9d
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009a9d 	.word	0x08009a9d
 8009a40:	08009a9d 	.word	0x08009a9d
 8009a44:	08009a9d 	.word	0x08009a9d
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009aa5 	.word	0x08009aa5
 8009a50:	08009a9d 	.word	0x08009a9d
 8009a54:	08009a9d 	.word	0x08009a9d
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009a9d 	.word	0x08009a9d
 8009a60:	08009a9d 	.word	0x08009a9d
 8009a64:	08009a9d 	.word	0x08009a9d
 8009a68:	08009a9d 	.word	0x08009a9d
 8009a6c:	08009aa5 	.word	0x08009aa5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a74:	3308      	adds	r3, #8
 8009a76:	2101      	movs	r1, #1
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 fe95 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8a:	3328      	adds	r3, #40	@ 0x28
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f001 ff3c 	bl	800b90c <RCCEx_PLL3_Config>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009a9a:	e004      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009aa2:	e000      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009aa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10a      	bne.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009aae:	4bbf      	ldr	r3, [pc, #764]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ab2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009abc:	4abb      	ldr	r2, [pc, #748]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ac2:	e003      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f002 0302 	and.w	r3, r2, #2
 8009ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009ae2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	d041      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009af2:	2b05      	cmp	r3, #5
 8009af4:	d824      	bhi.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009af6:	a201      	add	r2, pc, #4	@ (adr r2, 8009afc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009b49 	.word	0x08009b49
 8009b00:	08009b15 	.word	0x08009b15
 8009b04:	08009b2b 	.word	0x08009b2b
 8009b08:	08009b49 	.word	0x08009b49
 8009b0c:	08009b49 	.word	0x08009b49
 8009b10:	08009b49 	.word	0x08009b49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b18:	3308      	adds	r3, #8
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 fe43 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b28:	e00f      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	3328      	adds	r3, #40	@ 0x28
 8009b30:	2101      	movs	r1, #1
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 feea 	bl	800b90c <RCCEx_PLL3_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009b3e:	e004      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b40:	2301      	movs	r3, #1
 8009b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b46:	e000      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009b52:	4b96      	ldr	r3, [pc, #600]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b56:	f023 0107 	bic.w	r1, r3, #7
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b60:	4a92      	ldr	r2, [pc, #584]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b62:	430b      	orrs	r3, r1
 8009b64:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b66:	e003      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b78:	f002 0304 	and.w	r3, r2, #4
 8009b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d044      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d825      	bhi.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ba4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009bf1 	.word	0x08009bf1
 8009ba8:	08009bbd 	.word	0x08009bbd
 8009bac:	08009bd3 	.word	0x08009bd3
 8009bb0:	08009bf1 	.word	0x08009bf1
 8009bb4:	08009bf1 	.word	0x08009bf1
 8009bb8:	08009bf1 	.word	0x08009bf1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc0:	3308      	adds	r3, #8
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f001 fdef 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009bd0:	e00f      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd6:	3328      	adds	r3, #40	@ 0x28
 8009bd8:	2101      	movs	r1, #1
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f001 fe96 	bl	800b90c <RCCEx_PLL3_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009be6:	e004      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bee:	e000      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10b      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009bfa:	4b6c      	ldr	r3, [pc, #432]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bfe:	f023 0107 	bic.w	r1, r3, #7
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c0a:	4a68      	ldr	r2, [pc, #416]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f002 0320 	and.w	r3, r2, #32
 8009c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c34:	460b      	mov	r3, r1
 8009c36:	4313      	orrs	r3, r2
 8009c38:	d055      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c46:	d033      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c4c:	d82c      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c52:	d02f      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c58:	d826      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c5e:	d02b      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009c60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009c64:	d820      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c6a:	d012      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c70:	d81a      	bhi.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d022      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c7a:	d115      	bne.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c80:	3308      	adds	r3, #8
 8009c82:	2100      	movs	r1, #0
 8009c84:	4618      	mov	r0, r3
 8009c86:	f001 fd8f 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009c90:	e015      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c96:	3328      	adds	r3, #40	@ 0x28
 8009c98:	2102      	movs	r1, #2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fe36 	bl	800b90c <RCCEx_PLL3_Config>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009ca6:	e00a      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cae:	e006      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cb0:	bf00      	nop
 8009cb2:	e004      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cb4:	bf00      	nop
 8009cb6:	e002      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cb8:	bf00      	nop
 8009cba:	e000      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cc6:	4b39      	ldr	r3, [pc, #228]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd6:	4a35      	ldr	r2, [pc, #212]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6553      	str	r3, [r2, #84]	@ 0x54
 8009cdc:	e003      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009cfc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009d00:	460b      	mov	r3, r1
 8009d02:	4313      	orrs	r3, r2
 8009d04:	d058      	beq.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d12:	d033      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009d14:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009d18:	d82c      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d1e:	d02f      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d24:	d826      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d2a:	d02b      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009d30:	d820      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d36:	d012      	beq.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d3c:	d81a      	bhi.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d022      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d46:	d115      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 fd29 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d5c:	e015      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d62:	3328      	adds	r3, #40	@ 0x28
 8009d64:	2102      	movs	r1, #2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 fdd0 	bl	800b90c <RCCEx_PLL3_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009d72:	e00a      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d7a:	e006      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d7c:	bf00      	nop
 8009d7e:	e004      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d80:	bf00      	nop
 8009d82:	e002      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d84:	bf00      	nop
 8009d86:	e000      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10e      	bne.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009d92:	4b06      	ldr	r3, [pc, #24]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d96:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009da2:	4a02      	ldr	r2, [pc, #8]	@ (8009dac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009da4:	430b      	orrs	r3, r1
 8009da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009da8:	e006      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009daa:	bf00      	nop
 8009dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009dc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	d055      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009de0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009de4:	d033      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009de6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009dea:	d82c      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009df0:	d02f      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009df2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009df6:	d826      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009df8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009dfc:	d02b      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009dfe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009e02:	d820      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e08:	d012      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e0e:	d81a      	bhi.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d022      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e18:	d115      	bne.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1e:	3308      	adds	r3, #8
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fcc0 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e2e:	e015      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e34:	3328      	adds	r3, #40	@ 0x28
 8009e36:	2102      	movs	r1, #2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f001 fd67 	bl	800b90c <RCCEx_PLL3_Config>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009e44:	e00a      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e4c:	e006      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e4e:	bf00      	nop
 8009e50:	e004      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e52:	bf00      	nop
 8009e54:	e002      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e56:	bf00      	nop
 8009e58:	e000      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e64:	4ba1      	ldr	r3, [pc, #644]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e68:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e74:	4a9d      	ldr	r2, [pc, #628]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e76:	430b      	orrs	r3, r1
 8009e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e7a:	e003      	b.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	f002 0308 	and.w	r3, r2, #8
 8009e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e94:	2300      	movs	r3, #0
 8009e96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e9a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	d01e      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eb0:	d10c      	bne.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eb6:	3328      	adds	r3, #40	@ 0x28
 8009eb8:	2102      	movs	r1, #2
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fd26 	bl	800b90c <RCCEx_PLL3_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d002      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009ecc:	4b87      	ldr	r3, [pc, #540]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ed0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009edc:	4a83      	ldr	r2, [pc, #524]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eea:	f002 0310 	and.w	r3, r2, #16
 8009eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ef8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009efc:	460b      	mov	r3, r1
 8009efe:	4313      	orrs	r3, r2
 8009f00:	d01e      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f0e:	d10c      	bne.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f14:	3328      	adds	r3, #40	@ 0x28
 8009f16:	2102      	movs	r1, #2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 fcf7 	bl	800b90c <RCCEx_PLL3_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009f2a:	4b70      	ldr	r3, [pc, #448]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f3a:	4a6c      	ldr	r2, [pc, #432]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009f4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f50:	2300      	movs	r3, #0
 8009f52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	d03e      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f6c:	d022      	beq.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009f6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f72:	d81b      	bhi.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f7c:	d00b      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009f7e:	e015      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f84:	3308      	adds	r3, #8
 8009f86:	2100      	movs	r1, #0
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f001 fc0d 	bl	800b7a8 <RCCEx_PLL2_Config>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009f94:	e00f      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9a:	3328      	adds	r3, #40	@ 0x28
 8009f9c:	2102      	movs	r1, #2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 fcb4 	bl	800b90c <RCCEx_PLL3_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009faa:	e004      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb2:	e000      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009fbe:	4b4b      	ldr	r3, [pc, #300]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fc2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009fce:	4a47      	ldr	r2, [pc, #284]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd0:	430b      	orrs	r3, r1
 8009fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8009fd4:	e003      	b.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009fea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009fec:	2300      	movs	r3, #0
 8009fee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ff0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	d03b      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a002:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a006:	d01f      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a008:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a00c:	d818      	bhi.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a00e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a012:	d003      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a018:	d007      	beq.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a01a:	e011      	b.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a01c:	4b33      	ldr	r3, [pc, #204]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a020:	4a32      	ldr	r2, [pc, #200]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a028:	e00f      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a02e:	3328      	adds	r3, #40	@ 0x28
 800a030:	2101      	movs	r1, #1
 800a032:	4618      	mov	r0, r3
 800a034:	f001 fc6a 	bl	800b90c <RCCEx_PLL3_Config>
 800a038:	4603      	mov	r3, r0
 800a03a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a03e:	e004      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a046:	e000      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a04a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a052:	4b26      	ldr	r3, [pc, #152]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a056:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a062:	4a22      	ldr	r2, [pc, #136]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a064:	430b      	orrs	r3, r1
 800a066:	6553      	str	r3, [r2, #84]	@ 0x54
 800a068:	e003      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a06a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a06e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a07a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a07e:	673b      	str	r3, [r7, #112]	@ 0x70
 800a080:	2300      	movs	r3, #0
 800a082:	677b      	str	r3, [r7, #116]	@ 0x74
 800a084:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a088:	460b      	mov	r3, r1
 800a08a:	4313      	orrs	r3, r2
 800a08c:	d034      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a09c:	d007      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a09e:	e011      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a0:	4b12      	ldr	r3, [pc, #72]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a4:	4a11      	ldr	r2, [pc, #68]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0ac:	e00e      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	2102      	movs	r1, #2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fb76 	bl	800b7a8 <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a0c2:	e003      	b.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a0ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10d      	bne.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a0d4:	4b05      	ldr	r3, [pc, #20]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0e2:	4a02      	ldr	r2, [pc, #8]	@ (800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a0e4:	430b      	orrs	r3, r1
 800a0e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a0e8:	e006      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a0ea:	bf00      	nop
 800a0ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a0f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a104:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a106:	2300      	movs	r3, #0
 800a108:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a10a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a10e:	460b      	mov	r3, r1
 800a110:	4313      	orrs	r3, r2
 800a112:	d00c      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a118:	3328      	adds	r3, #40	@ 0x28
 800a11a:	2102      	movs	r1, #2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 fbf5 	bl	800b90c <RCCEx_PLL3_Config>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a12e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a136:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a13a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a13c:	2300      	movs	r3, #0
 800a13e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a140:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a144:	460b      	mov	r3, r1
 800a146:	4313      	orrs	r3, r2
 800a148:	d038      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a156:	d018      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a15c:	d811      	bhi.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a15e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a162:	d014      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a168:	d80b      	bhi.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a172:	d106      	bne.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a174:	4bc3      	ldr	r3, [pc, #780]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a178:	4ac2      	ldr	r2, [pc, #776]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a17a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a17e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a180:	e008      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a188:	e004      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a18a:	bf00      	nop
 800a18c:	e002      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a18e:	bf00      	nop
 800a190:	e000      	b.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a192:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a19c:	4bb9      	ldr	r3, [pc, #740]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1ac:	4ab5      	ldr	r2, [pc, #724]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	6553      	str	r3, [r2, #84]	@ 0x54
 800a1b2:	e003      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a1c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	d009      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a1d8:	4baa      	ldr	r3, [pc, #680]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1e6:	4aa7      	ldr	r2, [pc, #668]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a1f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a202:	460b      	mov	r3, r1
 800a204:	4313      	orrs	r3, r2
 800a206:	d00a      	beq.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a208:	4b9e      	ldr	r3, [pc, #632]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a214:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a218:	4a9a      	ldr	r2, [pc, #616]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a21a:	430b      	orrs	r3, r1
 800a21c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a22a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a22c:	2300      	movs	r3, #0
 800a22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a230:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a234:	460b      	mov	r3, r1
 800a236:	4313      	orrs	r3, r2
 800a238:	d009      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a23a:	4b92      	ldr	r3, [pc, #584]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a23c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a23e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a248:	4a8e      	ldr	r2, [pc, #568]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a24a:	430b      	orrs	r3, r1
 800a24c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a24e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a25a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a25c:	2300      	movs	r3, #0
 800a25e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a260:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a264:	460b      	mov	r3, r1
 800a266:	4313      	orrs	r3, r2
 800a268:	d00e      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a26a:	4b86      	ldr	r3, [pc, #536]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	4a85      	ldr	r2, [pc, #532]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a270:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a274:	6113      	str	r3, [r2, #16]
 800a276:	4b83      	ldr	r3, [pc, #524]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a278:	6919      	ldr	r1, [r3, #16]
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a282:	4a80      	ldr	r2, [pc, #512]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a284:	430b      	orrs	r3, r1
 800a286:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a294:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a296:	2300      	movs	r3, #0
 800a298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a29a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	d009      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a2a4:	4b77      	ldr	r3, [pc, #476]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b2:	4a74      	ldr	r2, [pc, #464]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a2c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	d00a      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2d4:	4b6b      	ldr	r3, [pc, #428]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a2e4:	4a67      	ldr	r2, [pc, #412]	@ (800a484 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a300:	460b      	mov	r3, r1
 800a302:	4313      	orrs	r3, r2
 800a304:	d011      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a30a:	3308      	adds	r3, #8
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 fa4a 	bl	800b7a8 <RCCEx_PLL2_Config>
 800a314:	4603      	mov	r3, r0
 800a316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a31a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a332:	2100      	movs	r1, #0
 800a334:	6239      	str	r1, [r7, #32]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a33c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a340:	460b      	mov	r3, r1
 800a342:	4313      	orrs	r3, r2
 800a344:	d011      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a34a:	3308      	adds	r3, #8
 800a34c:	2101      	movs	r1, #1
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 fa2a 	bl	800b7a8 <RCCEx_PLL2_Config>
 800a354:	4603      	mov	r3, r0
 800a356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a35a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d003      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a36a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	2100      	movs	r1, #0
 800a374:	61b9      	str	r1, [r7, #24]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	61fb      	str	r3, [r7, #28]
 800a37c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a380:	460b      	mov	r3, r1
 800a382:	4313      	orrs	r3, r2
 800a384:	d011      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a38a:	3308      	adds	r3, #8
 800a38c:	2102      	movs	r1, #2
 800a38e:	4618      	mov	r0, r3
 800a390:	f001 fa0a 	bl	800b7a8 <RCCEx_PLL2_Config>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a39a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6139      	str	r1, [r7, #16]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a3c0:	460b      	mov	r3, r1
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	d011      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ca:	3328      	adds	r3, #40	@ 0x28
 800a3cc:	2100      	movs	r1, #0
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 fa9c 	bl	800b90c <RCCEx_PLL3_Config>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a3da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d003      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	f003 0310 	and.w	r3, r3, #16
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a400:	460b      	mov	r3, r1
 800a402:	4313      	orrs	r3, r2
 800a404:	d011      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a40a:	3328      	adds	r3, #40	@ 0x28
 800a40c:	2101      	movs	r1, #1
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 fa7c 	bl	800b90c <RCCEx_PLL3_Config>
 800a414:	4603      	mov	r3, r0
 800a416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a41a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a426:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	2100      	movs	r1, #0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	607b      	str	r3, [r7, #4]
 800a43c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a440:	460b      	mov	r3, r1
 800a442:	4313      	orrs	r3, r2
 800a444:	d011      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a44a:	3328      	adds	r3, #40	@ 0x28
 800a44c:	2102      	movs	r1, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 fa5c 	bl	800b90c <RCCEx_PLL3_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a45a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d003      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a46a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	e000      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
}
 800a478:	4618      	mov	r0, r3
 800a47a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a47e:	46bd      	mov	sp, r7
 800a480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a484:	58024400 	.word	0x58024400

0800a488 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b090      	sub	sp, #64	@ 0x40
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a492:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a496:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a49a:	430b      	orrs	r3, r1
 800a49c:	f040 8094 	bne.w	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a4a0:	4b9e      	ldr	r3, [pc, #632]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4a4:	f003 0307 	and.w	r3, r3, #7
 800a4a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	f200 8087 	bhi.w	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4cd 	.word	0x0800a4cd
 800a4bc:	0800a4f5 	.word	0x0800a4f5
 800a4c0:	0800a51d 	.word	0x0800a51d
 800a4c4:	0800a5b9 	.word	0x0800a5b9
 800a4c8:	0800a545 	.word	0x0800a545
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4cc:	4b93      	ldr	r3, [pc, #588]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4d8:	d108      	bne.n	800a4ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f001 f810 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e8:	f000 bd45 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	f000 bd41 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4f4:	4b89      	ldr	r3, [pc, #548]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a500:	d108      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a502:	f107 0318 	add.w	r3, r7, #24
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fd54 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a510:	f000 bd31 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a518:	f000 bd2d 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a51c:	4b7f      	ldr	r3, [pc, #508]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a528:	d108      	bne.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fe94 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a538:	f000 bd1d 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	f000 bd19 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a544:	4b75      	ldr	r3, [pc, #468]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a548:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a54e:	4b73      	ldr	r3, [pc, #460]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0304 	and.w	r3, r3, #4
 800a556:	2b04      	cmp	r3, #4
 800a558:	d10c      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a560:	4b6e      	ldr	r3, [pc, #440]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	08db      	lsrs	r3, r3, #3
 800a566:	f003 0303 	and.w	r3, r3, #3
 800a56a:	4a6d      	ldr	r2, [pc, #436]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a56c:	fa22 f303 	lsr.w	r3, r2, r3
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a572:	e01f      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a574:	4b69      	ldr	r3, [pc, #420]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a57c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a580:	d106      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a588:	d102      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a58a:	4b66      	ldr	r3, [pc, #408]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58e:	e011      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a590:	4b62      	ldr	r3, [pc, #392]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a598:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a59e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5a4:	d102      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5a6:	4b60      	ldr	r3, [pc, #384]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5aa:	e003      	b.n	800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a5b0:	f000 bce1 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b4:	f000 bcdf 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5b8:	4b5c      	ldr	r3, [pc, #368]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	f000 bcdb 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5c4:	f000 bcd7 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a5c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	f040 80ad 	bne.w	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a5d6:	4b51      	ldr	r3, [pc, #324]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a5de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e6:	d056      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ee:	f200 8090 	bhi.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5f6:	f000 8088 	beq.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5fe:	f200 8088 	bhi.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	2b80      	cmp	r3, #128	@ 0x80
 800a606:	d032      	beq.n	800a66e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60a:	2b80      	cmp	r3, #128	@ 0x80
 800a60c:	f200 8081 	bhi.w	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a618:	2b40      	cmp	r3, #64	@ 0x40
 800a61a:	d014      	beq.n	800a646 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a61c:	e079      	b.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61e:	4b3f      	ldr	r3, [pc, #252]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a62a:	d108      	bne.n	800a63e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a630:	4618      	mov	r0, r3
 800a632:	f000 ff67 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63a:	f000 bc9c 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a642:	f000 bc98 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a646:	4b35      	ldr	r3, [pc, #212]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a64e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a652:	d108      	bne.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a654:	f107 0318 	add.w	r3, r7, #24
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fcab 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a662:	f000 bc88 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a66a:	f000 bc84 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a66e:	4b2b      	ldr	r3, [pc, #172]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a67a:	d108      	bne.n	800a68e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4618      	mov	r0, r3
 800a682:	f000 fdeb 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68a:	f000 bc74 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a692:	f000 bc70 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a696:	4b21      	ldr	r3, [pc, #132]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a69a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d10c      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	4a18      	ldr	r2, [pc, #96]	@ (800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a6be:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c4:	e01f      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c6:	4b15      	ldr	r3, [pc, #84]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6d2:	d106      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6da:	d102      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6dc:	4b11      	ldr	r3, [pc, #68]	@ (800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e0:	e011      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6ee:	d106      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6f6:	d102      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6f8:	4b0b      	ldr	r3, [pc, #44]	@ (800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6fc:	e003      	b.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a702:	f000 bc38 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a706:	f000 bc36 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a70a:	4b08      	ldr	r3, [pc, #32]	@ (800a72c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a70e:	f000 bc32 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a716:	f000 bc2e 	b.w	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a71a:	bf00      	nop
 800a71c:	58024400 	.word	0x58024400
 800a720:	03d09000 	.word	0x03d09000
 800a724:	003d0900 	.word	0x003d0900
 800a728:	017d7840 	.word	0x017d7840
 800a72c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a734:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a738:	430b      	orrs	r3, r1
 800a73a:	f040 809c 	bne.w	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a73e:	4b9e      	ldr	r3, [pc, #632]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a742:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a746:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a74e:	d054      	beq.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a752:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a756:	f200 808b 	bhi.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a760:	f000 8083 	beq.w	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a76a:	f200 8081 	bhi.w	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a770:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a774:	d02f      	beq.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a77c:	d878      	bhi.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a78a:	d012      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a78c:	e070      	b.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a78e:	4b8a      	ldr	r3, [pc, #552]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a79a:	d107      	bne.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a79c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 feaf 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7aa:	e3e4      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b0:	e3e1      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7b2:	4b81      	ldr	r3, [pc, #516]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c0:	f107 0318 	add.w	r3, r7, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fbf5 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7ca:	69bb      	ldr	r3, [r7, #24]
 800a7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ce:	e3d2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d4:	e3cf      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7d6:	4b78      	ldr	r3, [pc, #480]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7e2:	d107      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7e4:	f107 030c 	add.w	r3, r7, #12
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fd37 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f2:	e3c0      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f8:	e3bd      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7fa:	4b6f      	ldr	r3, [pc, #444]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a802:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a804:	4b6c      	ldr	r3, [pc, #432]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d10c      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a812:	2b00      	cmp	r3, #0
 800a814:	d109      	bne.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a816:	4b68      	ldr	r3, [pc, #416]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	08db      	lsrs	r3, r3, #3
 800a81c:	f003 0303 	and.w	r3, r3, #3
 800a820:	4a66      	ldr	r2, [pc, #408]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a822:	fa22 f303 	lsr.w	r3, r2, r3
 800a826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a828:	e01e      	b.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a82a:	4b63      	ldr	r3, [pc, #396]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a832:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a836:	d106      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a83a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a83e:	d102      	bne.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a840:	4b5f      	ldr	r3, [pc, #380]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a844:	e010      	b.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a846:	4b5c      	ldr	r3, [pc, #368]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a84e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a852:	d106      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85a:	d102      	bne.n	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a85c:	4b59      	ldr	r3, [pc, #356]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a860:	e002      	b.n	800a868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a866:	e386      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a868:	e385      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a86a:	4b57      	ldr	r3, [pc, #348]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86e:	e382      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a874:	e37f      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a87a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a87e:	430b      	orrs	r3, r1
 800a880:	f040 80a7 	bne.w	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a884:	4b4c      	ldr	r3, [pc, #304]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a888:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a88c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a894:	d055      	beq.n	800a942 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a89c:	f200 8096 	bhi.w	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8a6:	f000 8084 	beq.w	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a8b0:	f200 808c 	bhi.w	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ba:	d030      	beq.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8c2:	f200 8083 	bhi.w	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d004      	beq.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8d2:	d012      	beq.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a8d4:	e07a      	b.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8d6:	4b38      	ldr	r3, [pc, #224]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f000 fe0b 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f2:	e340      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f8:	e33d      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8fa:	4b2f      	ldr	r3, [pc, #188]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a902:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a906:	d107      	bne.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a908:	f107 0318 	add.w	r3, r7, #24
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fb51 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a916:	e32e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a918:	2300      	movs	r3, #0
 800a91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a91c:	e32b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a91e:	4b26      	ldr	r3, [pc, #152]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a92a:	d107      	bne.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a92c:	f107 030c 	add.w	r3, r7, #12
 800a930:	4618      	mov	r0, r3
 800a932:	f000 fc93 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a93a:	e31c      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a940:	e319      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a942:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a946:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a94c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b04      	cmp	r3, #4
 800a956:	d10c      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d109      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a95e:	4b16      	ldr	r3, [pc, #88]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	08db      	lsrs	r3, r3, #3
 800a964:	f003 0303 	and.w	r3, r3, #3
 800a968:	4a14      	ldr	r2, [pc, #80]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a96a:	fa22 f303 	lsr.w	r3, r2, r3
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a970:	e01e      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a972:	4b11      	ldr	r3, [pc, #68]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a97a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97e:	d106      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a982:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a986:	d102      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a988:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a98c:	e010      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a98e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a99a:	d106      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9a2:	d102      	bne.n	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a9a4:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9a8:	e002      	b.n	800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a9ae:	e2e2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9b0:	e2e1      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a9b2:	4b05      	ldr	r3, [pc, #20]	@ (800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a9b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9b6:	e2de      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a9b8:	58024400 	.word	0x58024400
 800a9bc:	03d09000 	.word	0x03d09000
 800a9c0:	003d0900 	.word	0x003d0900
 800a9c4:	017d7840 	.word	0x017d7840
 800a9c8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d0:	e2d1      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9d6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a9da:	430b      	orrs	r3, r1
 800a9dc:	f040 809c 	bne.w	800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a9e0:	4b93      	ldr	r3, [pc, #588]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9e4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a9e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9f0:	d054      	beq.n	800aa9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a9f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9f8:	f200 808b 	bhi.w	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa02:	f000 8083 	beq.w	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa0c:	f200 8081 	bhi.w	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa16:	d02f      	beq.n	800aa78 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1e:	d878      	bhi.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800aa20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2c:	d012      	beq.n	800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800aa2e:	e070      	b.n	800ab12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa30:	4b7f      	ldr	r3, [pc, #508]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa3c:	d107      	bne.n	800aa4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 fd5e 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa4c:	e293      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa52:	e290      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa54:	4b76      	ldr	r3, [pc, #472]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa60:	d107      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa62:	f107 0318 	add.w	r3, r7, #24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 faa4 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa70:	e281      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa76:	e27e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa78:	4b6d      	ldr	r3, [pc, #436]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa84:	d107      	bne.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa86:	f107 030c 	add.w	r3, r7, #12
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f000 fbe6 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa94:	e26f      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa96:	2300      	movs	r3, #0
 800aa98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9a:	e26c      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa9c:	4b64      	ldr	r3, [pc, #400]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aaa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aaa6:	4b62      	ldr	r3, [pc, #392]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d10c      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800aab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d109      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aab8:	4b5d      	ldr	r3, [pc, #372]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	08db      	lsrs	r3, r3, #3
 800aabe:	f003 0303 	and.w	r3, r3, #3
 800aac2:	4a5c      	ldr	r2, [pc, #368]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaca:	e01e      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aacc:	4b58      	ldr	r3, [pc, #352]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad8:	d106      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aadc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aae0:	d102      	bne.n	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aae2:	4b55      	ldr	r3, [pc, #340]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aae6:	e010      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aae8:	4b51      	ldr	r3, [pc, #324]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf4:	d106      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aaf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aafc:	d102      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aafe:	4b4f      	ldr	r3, [pc, #316]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab02:	e002      	b.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab08:	e235      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab0a:	e234      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab0c:	4b4c      	ldr	r3, [pc, #304]	@ (800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ab0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab10:	e231      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab12:	2300      	movs	r3, #0
 800ab14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab16:	e22e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ab18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ab20:	430b      	orrs	r3, r1
 800ab22:	f040 808f 	bne.w	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ab26:	4b42      	ldr	r3, [pc, #264]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab2a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab36:	d06b      	beq.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab3e:	d874      	bhi.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab46:	d056      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ab4e:	d86c      	bhi.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab56:	d03b      	beq.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ab5e:	d864      	bhi.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab66:	d021      	beq.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ab68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab6e:	d85c      	bhi.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d004      	beq.n	800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab7c:	d004      	beq.n	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ab7e:	e054      	b.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ab80:	f7fe fa4c 	bl	800901c <HAL_RCC_GetPCLK1Freq>
 800ab84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ab86:	e1f6      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab88:	4b29      	ldr	r3, [pc, #164]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab94:	d107      	bne.n	800aba6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab96:	f107 0318 	add.w	r3, r7, #24
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f000 fa0a 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba4:	e1e7      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aba6:	2300      	movs	r3, #0
 800aba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abaa:	e1e4      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abac:	4b20      	ldr	r3, [pc, #128]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800abb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb8:	d107      	bne.n	800abca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abba:	f107 030c 	add.w	r3, r7, #12
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 fb4c 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc8:	e1d5      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abce:	e1d2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abd0:	4b17      	ldr	r3, [pc, #92]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d109      	bne.n	800abf0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abdc:	4b14      	ldr	r3, [pc, #80]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	08db      	lsrs	r3, r3, #3
 800abe2:	f003 0303 	and.w	r3, r3, #3
 800abe6:	4a13      	ldr	r2, [pc, #76]	@ (800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800abe8:	fa22 f303 	lsr.w	r3, r2, r3
 800abec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abee:	e1c2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abf4:	e1bf      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abf6:	4b0e      	ldr	r3, [pc, #56]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac02:	d102      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ac04:	4b0c      	ldr	r3, [pc, #48]	@ (800ac38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ac06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac08:	e1b5      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac0e:	e1b2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac10:	4b07      	ldr	r3, [pc, #28]	@ (800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac1c:	d102      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ac1e:	4b07      	ldr	r3, [pc, #28]	@ (800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ac20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac22:	e1a8      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac28:	e1a5      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac2e:	e1a2      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac30:	58024400 	.word	0x58024400
 800ac34:	03d09000 	.word	0x03d09000
 800ac38:	003d0900 	.word	0x003d0900
 800ac3c:	017d7840 	.word	0x017d7840
 800ac40:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ac44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac48:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ac4c:	430b      	orrs	r3, r1
 800ac4e:	d173      	bne.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ac50:	4b9c      	ldr	r3, [pc, #624]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ac58:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac60:	d02f      	beq.n	800acc2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ac62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac68:	d863      	bhi.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ac70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac76:	d012      	beq.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ac78:	e05b      	b.n	800ad32 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac7a:	4b92      	ldr	r3, [pc, #584]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac86:	d107      	bne.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac88:	f107 0318 	add.w	r3, r7, #24
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 f991 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac96:	e16e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac9c:	e16b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac9e:	4b89      	ldr	r3, [pc, #548]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acaa:	d107      	bne.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acac:	f107 030c 	add.w	r3, r7, #12
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 fad3 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acba:	e15c      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc0:	e159      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acc2:	4b80      	ldr	r3, [pc, #512]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800acc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800accc:	4b7d      	ldr	r3, [pc, #500]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d10c      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800acd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acde:	4b79      	ldr	r3, [pc, #484]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	08db      	lsrs	r3, r3, #3
 800ace4:	f003 0303 	and.w	r3, r3, #3
 800ace8:	4a77      	ldr	r2, [pc, #476]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800acea:	fa22 f303 	lsr.w	r3, r2, r3
 800acee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acf0:	e01e      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800acf2:	4b74      	ldr	r3, [pc, #464]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acfe:	d106      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ad00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad06:	d102      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad08:	4b70      	ldr	r3, [pc, #448]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ad0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad0c:	e010      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad0e:	4b6d      	ldr	r3, [pc, #436]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad1a:	d106      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ad1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad22:	d102      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad24:	4b6a      	ldr	r3, [pc, #424]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad28:	e002      	b.n	800ad30 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ad2e:	e122      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad30:	e121      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad36:	e11e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad3c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ad40:	430b      	orrs	r3, r1
 800ad42:	d133      	bne.n	800adac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad44:	4b5f      	ldr	r3, [pc, #380]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad4c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d004      	beq.n	800ad5e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ad54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad5a:	d012      	beq.n	800ad82 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ad5c:	e023      	b.n	800ada6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad5e:	4b59      	ldr	r3, [pc, #356]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad6a:	d107      	bne.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad70:	4618      	mov	r0, r3
 800ad72:	f000 fbc7 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad7a:	e0fc      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad80:	e0f9      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad82:	4b50      	ldr	r3, [pc, #320]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad8e:	d107      	bne.n	800ada0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad90:	f107 0318 	add.w	r3, r7, #24
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f90d 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9e:	e0ea      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ada0:	2300      	movs	r3, #0
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada4:	e0e7      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adaa:	e0e4      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800adac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800adb0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800adb4:	430b      	orrs	r3, r1
 800adb6:	f040 808d 	bne.w	800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800adba:	4b42      	ldr	r3, [pc, #264]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adbe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800adc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adca:	d06b      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800adcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800add2:	d874      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adda:	d056      	beq.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800addc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade2:	d86c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adea:	d03b      	beq.n	800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800adec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adf2:	d864      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800adfa:	d021      	beq.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800adfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae02:	d85c      	bhi.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ae04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ae0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae10:	d004      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ae12:	e054      	b.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ae14:	f000 f8b8 	bl	800af88 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae18:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae1a:	e0ac      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae1c:	4b29      	ldr	r3, [pc, #164]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae28:	d107      	bne.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2a:	f107 0318 	add.w	r3, r7, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 f8c0 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae38:	e09d      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3e:	e09a      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae40:	4b20      	ldr	r3, [pc, #128]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae4c:	d107      	bne.n	800ae5e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae4e:	f107 030c 	add.w	r3, r7, #12
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fa02 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae5c:	e08b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae62:	e088      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae64:	4b17      	ldr	r3, [pc, #92]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b04      	cmp	r3, #4
 800ae6e:	d109      	bne.n	800ae84 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae70:	4b14      	ldr	r3, [pc, #80]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	08db      	lsrs	r3, r3, #3
 800ae76:	f003 0303 	and.w	r3, r3, #3
 800ae7a:	4a13      	ldr	r2, [pc, #76]	@ (800aec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ae7c:	fa22 f303 	lsr.w	r3, r2, r3
 800ae80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae82:	e078      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae88:	e075      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ae8a:	4b0e      	ldr	r3, [pc, #56]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae96:	d102      	bne.n	800ae9e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ae98:	4b0c      	ldr	r3, [pc, #48]	@ (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ae9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae9c:	e06b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aea2:	e068      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aea4:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aeac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aeb0:	d102      	bne.n	800aeb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800aeb2:	4b07      	ldr	r3, [pc, #28]	@ (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aeb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeb6:	e05e      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aebc:	e05b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aec2:	e058      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aec4:	58024400 	.word	0x58024400
 800aec8:	03d09000 	.word	0x03d09000
 800aecc:	003d0900 	.word	0x003d0900
 800aed0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800aed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aedc:	430b      	orrs	r3, r1
 800aede:	d148      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800aee0:	4b27      	ldr	r3, [pc, #156]	@ (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800aee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aee4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800aee8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aef0:	d02a      	beq.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aef8:	d838      	bhi.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800af00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af06:	d00d      	beq.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800af08:	e030      	b.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af0a:	4b1d      	ldr	r3, [pc, #116]	@ (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af16:	d102      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800af18:	4b1a      	ldr	r3, [pc, #104]	@ (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af1c:	e02b      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af22:	e028      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af24:	4b16      	ldr	r3, [pc, #88]	@ (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800af30:	d107      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fae4 	bl	800b504 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af40:	e019      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af46:	e016      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af48:	4b0d      	ldr	r3, [pc, #52]	@ (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af54:	d107      	bne.n	800af66 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af56:	f107 0318 	add.w	r3, r7, #24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 f82a 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af64:	e007      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af66:	2300      	movs	r3, #0
 800af68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af6a:	e004      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af70:	e001      	b.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800af76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3740      	adds	r7, #64	@ 0x40
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	58024400 	.word	0x58024400
 800af84:	017d7840 	.word	0x017d7840

0800af88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800af8c:	f7fe f816 	bl	8008fbc <HAL_RCC_GetHCLKFreq>
 800af90:	4602      	mov	r2, r0
 800af92:	4b06      	ldr	r3, [pc, #24]	@ (800afac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	091b      	lsrs	r3, r3, #4
 800af98:	f003 0307 	and.w	r3, r3, #7
 800af9c:	4904      	ldr	r1, [pc, #16]	@ (800afb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800af9e:	5ccb      	ldrb	r3, [r1, r3]
 800afa0:	f003 031f 	and.w	r3, r3, #31
 800afa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	bd80      	pop	{r7, pc}
 800afac:	58024400 	.word	0x58024400
 800afb0:	08018ec0 	.word	0x08018ec0

0800afb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b089      	sub	sp, #36	@ 0x24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afbc:	4ba1      	ldr	r3, [pc, #644]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800afc6:	4b9f      	ldr	r3, [pc, #636]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afca:	0b1b      	lsrs	r3, r3, #12
 800afcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800afd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800afd2:	4b9c      	ldr	r3, [pc, #624]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afd6:	091b      	lsrs	r3, r3, #4
 800afd8:	f003 0301 	and.w	r3, r3, #1
 800afdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800afde:	4b99      	ldr	r3, [pc, #612]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe2:	08db      	lsrs	r3, r3, #3
 800afe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	fb02 f303 	mul.w	r3, r2, r3
 800afee:	ee07 3a90 	vmov	s15, r3
 800aff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	f000 8111 	beq.w	800b224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	2b02      	cmp	r3, #2
 800b006:	f000 8083 	beq.w	800b110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	f200 80a1 	bhi.w	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d003      	beq.n	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d056      	beq.n	800b0cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b01e:	e099      	b.n	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b020:	4b88      	ldr	r3, [pc, #544]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0320 	and.w	r3, r3, #32
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d02d      	beq.n	800b088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b02c:	4b85      	ldr	r3, [pc, #532]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	08db      	lsrs	r3, r3, #3
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	4a84      	ldr	r2, [pc, #528]	@ (800b248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b038:	fa22 f303 	lsr.w	r3, r2, r3
 800b03c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	ee07 3a90 	vmov	s15, r3
 800b044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	ee07 3a90 	vmov	s15, r3
 800b04e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b7b      	ldr	r3, [pc, #492]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a03 	vldr	s12, [r7, #12]
 800b06a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b086:	e087      	b.n	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b6a      	ldr	r3, [pc, #424]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ca:	e065      	b.n	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b59      	ldr	r3, [pc, #356]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10e:	e043      	b.n	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	ee07 3a90 	vmov	s15, r3
 800b116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b11e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b122:	4b48      	ldr	r3, [pc, #288]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12a:	ee07 3a90 	vmov	s15, r3
 800b12e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b132:	ed97 6a03 	vldr	s12, [r7, #12]
 800b136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b13a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b152:	e021      	b.n	800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	ee07 3a90 	vmov	s15, r3
 800b15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b166:	4b37      	ldr	r3, [pc, #220]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16e:	ee07 3a90 	vmov	s15, r3
 800b172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b176:	ed97 6a03 	vldr	s12, [r7, #12]
 800b17a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b24c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b17e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b18a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b198:	4b2a      	ldr	r3, [pc, #168]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19c:	0a5b      	lsrs	r3, r3, #9
 800b19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1a2:	ee07 3a90 	vmov	s15, r3
 800b1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1be:	ee17 2a90 	vmov	r2, s15
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ca:	0c1b      	lsrs	r3, r3, #16
 800b1cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b1dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ec:	ee17 2a90 	vmov	r2, s15
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b1f4:	4b13      	ldr	r3, [pc, #76]	@ (800b244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f8:	0e1b      	lsrs	r3, r3, #24
 800b1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1fe:	ee07 3a90 	vmov	s15, r3
 800b202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b20a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b21a:	ee17 2a90 	vmov	r2, s15
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b222:	e008      	b.n	800b236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	609a      	str	r2, [r3, #8]
}
 800b236:	bf00      	nop
 800b238:	3724      	adds	r7, #36	@ 0x24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
 800b248:	03d09000 	.word	0x03d09000
 800b24c:	46000000 	.word	0x46000000
 800b250:	4c742400 	.word	0x4c742400
 800b254:	4a742400 	.word	0x4a742400
 800b258:	4bbebc20 	.word	0x4bbebc20

0800b25c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b089      	sub	sp, #36	@ 0x24
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b264:	4ba1      	ldr	r3, [pc, #644]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b268:	f003 0303 	and.w	r3, r3, #3
 800b26c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b26e:	4b9f      	ldr	r3, [pc, #636]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b272:	0d1b      	lsrs	r3, r3, #20
 800b274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b27a:	4b9c      	ldr	r3, [pc, #624]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27e:	0a1b      	lsrs	r3, r3, #8
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b286:	4b99      	ldr	r3, [pc, #612]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b28a:	08db      	lsrs	r3, r3, #3
 800b28c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	fb02 f303 	mul.w	r3, r2, r3
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b29e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 8111 	beq.w	800b4cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	f000 8083 	beq.w	800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	f200 80a1 	bhi.w	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d056      	beq.n	800b374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b2c6:	e099      	b.n	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2c8:	4b88      	ldr	r3, [pc, #544]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0320 	and.w	r3, r3, #32
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d02d      	beq.n	800b330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d4:	4b85      	ldr	r3, [pc, #532]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	4a84      	ldr	r2, [pc, #528]	@ (800b4f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	ee07 3a90 	vmov	s15, r3
 800b2ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	ee07 3a90 	vmov	s15, r3
 800b2f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fe:	4b7b      	ldr	r3, [pc, #492]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b312:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b32e:	e087      	b.n	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	ee07 3a90 	vmov	s15, r3
 800b336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b4f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b342:	4b6a      	ldr	r3, [pc, #424]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34a:	ee07 3a90 	vmov	s15, r3
 800b34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b352:	ed97 6a03 	vldr	s12, [r7, #12]
 800b356:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b372:	e065      	b.n	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b386:	4b59      	ldr	r3, [pc, #356]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38e:	ee07 3a90 	vmov	s15, r3
 800b392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b396:	ed97 6a03 	vldr	s12, [r7, #12]
 800b39a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b6:	e043      	b.n	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ca:	4b48      	ldr	r3, [pc, #288]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d2:	ee07 3a90 	vmov	s15, r3
 800b3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3fa:	e021      	b.n	800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	ee07 3a90 	vmov	s15, r3
 800b402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b406:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40e:	4b37      	ldr	r3, [pc, #220]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b422:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b42a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b43e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b440:	4b2a      	ldr	r3, [pc, #168]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b444:	0a5b      	lsrs	r3, r3, #9
 800b446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b44a:	ee07 3a90 	vmov	s15, r3
 800b44e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b45a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b45e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b466:	ee17 2a90 	vmov	r2, s15
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b46e:	4b1f      	ldr	r3, [pc, #124]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b472:	0c1b      	lsrs	r3, r3, #16
 800b474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b478:	ee07 3a90 	vmov	s15, r3
 800b47c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b484:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b488:	edd7 6a07 	vldr	s13, [r7, #28]
 800b48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b494:	ee17 2a90 	vmov	r2, s15
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b49c:	4b13      	ldr	r3, [pc, #76]	@ (800b4ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4a0:	0e1b      	lsrs	r3, r3, #24
 800b4a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4a6:	ee07 3a90 	vmov	s15, r3
 800b4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c2:	ee17 2a90 	vmov	r2, s15
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b4ca:	e008      	b.n	800b4de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	609a      	str	r2, [r3, #8]
}
 800b4de:	bf00      	nop
 800b4e0:	3724      	adds	r7, #36	@ 0x24
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
 800b4f0:	03d09000 	.word	0x03d09000
 800b4f4:	46000000 	.word	0x46000000
 800b4f8:	4c742400 	.word	0x4c742400
 800b4fc:	4a742400 	.word	0x4a742400
 800b500:	4bbebc20 	.word	0x4bbebc20

0800b504 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b504:	b480      	push	{r7}
 800b506:	b089      	sub	sp, #36	@ 0x24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b50c:	4ba0      	ldr	r3, [pc, #640]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b50e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b510:	f003 0303 	and.w	r3, r3, #3
 800b514:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b516:	4b9e      	ldr	r3, [pc, #632]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b51a:	091b      	lsrs	r3, r3, #4
 800b51c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b520:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b522:	4b9b      	ldr	r3, [pc, #620]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b526:	f003 0301 	and.w	r3, r3, #1
 800b52a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b52c:	4b98      	ldr	r3, [pc, #608]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b52e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b530:	08db      	lsrs	r3, r3, #3
 800b532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	fb02 f303 	mul.w	r3, r2, r3
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b544:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 8111 	beq.w	800b772 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	2b02      	cmp	r3, #2
 800b554:	f000 8083 	beq.w	800b65e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	2b02      	cmp	r3, #2
 800b55c:	f200 80a1 	bhi.w	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b560:	69bb      	ldr	r3, [r7, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d056      	beq.n	800b61a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b56c:	e099      	b.n	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b56e:	4b88      	ldr	r3, [pc, #544]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d02d      	beq.n	800b5d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b57a:	4b85      	ldr	r3, [pc, #532]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	08db      	lsrs	r3, r3, #3
 800b580:	f003 0303 	and.w	r3, r3, #3
 800b584:	4a83      	ldr	r2, [pc, #524]	@ (800b794 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b586:	fa22 f303 	lsr.w	r3, r2, r3
 800b58a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	ee07 3a90 	vmov	s15, r3
 800b592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	ee07 3a90 	vmov	s15, r3
 800b59c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a4:	4b7a      	ldr	r3, [pc, #488]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ac:	ee07 3a90 	vmov	s15, r3
 800b5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b5d4:	e087      	b.n	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	ee07 3a90 	vmov	s15, r3
 800b5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b79c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e8:	4b69      	ldr	r3, [pc, #420]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b618:	e065      	b.n	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	ee07 3a90 	vmov	s15, r3
 800b620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b624:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b7a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62c:	4b58      	ldr	r3, [pc, #352]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b634:	ee07 3a90 	vmov	s15, r3
 800b638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b640:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65c:	e043      	b.n	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b7a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b66c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b670:	4b47      	ldr	r3, [pc, #284]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b678:	ee07 3a90 	vmov	s15, r3
 800b67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b680:	ed97 6a03 	vldr	s12, [r7, #12]
 800b684:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a0:	e021      	b.n	800b6e6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b79c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b6b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6b4:	4b36      	ldr	r3, [pc, #216]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6bc:	ee07 3a90 	vmov	s15, r3
 800b6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6c8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b798 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b6cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6e4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b6e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ea:	0a5b      	lsrs	r3, r3, #9
 800b6ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6f0:	ee07 3a90 	vmov	s15, r3
 800b6f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b6fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b700:	edd7 6a07 	vldr	s13, [r7, #28]
 800b704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b70c:	ee17 2a90 	vmov	r2, s15
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b714:	4b1e      	ldr	r3, [pc, #120]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b72a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b72e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b73a:	ee17 2a90 	vmov	r2, s15
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b742:	4b13      	ldr	r3, [pc, #76]	@ (800b790 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b746:	0e1b      	lsrs	r3, r3, #24
 800b748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b74c:	ee07 3a90 	vmov	s15, r3
 800b750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b75c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b768:	ee17 2a90 	vmov	r2, s15
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b770:	e008      	b.n	800b784 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	609a      	str	r2, [r3, #8]
}
 800b784:	bf00      	nop
 800b786:	3724      	adds	r7, #36	@ 0x24
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	58024400 	.word	0x58024400
 800b794:	03d09000 	.word	0x03d09000
 800b798:	46000000 	.word	0x46000000
 800b79c:	4c742400 	.word	0x4c742400
 800b7a0:	4a742400 	.word	0x4a742400
 800b7a4:	4bbebc20 	.word	0x4bbebc20

0800b7a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7b6:	4b53      	ldr	r3, [pc, #332]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	2b03      	cmp	r3, #3
 800b7c0:	d101      	bne.n	800b7c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e099      	b.n	800b8fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b7c6:	4b4f      	ldr	r3, [pc, #316]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a4e      	ldr	r2, [pc, #312]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b7cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b7d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7d2:	f7f6 fefd 	bl	80025d0 <HAL_GetTick>
 800b7d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7d8:	e008      	b.n	800b7ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b7da:	f7f6 fef9 	bl	80025d0 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d901      	bls.n	800b7ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e086      	b.n	800b8fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b7ec:	4b45      	ldr	r3, [pc, #276]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1f0      	bne.n	800b7da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b7f8:	4b42      	ldr	r3, [pc, #264]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	031b      	lsls	r3, r3, #12
 800b806:	493f      	ldr	r1, [pc, #252]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b808:	4313      	orrs	r3, r2
 800b80a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	3b01      	subs	r3, #1
 800b812:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	025b      	lsls	r3, r3, #9
 800b81e:	b29b      	uxth	r3, r3
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	3b01      	subs	r3, #1
 800b828:	041b      	lsls	r3, r3, #16
 800b82a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	3b01      	subs	r3, #1
 800b836:	061b      	lsls	r3, r3, #24
 800b838:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b83c:	4931      	ldr	r1, [pc, #196]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b83e:	4313      	orrs	r3, r2
 800b840:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b842:	4b30      	ldr	r3, [pc, #192]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b846:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	492d      	ldr	r1, [pc, #180]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b850:	4313      	orrs	r3, r2
 800b852:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b854:	4b2b      	ldr	r3, [pc, #172]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b858:	f023 0220 	bic.w	r2, r3, #32
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	4928      	ldr	r1, [pc, #160]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b862:	4313      	orrs	r3, r2
 800b864:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b866:	4b27      	ldr	r3, [pc, #156]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86a:	4a26      	ldr	r2, [pc, #152]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b86c:	f023 0310 	bic.w	r3, r3, #16
 800b870:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b872:	4b24      	ldr	r3, [pc, #144]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b874:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b876:	4b24      	ldr	r3, [pc, #144]	@ (800b908 <RCCEx_PLL2_Config+0x160>)
 800b878:	4013      	ands	r3, r2
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	69d2      	ldr	r2, [r2, #28]
 800b87e:	00d2      	lsls	r2, r2, #3
 800b880:	4920      	ldr	r1, [pc, #128]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b882:	4313      	orrs	r3, r2
 800b884:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b886:	4b1f      	ldr	r3, [pc, #124]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b88a:	4a1e      	ldr	r2, [pc, #120]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b88c:	f043 0310 	orr.w	r3, r3, #16
 800b890:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d106      	bne.n	800b8a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b898:	4b1a      	ldr	r3, [pc, #104]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	4a19      	ldr	r2, [pc, #100]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b89e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8a4:	e00f      	b.n	800b8c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d106      	bne.n	800b8ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b8ac:	4b15      	ldr	r3, [pc, #84]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b0:	4a14      	ldr	r2, [pc, #80]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b8b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8b8:	e005      	b.n	800b8c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b8ba:	4b12      	ldr	r3, [pc, #72]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8be:	4a11      	ldr	r2, [pc, #68]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b8c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a0e      	ldr	r2, [pc, #56]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b8d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8d2:	f7f6 fe7d 	bl	80025d0 <HAL_GetTick>
 800b8d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8d8:	e008      	b.n	800b8ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b8da:	f7f6 fe79 	bl	80025d0 <HAL_GetTick>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d901      	bls.n	800b8ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e006      	b.n	800b8fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b8ec:	4b05      	ldr	r3, [pc, #20]	@ (800b904 <RCCEx_PLL2_Config+0x15c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d0f0      	beq.n	800b8da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	58024400 	.word	0x58024400
 800b908:	ffff0007 	.word	0xffff0007

0800b90c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b91a:	4b53      	ldr	r3, [pc, #332]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b91c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	2b03      	cmp	r3, #3
 800b924:	d101      	bne.n	800b92a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e099      	b.n	800ba5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b92a:	4b4f      	ldr	r3, [pc, #316]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a4e      	ldr	r2, [pc, #312]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b930:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b936:	f7f6 fe4b 	bl	80025d0 <HAL_GetTick>
 800b93a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b93c:	e008      	b.n	800b950 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b93e:	f7f6 fe47 	bl	80025d0 <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d901      	bls.n	800b950 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e086      	b.n	800ba5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b950:	4b45      	ldr	r3, [pc, #276]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1f0      	bne.n	800b93e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b95c:	4b42      	ldr	r3, [pc, #264]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b960:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	051b      	lsls	r3, r3, #20
 800b96a:	493f      	ldr	r1, [pc, #252]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	3b01      	subs	r3, #1
 800b976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	3b01      	subs	r3, #1
 800b980:	025b      	lsls	r3, r3, #9
 800b982:	b29b      	uxth	r3, r3
 800b984:	431a      	orrs	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	68db      	ldr	r3, [r3, #12]
 800b98a:	3b01      	subs	r3, #1
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b992:	431a      	orrs	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	3b01      	subs	r3, #1
 800b99a:	061b      	lsls	r3, r3, #24
 800b99c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9a0:	4931      	ldr	r1, [pc, #196]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b9a6:	4b30      	ldr	r3, [pc, #192]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	492d      	ldr	r1, [pc, #180]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b9b8:	4b2b      	ldr	r3, [pc, #172]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	699b      	ldr	r3, [r3, #24]
 800b9c4:	4928      	ldr	r1, [pc, #160]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b9ca:	4b27      	ldr	r3, [pc, #156]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ce:	4a26      	ldr	r2, [pc, #152]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b9d6:	4b24      	ldr	r3, [pc, #144]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9da:	4b24      	ldr	r3, [pc, #144]	@ (800ba6c <RCCEx_PLL3_Config+0x160>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	69d2      	ldr	r2, [r2, #28]
 800b9e2:	00d2      	lsls	r2, r2, #3
 800b9e4:	4920      	ldr	r1, [pc, #128]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b9ea:	4b1f      	ldr	r3, [pc, #124]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ee:	4a1e      	ldr	r2, [pc, #120]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b9fc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800b9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba00:	4a19      	ldr	r2, [pc, #100]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ba06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba08:	e00f      	b.n	800ba2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d106      	bne.n	800ba1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba10:	4b15      	ldr	r3, [pc, #84]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba14:	4a14      	ldr	r2, [pc, #80]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ba1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ba1c:	e005      	b.n	800ba2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba1e:	4b12      	ldr	r3, [pc, #72]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba22:	4a11      	ldr	r2, [pc, #68]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a0e      	ldr	r2, [pc, #56]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba36:	f7f6 fdcb 	bl	80025d0 <HAL_GetTick>
 800ba3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba3c:	e008      	b.n	800ba50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba3e:	f7f6 fdc7 	bl	80025d0 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d901      	bls.n	800ba50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e006      	b.n	800ba5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba50:	4b05      	ldr	r3, [pc, #20]	@ (800ba68 <RCCEx_PLL3_Config+0x15c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0f0      	beq.n	800ba3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	ffff0007 	.word	0xffff0007

0800ba70 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ba7e:	2301      	movs	r3, #1
 800ba80:	e10f      	b.n	800bca2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a87      	ldr	r2, [pc, #540]	@ (800bcac <HAL_SPI_Init+0x23c>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d00f      	beq.n	800bab2 <HAL_SPI_Init+0x42>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a86      	ldr	r2, [pc, #536]	@ (800bcb0 <HAL_SPI_Init+0x240>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d00a      	beq.n	800bab2 <HAL_SPI_Init+0x42>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a84      	ldr	r2, [pc, #528]	@ (800bcb4 <HAL_SPI_Init+0x244>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d005      	beq.n	800bab2 <HAL_SPI_Init+0x42>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	2b0f      	cmp	r3, #15
 800baac:	d901      	bls.n	800bab2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e0f7      	b.n	800bca2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f900 	bl	800bcb8 <SPI_GetPacketSize>
 800bab8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a7b      	ldr	r2, [pc, #492]	@ (800bcac <HAL_SPI_Init+0x23c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d00c      	beq.n	800bade <HAL_SPI_Init+0x6e>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a79      	ldr	r2, [pc, #484]	@ (800bcb0 <HAL_SPI_Init+0x240>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d007      	beq.n	800bade <HAL_SPI_Init+0x6e>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a78      	ldr	r2, [pc, #480]	@ (800bcb4 <HAL_SPI_Init+0x244>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d002      	beq.n	800bade <HAL_SPI_Init+0x6e>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b08      	cmp	r3, #8
 800badc:	d811      	bhi.n	800bb02 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bae2:	4a72      	ldr	r2, [pc, #456]	@ (800bcac <HAL_SPI_Init+0x23c>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d009      	beq.n	800bafc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a70      	ldr	r2, [pc, #448]	@ (800bcb0 <HAL_SPI_Init+0x240>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d004      	beq.n	800bafc <HAL_SPI_Init+0x8c>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a6f      	ldr	r2, [pc, #444]	@ (800bcb4 <HAL_SPI_Init+0x244>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d104      	bne.n	800bb06 <HAL_SPI_Init+0x96>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b10      	cmp	r3, #16
 800bb00:	d901      	bls.n	800bb06 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e0cd      	b.n	800bca2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7f5 ffd8 	bl	8001ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f022 0201 	bic.w	r2, r2, #1
 800bb36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800bb42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb4c:	d119      	bne.n	800bb82 <HAL_SPI_Init+0x112>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bb56:	d103      	bne.n	800bb60 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d008      	beq.n	800bb72 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10c      	bne.n	800bb82 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bb6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb70:	d107      	bne.n	800bb82 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bb80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00f      	beq.n	800bbae <HAL_SPI_Init+0x13e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	2b06      	cmp	r3, #6
 800bb94:	d90b      	bls.n	800bbae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	430a      	orrs	r2, r1
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	e007      	b.n	800bbbe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbbc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	69da      	ldr	r2, [r3, #28]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc6:	431a      	orrs	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	431a      	orrs	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbd0:	ea42 0103 	orr.w	r1, r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	430a      	orrs	r2, r1
 800bbde:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	699b      	ldr	r3, [r3, #24]
 800bbf4:	431a      	orrs	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	431a      	orrs	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	431a      	orrs	r2, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	431a      	orrs	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc12:	431a      	orrs	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	431a      	orrs	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc1e:	ea42 0103 	orr.w	r1, r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d113      	bne.n	800bc5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0201 	bic.w	r2, r2, #1
 800bc6c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	40013000 	.word	0x40013000
 800bcb0:	40003800 	.word	0x40003800
 800bcb4:	40003c00 	.word	0x40003c00

0800bcb8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b085      	sub	sp, #20
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcc4:	095b      	lsrs	r3, r3, #5
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3307      	adds	r3, #7
 800bcd6:	08db      	lsrs	r3, r3, #3
 800bcd8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	fb02 f303 	mul.w	r3, r2, r3
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d101      	bne.n	800bd00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e049      	b.n	800bd94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d106      	bne.n	800bd1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7f6 f815 	bl	8001d44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	4610      	mov	r0, r2
 800bd2e:	f000 fa93 	bl	800c258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2201      	movs	r2, #1
 800bd36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2201      	movs	r2, #1
 800bd66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d101      	bne.n	800bdae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	e049      	b.n	800be42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d106      	bne.n	800bdc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7f5 ff70 	bl	8001ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2202      	movs	r2, #2
 800bdcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681a      	ldr	r2, [r3, #0]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f000 fa3c 	bl	800c258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2201      	movs	r2, #1
 800be34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b082      	sub	sp, #8
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e049      	b.n	800bef0 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	d106      	bne.n	800be76 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7f5 fe95 	bl	8001ba0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2202      	movs	r2, #2
 800be7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f000 f9e5 	bl	800c258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2201      	movs	r2, #1
 800bea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2201      	movs	r2, #1
 800beba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2201      	movs	r2, #1
 800bed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2201      	movs	r2, #1
 800bee2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2201      	movs	r2, #1
 800beea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	60b9      	str	r1, [r7, #8]
 800bf02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d101      	bne.n	800bf16 <HAL_TIM_IC_ConfigChannel+0x1e>
 800bf12:	2302      	movs	r3, #2
 800bf14:	e088      	b.n	800c028 <HAL_TIM_IC_ConfigChannel+0x130>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d11b      	bne.n	800bf5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800bf34:	f000 fd06 	bl	800c944 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	699a      	ldr	r2, [r3, #24]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f022 020c 	bic.w	r2, r2, #12
 800bf46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6999      	ldr	r1, [r3, #24]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	619a      	str	r2, [r3, #24]
 800bf5a:	e060      	b.n	800c01e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d11c      	bne.n	800bf9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800bf72:	f000 fd5b 	bl	800ca2c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	699a      	ldr	r2, [r3, #24]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800bf84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	6999      	ldr	r1, [r3, #24]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	021a      	lsls	r2, r3, #8
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	619a      	str	r2, [r3, #24]
 800bf9a:	e040      	b.n	800c01e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b08      	cmp	r3, #8
 800bfa0:	d11b      	bne.n	800bfda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800bfb2:	f000 fd78 	bl	800caa6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	69da      	ldr	r2, [r3, #28]
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f022 020c 	bic.w	r2, r2, #12
 800bfc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	69d9      	ldr	r1, [r3, #28]
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	689a      	ldr	r2, [r3, #8]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	430a      	orrs	r2, r1
 800bfd6:	61da      	str	r2, [r3, #28]
 800bfd8:	e021      	b.n	800c01e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b0c      	cmp	r3, #12
 800bfde:	d11c      	bne.n	800c01a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800bff0:	f000 fd95 	bl	800cb1e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	69da      	ldr	r2, [r3, #28]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800c002:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	69d9      	ldr	r1, [r3, #28]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	021a      	lsls	r2, r3, #8
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	430a      	orrs	r2, r1
 800c016:	61da      	str	r2, [r3, #28]
 800c018:	e001      	b.n	800c01e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c026:	7dfb      	ldrb	r3, [r7, #23]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c046:	2b01      	cmp	r3, #1
 800c048:	d101      	bne.n	800c04e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c04a:	2302      	movs	r3, #2
 800c04c:	e0ff      	b.n	800c24e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2201      	movs	r2, #1
 800c052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b14      	cmp	r3, #20
 800c05a:	f200 80f0 	bhi.w	800c23e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c05e:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c064:	0800c0b9 	.word	0x0800c0b9
 800c068:	0800c23f 	.word	0x0800c23f
 800c06c:	0800c23f 	.word	0x0800c23f
 800c070:	0800c23f 	.word	0x0800c23f
 800c074:	0800c0f9 	.word	0x0800c0f9
 800c078:	0800c23f 	.word	0x0800c23f
 800c07c:	0800c23f 	.word	0x0800c23f
 800c080:	0800c23f 	.word	0x0800c23f
 800c084:	0800c13b 	.word	0x0800c13b
 800c088:	0800c23f 	.word	0x0800c23f
 800c08c:	0800c23f 	.word	0x0800c23f
 800c090:	0800c23f 	.word	0x0800c23f
 800c094:	0800c17b 	.word	0x0800c17b
 800c098:	0800c23f 	.word	0x0800c23f
 800c09c:	0800c23f 	.word	0x0800c23f
 800c0a0:	0800c23f 	.word	0x0800c23f
 800c0a4:	0800c1bd 	.word	0x0800c1bd
 800c0a8:	0800c23f 	.word	0x0800c23f
 800c0ac:	0800c23f 	.word	0x0800c23f
 800c0b0:	0800c23f 	.word	0x0800c23f
 800c0b4:	0800c1fd 	.word	0x0800c1fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68b9      	ldr	r1, [r7, #8]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f000 f96a 	bl	800c398 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	699a      	ldr	r2, [r3, #24]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f042 0208 	orr.w	r2, r2, #8
 800c0d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f022 0204 	bic.w	r2, r2, #4
 800c0e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6999      	ldr	r1, [r3, #24]
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	691a      	ldr	r2, [r3, #16]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	619a      	str	r2, [r3, #24]
      break;
 800c0f6:	e0a5      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f9da 	bl	800c4b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6999      	ldr	r1, [r3, #24]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	021a      	lsls	r2, r3, #8
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	430a      	orrs	r2, r1
 800c136:	619a      	str	r2, [r3, #24]
      break;
 800c138:	e084      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68b9      	ldr	r1, [r7, #8]
 800c140:	4618      	mov	r0, r3
 800c142:	f000 fa43 	bl	800c5cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	69da      	ldr	r2, [r3, #28]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f042 0208 	orr.w	r2, r2, #8
 800c154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69da      	ldr	r2, [r3, #28]
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f022 0204 	bic.w	r2, r2, #4
 800c164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69d9      	ldr	r1, [r3, #28]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	691a      	ldr	r2, [r3, #16]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	61da      	str	r2, [r3, #28]
      break;
 800c178:	e064      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68b9      	ldr	r1, [r7, #8]
 800c180:	4618      	mov	r0, r3
 800c182:	f000 faab 	bl	800c6dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69da      	ldr	r2, [r3, #28]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69d9      	ldr	r1, [r3, #28]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	021a      	lsls	r2, r3, #8
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	61da      	str	r2, [r3, #28]
      break;
 800c1ba:	e043      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	68b9      	ldr	r1, [r7, #8]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 faf4 	bl	800c7b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f042 0208 	orr.w	r2, r2, #8
 800c1d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0204 	bic.w	r2, r2, #4
 800c1e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	691a      	ldr	r2, [r3, #16]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c1fa:	e023      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68b9      	ldr	r1, [r7, #8]
 800c202:	4618      	mov	r0, r3
 800c204:	f000 fb38 	bl	800c878 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c216:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c226:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	021a      	lsls	r2, r3, #8
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c23c:	e002      	b.n	800c244 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	75fb      	strb	r3, [r7, #23]
      break;
 800c242:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c24c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop

0800c258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a43      	ldr	r2, [pc, #268]	@ (800c378 <TIM_Base_SetConfig+0x120>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d013      	beq.n	800c298 <TIM_Base_SetConfig+0x40>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c276:	d00f      	beq.n	800c298 <TIM_Base_SetConfig+0x40>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a40      	ldr	r2, [pc, #256]	@ (800c37c <TIM_Base_SetConfig+0x124>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d00b      	beq.n	800c298 <TIM_Base_SetConfig+0x40>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a3f      	ldr	r2, [pc, #252]	@ (800c380 <TIM_Base_SetConfig+0x128>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d007      	beq.n	800c298 <TIM_Base_SetConfig+0x40>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a3e      	ldr	r2, [pc, #248]	@ (800c384 <TIM_Base_SetConfig+0x12c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d003      	beq.n	800c298 <TIM_Base_SetConfig+0x40>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a3d      	ldr	r2, [pc, #244]	@ (800c388 <TIM_Base_SetConfig+0x130>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d108      	bne.n	800c2aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c29e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a32      	ldr	r2, [pc, #200]	@ (800c378 <TIM_Base_SetConfig+0x120>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d01f      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2b8:	d01b      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a2f      	ldr	r2, [pc, #188]	@ (800c37c <TIM_Base_SetConfig+0x124>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d017      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a2e      	ldr	r2, [pc, #184]	@ (800c380 <TIM_Base_SetConfig+0x128>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d013      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a2d      	ldr	r2, [pc, #180]	@ (800c384 <TIM_Base_SetConfig+0x12c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00f      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a2c      	ldr	r2, [pc, #176]	@ (800c388 <TIM_Base_SetConfig+0x130>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d00b      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a2b      	ldr	r2, [pc, #172]	@ (800c38c <TIM_Base_SetConfig+0x134>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d007      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a2a      	ldr	r2, [pc, #168]	@ (800c390 <TIM_Base_SetConfig+0x138>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d003      	beq.n	800c2f2 <TIM_Base_SetConfig+0x9a>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	4a29      	ldr	r2, [pc, #164]	@ (800c394 <TIM_Base_SetConfig+0x13c>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d108      	bne.n	800c304 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	68fa      	ldr	r2, [r7, #12]
 800c300:	4313      	orrs	r3, r2
 800c302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	4313      	orrs	r3, r2
 800c310:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	689a      	ldr	r2, [r3, #8]
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a14      	ldr	r2, [pc, #80]	@ (800c378 <TIM_Base_SetConfig+0x120>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d00f      	beq.n	800c34a <TIM_Base_SetConfig+0xf2>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a16      	ldr	r2, [pc, #88]	@ (800c388 <TIM_Base_SetConfig+0x130>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00b      	beq.n	800c34a <TIM_Base_SetConfig+0xf2>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a15      	ldr	r2, [pc, #84]	@ (800c38c <TIM_Base_SetConfig+0x134>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d007      	beq.n	800c34a <TIM_Base_SetConfig+0xf2>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a14      	ldr	r2, [pc, #80]	@ (800c390 <TIM_Base_SetConfig+0x138>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d003      	beq.n	800c34a <TIM_Base_SetConfig+0xf2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a13      	ldr	r2, [pc, #76]	@ (800c394 <TIM_Base_SetConfig+0x13c>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d103      	bne.n	800c352 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f043 0204 	orr.w	r2, r3, #4
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2201      	movs	r2, #1
 800c362:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	601a      	str	r2, [r3, #0]
}
 800c36a:	bf00      	nop
 800c36c:	3714      	adds	r7, #20
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	40010000 	.word	0x40010000
 800c37c:	40000400 	.word	0x40000400
 800c380:	40000800 	.word	0x40000800
 800c384:	40000c00 	.word	0x40000c00
 800c388:	40010400 	.word	0x40010400
 800c38c:	40014000 	.word	0x40014000
 800c390:	40014400 	.word	0x40014400
 800c394:	40014800 	.word	0x40014800

0800c398 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6a1b      	ldr	r3, [r3, #32]
 800c3ac:	f023 0201 	bic.w	r2, r3, #1
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4b37      	ldr	r3, [pc, #220]	@ (800c4a0 <TIM_OC1_SetConfig+0x108>)
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f023 0303 	bic.w	r3, r3, #3
 800c3ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f023 0302 	bic.w	r3, r3, #2
 800c3e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a2d      	ldr	r2, [pc, #180]	@ (800c4a4 <TIM_OC1_SetConfig+0x10c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d00f      	beq.n	800c414 <TIM_OC1_SetConfig+0x7c>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a2c      	ldr	r2, [pc, #176]	@ (800c4a8 <TIM_OC1_SetConfig+0x110>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d00b      	beq.n	800c414 <TIM_OC1_SetConfig+0x7c>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a2b      	ldr	r2, [pc, #172]	@ (800c4ac <TIM_OC1_SetConfig+0x114>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d007      	beq.n	800c414 <TIM_OC1_SetConfig+0x7c>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a2a      	ldr	r2, [pc, #168]	@ (800c4b0 <TIM_OC1_SetConfig+0x118>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d003      	beq.n	800c414 <TIM_OC1_SetConfig+0x7c>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a29      	ldr	r2, [pc, #164]	@ (800c4b4 <TIM_OC1_SetConfig+0x11c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d10c      	bne.n	800c42e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	f023 0308 	bic.w	r3, r3, #8
 800c41a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	4313      	orrs	r3, r2
 800c424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f023 0304 	bic.w	r3, r3, #4
 800c42c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a1c      	ldr	r2, [pc, #112]	@ (800c4a4 <TIM_OC1_SetConfig+0x10c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d00f      	beq.n	800c456 <TIM_OC1_SetConfig+0xbe>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a1b      	ldr	r2, [pc, #108]	@ (800c4a8 <TIM_OC1_SetConfig+0x110>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d00b      	beq.n	800c456 <TIM_OC1_SetConfig+0xbe>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ac <TIM_OC1_SetConfig+0x114>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d007      	beq.n	800c456 <TIM_OC1_SetConfig+0xbe>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a19      	ldr	r2, [pc, #100]	@ (800c4b0 <TIM_OC1_SetConfig+0x118>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d003      	beq.n	800c456 <TIM_OC1_SetConfig+0xbe>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a18      	ldr	r2, [pc, #96]	@ (800c4b4 <TIM_OC1_SetConfig+0x11c>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d111      	bne.n	800c47a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c45c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	693a      	ldr	r2, [r7, #16]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	693a      	ldr	r2, [r7, #16]
 800c476:	4313      	orrs	r3, r2
 800c478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	685a      	ldr	r2, [r3, #4]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	621a      	str	r2, [r3, #32]
}
 800c494:	bf00      	nop
 800c496:	371c      	adds	r7, #28
 800c498:	46bd      	mov	sp, r7
 800c49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49e:	4770      	bx	lr
 800c4a0:	fffeff8f 	.word	0xfffeff8f
 800c4a4:	40010000 	.word	0x40010000
 800c4a8:	40010400 	.word	0x40010400
 800c4ac:	40014000 	.word	0x40014000
 800c4b0:	40014400 	.word	0x40014400
 800c4b4:	40014800 	.word	0x40014800

0800c4b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b087      	sub	sp, #28
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6a1b      	ldr	r3, [r3, #32]
 800c4c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6a1b      	ldr	r3, [r3, #32]
 800c4cc:	f023 0210 	bic.w	r2, r3, #16
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	4b34      	ldr	r3, [pc, #208]	@ (800c5b4 <TIM_OC2_SetConfig+0xfc>)
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f023 0320 	bic.w	r3, r3, #32
 800c502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	011b      	lsls	r3, r3, #4
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a29      	ldr	r2, [pc, #164]	@ (800c5b8 <TIM_OC2_SetConfig+0x100>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d003      	beq.n	800c520 <TIM_OC2_SetConfig+0x68>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a28      	ldr	r2, [pc, #160]	@ (800c5bc <TIM_OC2_SetConfig+0x104>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d10d      	bne.n	800c53c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	011b      	lsls	r3, r3, #4
 800c52e:	697a      	ldr	r2, [r7, #20]
 800c530:	4313      	orrs	r3, r2
 800c532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c53a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a1e      	ldr	r2, [pc, #120]	@ (800c5b8 <TIM_OC2_SetConfig+0x100>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d00f      	beq.n	800c564 <TIM_OC2_SetConfig+0xac>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a1d      	ldr	r2, [pc, #116]	@ (800c5bc <TIM_OC2_SetConfig+0x104>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d00b      	beq.n	800c564 <TIM_OC2_SetConfig+0xac>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a1c      	ldr	r2, [pc, #112]	@ (800c5c0 <TIM_OC2_SetConfig+0x108>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d007      	beq.n	800c564 <TIM_OC2_SetConfig+0xac>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c4 <TIM_OC2_SetConfig+0x10c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d003      	beq.n	800c564 <TIM_OC2_SetConfig+0xac>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a1a      	ldr	r2, [pc, #104]	@ (800c5c8 <TIM_OC2_SetConfig+0x110>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d113      	bne.n	800c58c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c56a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	4313      	orrs	r3, r2
 800c58a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	685a      	ldr	r2, [r3, #4]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	621a      	str	r2, [r3, #32]
}
 800c5a6:	bf00      	nop
 800c5a8:	371c      	adds	r7, #28
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	feff8fff 	.word	0xfeff8fff
 800c5b8:	40010000 	.word	0x40010000
 800c5bc:	40010400 	.word	0x40010400
 800c5c0:	40014000 	.word	0x40014000
 800c5c4:	40014400 	.word	0x40014400
 800c5c8:	40014800 	.word	0x40014800

0800c5cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
 800c5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a1b      	ldr	r3, [r3, #32]
 800c5e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	69db      	ldr	r3, [r3, #28]
 800c5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	4b33      	ldr	r3, [pc, #204]	@ (800c6c4 <TIM_OC3_SetConfig+0xf8>)
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f023 0303 	bic.w	r3, r3, #3
 800c602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	021b      	lsls	r3, r3, #8
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	4313      	orrs	r3, r2
 800c620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a28      	ldr	r2, [pc, #160]	@ (800c6c8 <TIM_OC3_SetConfig+0xfc>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d003      	beq.n	800c632 <TIM_OC3_SetConfig+0x66>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4a27      	ldr	r2, [pc, #156]	@ (800c6cc <TIM_OC3_SetConfig+0x100>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d10d      	bne.n	800c64e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	021b      	lsls	r3, r3, #8
 800c640:	697a      	ldr	r2, [r7, #20]
 800c642:	4313      	orrs	r3, r2
 800c644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c64c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a1d      	ldr	r2, [pc, #116]	@ (800c6c8 <TIM_OC3_SetConfig+0xfc>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d00f      	beq.n	800c676 <TIM_OC3_SetConfig+0xaa>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a1c      	ldr	r2, [pc, #112]	@ (800c6cc <TIM_OC3_SetConfig+0x100>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d00b      	beq.n	800c676 <TIM_OC3_SetConfig+0xaa>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a1b      	ldr	r2, [pc, #108]	@ (800c6d0 <TIM_OC3_SetConfig+0x104>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d007      	beq.n	800c676 <TIM_OC3_SetConfig+0xaa>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a1a      	ldr	r2, [pc, #104]	@ (800c6d4 <TIM_OC3_SetConfig+0x108>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d003      	beq.n	800c676 <TIM_OC3_SetConfig+0xaa>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a19      	ldr	r2, [pc, #100]	@ (800c6d8 <TIM_OC3_SetConfig+0x10c>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d113      	bne.n	800c69e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	011b      	lsls	r3, r3, #4
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	4313      	orrs	r3, r2
 800c690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	011b      	lsls	r3, r3, #4
 800c698:	693a      	ldr	r2, [r7, #16]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68fa      	ldr	r2, [r7, #12]
 800c6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	685a      	ldr	r2, [r3, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	621a      	str	r2, [r3, #32]
}
 800c6b8:	bf00      	nop
 800c6ba:	371c      	adds	r7, #28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c2:	4770      	bx	lr
 800c6c4:	fffeff8f 	.word	0xfffeff8f
 800c6c8:	40010000 	.word	0x40010000
 800c6cc:	40010400 	.word	0x40010400
 800c6d0:	40014000 	.word	0x40014000
 800c6d4:	40014400 	.word	0x40014400
 800c6d8:	40014800 	.word	0x40014800

0800c6dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6a1b      	ldr	r3, [r3, #32]
 800c6ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a1b      	ldr	r3, [r3, #32]
 800c6f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	69db      	ldr	r3, [r3, #28]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c704:	68fa      	ldr	r2, [r7, #12]
 800c706:	4b24      	ldr	r3, [pc, #144]	@ (800c798 <TIM_OC4_SetConfig+0xbc>)
 800c708:	4013      	ands	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	021b      	lsls	r3, r3, #8
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	4313      	orrs	r3, r2
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	031b      	lsls	r3, r3, #12
 800c72e:	693a      	ldr	r2, [r7, #16]
 800c730:	4313      	orrs	r3, r2
 800c732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a19      	ldr	r2, [pc, #100]	@ (800c79c <TIM_OC4_SetConfig+0xc0>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d00f      	beq.n	800c75c <TIM_OC4_SetConfig+0x80>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4a18      	ldr	r2, [pc, #96]	@ (800c7a0 <TIM_OC4_SetConfig+0xc4>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d00b      	beq.n	800c75c <TIM_OC4_SetConfig+0x80>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a17      	ldr	r2, [pc, #92]	@ (800c7a4 <TIM_OC4_SetConfig+0xc8>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d007      	beq.n	800c75c <TIM_OC4_SetConfig+0x80>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a16      	ldr	r2, [pc, #88]	@ (800c7a8 <TIM_OC4_SetConfig+0xcc>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d003      	beq.n	800c75c <TIM_OC4_SetConfig+0x80>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	4a15      	ldr	r2, [pc, #84]	@ (800c7ac <TIM_OC4_SetConfig+0xd0>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d109      	bne.n	800c770 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	019b      	lsls	r3, r3, #6
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685a      	ldr	r2, [r3, #4]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	621a      	str	r2, [r3, #32]
}
 800c78a:	bf00      	nop
 800c78c:	371c      	adds	r7, #28
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	feff8fff 	.word	0xfeff8fff
 800c79c:	40010000 	.word	0x40010000
 800c7a0:	40010400 	.word	0x40010400
 800c7a4:	40014000 	.word	0x40014000
 800c7a8:	40014400 	.word	0x40014400
 800c7ac:	40014800 	.word	0x40014800

0800c7b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6a1b      	ldr	r3, [r3, #32]
 800c7c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4b21      	ldr	r3, [pc, #132]	@ (800c860 <TIM_OC5_SetConfig+0xb0>)
 800c7dc:	4013      	ands	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c7f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	041b      	lsls	r3, r3, #16
 800c7f8:	693a      	ldr	r2, [r7, #16]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a18      	ldr	r2, [pc, #96]	@ (800c864 <TIM_OC5_SetConfig+0xb4>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d00f      	beq.n	800c826 <TIM_OC5_SetConfig+0x76>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a17      	ldr	r2, [pc, #92]	@ (800c868 <TIM_OC5_SetConfig+0xb8>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d00b      	beq.n	800c826 <TIM_OC5_SetConfig+0x76>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a16      	ldr	r2, [pc, #88]	@ (800c86c <TIM_OC5_SetConfig+0xbc>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d007      	beq.n	800c826 <TIM_OC5_SetConfig+0x76>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a15      	ldr	r2, [pc, #84]	@ (800c870 <TIM_OC5_SetConfig+0xc0>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d003      	beq.n	800c826 <TIM_OC5_SetConfig+0x76>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a14      	ldr	r2, [pc, #80]	@ (800c874 <TIM_OC5_SetConfig+0xc4>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d109      	bne.n	800c83a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c82c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	697a      	ldr	r2, [r7, #20]
 800c836:	4313      	orrs	r3, r2
 800c838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68fa      	ldr	r2, [r7, #12]
 800c844:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	685a      	ldr	r2, [r3, #4]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	621a      	str	r2, [r3, #32]
}
 800c854:	bf00      	nop
 800c856:	371c      	adds	r7, #28
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	fffeff8f 	.word	0xfffeff8f
 800c864:	40010000 	.word	0x40010000
 800c868:	40010400 	.word	0x40010400
 800c86c:	40014000 	.word	0x40014000
 800c870:	40014400 	.word	0x40014400
 800c874:	40014800 	.word	0x40014800

0800c878 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c89e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	4b22      	ldr	r3, [pc, #136]	@ (800c92c <TIM_OC6_SetConfig+0xb4>)
 800c8a4:	4013      	ands	r3, r2
 800c8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	021b      	lsls	r3, r3, #8
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	051b      	lsls	r3, r3, #20
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	4313      	orrs	r3, r2
 800c8c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a19      	ldr	r2, [pc, #100]	@ (800c930 <TIM_OC6_SetConfig+0xb8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d00f      	beq.n	800c8f0 <TIM_OC6_SetConfig+0x78>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a18      	ldr	r2, [pc, #96]	@ (800c934 <TIM_OC6_SetConfig+0xbc>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d00b      	beq.n	800c8f0 <TIM_OC6_SetConfig+0x78>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a17      	ldr	r2, [pc, #92]	@ (800c938 <TIM_OC6_SetConfig+0xc0>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d007      	beq.n	800c8f0 <TIM_OC6_SetConfig+0x78>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a16      	ldr	r2, [pc, #88]	@ (800c93c <TIM_OC6_SetConfig+0xc4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d003      	beq.n	800c8f0 <TIM_OC6_SetConfig+0x78>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	4a15      	ldr	r2, [pc, #84]	@ (800c940 <TIM_OC6_SetConfig+0xc8>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d109      	bne.n	800c904 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	695b      	ldr	r3, [r3, #20]
 800c8fc:	029b      	lsls	r3, r3, #10
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	693a      	ldr	r2, [r7, #16]
 800c91c:	621a      	str	r2, [r3, #32]
}
 800c91e:	bf00      	nop
 800c920:	371c      	adds	r7, #28
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	feff8fff 	.word	0xfeff8fff
 800c930:	40010000 	.word	0x40010000
 800c934:	40010400 	.word	0x40010400
 800c938:	40014000 	.word	0x40014000
 800c93c:	40014400 	.word	0x40014400
 800c940:	40014800 	.word	0x40014800

0800c944 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
 800c950:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1b      	ldr	r3, [r3, #32]
 800c95c:	f023 0201 	bic.w	r2, r3, #1
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	4a28      	ldr	r2, [pc, #160]	@ (800ca10 <TIM_TI1_SetConfig+0xcc>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d01b      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c978:	d017      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	4a25      	ldr	r2, [pc, #148]	@ (800ca14 <TIM_TI1_SetConfig+0xd0>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d013      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	4a24      	ldr	r2, [pc, #144]	@ (800ca18 <TIM_TI1_SetConfig+0xd4>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d00f      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4a23      	ldr	r2, [pc, #140]	@ (800ca1c <TIM_TI1_SetConfig+0xd8>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d00b      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	4a22      	ldr	r2, [pc, #136]	@ (800ca20 <TIM_TI1_SetConfig+0xdc>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d007      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	4a21      	ldr	r2, [pc, #132]	@ (800ca24 <TIM_TI1_SetConfig+0xe0>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d003      	beq.n	800c9aa <TIM_TI1_SetConfig+0x66>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	4a20      	ldr	r2, [pc, #128]	@ (800ca28 <TIM_TI1_SetConfig+0xe4>)
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	d101      	bne.n	800c9ae <TIM_TI1_SetConfig+0x6a>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e000      	b.n	800c9b0 <TIM_TI1_SetConfig+0x6c>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d008      	beq.n	800c9c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	f023 0303 	bic.w	r3, r3, #3
 800c9ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c9bc:	697a      	ldr	r2, [r7, #20]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4313      	orrs	r3, r2
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e003      	b.n	800c9ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	f043 0301 	orr.w	r3, r3, #1
 800c9cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c9d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	f023 030a 	bic.w	r3, r3, #10
 800c9e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	f003 030a 	and.w	r3, r3, #10
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	40010000 	.word	0x40010000
 800ca14:	40000400 	.word	0x40000400
 800ca18:	40000800 	.word	0x40000800
 800ca1c:	40000c00 	.word	0x40000c00
 800ca20:	40010400 	.word	0x40010400
 800ca24:	40001800 	.word	0x40001800
 800ca28:	40014000 	.word	0x40014000

0800ca2c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
 800ca38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	6a1b      	ldr	r3, [r3, #32]
 800ca44:	f023 0210 	bic.w	r2, r3, #16
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	021b      	lsls	r3, r3, #8
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ca6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	031b      	lsls	r3, r3, #12
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	4313      	orrs	r3, r2
 800ca76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ca7e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	011b      	lsls	r3, r3, #4
 800ca84:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ca88:	697a      	ldr	r2, [r7, #20]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	621a      	str	r2, [r3, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b087      	sub	sp, #28
 800caaa:	af00      	add	r7, sp, #0
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	607a      	str	r2, [r7, #4]
 800cab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6a1b      	ldr	r3, [r3, #32]
 800cab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	69db      	ldr	r3, [r3, #28]
 800caca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	f023 0303 	bic.w	r3, r3, #3
 800cad2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4313      	orrs	r3, r2
 800cada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cae2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	4313      	orrs	r3, r2
 800caee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800caf6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	021b      	lsls	r3, r3, #8
 800cafc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	621a      	str	r2, [r3, #32]
}
 800cb12:	bf00      	nop
 800cb14:	371c      	adds	r7, #28
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b087      	sub	sp, #28
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	60f8      	str	r0, [r7, #12]
 800cb26:	60b9      	str	r1, [r7, #8]
 800cb28:	607a      	str	r2, [r7, #4]
 800cb2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb4a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	021b      	lsls	r3, r3, #8
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cb5c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	031b      	lsls	r3, r3, #12
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800cb70:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	031b      	lsls	r3, r3, #12
 800cb76:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	621a      	str	r2, [r3, #32]
}
 800cb8c:	bf00      	nop
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d101      	bne.n	800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbac:	2302      	movs	r3, #2
 800cbae:	e06d      	b.n	800cc8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	4a30      	ldr	r2, [pc, #192]	@ (800cc98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d004      	beq.n	800cbe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a2f      	ldr	r2, [pc, #188]	@ (800cc9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d108      	bne.n	800cbf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cbea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a20      	ldr	r2, [pc, #128]	@ (800cc98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d022      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc22:	d01d      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a1d      	ldr	r2, [pc, #116]	@ (800cca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d018      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	4a1c      	ldr	r2, [pc, #112]	@ (800cca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d013      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a1a      	ldr	r2, [pc, #104]	@ (800cca8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d00e      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a15      	ldr	r2, [pc, #84]	@ (800cc9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc48:	4293      	cmp	r3, r2
 800cc4a:	d009      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a16      	ldr	r2, [pc, #88]	@ (800ccac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d004      	beq.n	800cc60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a15      	ldr	r2, [pc, #84]	@ (800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d10c      	bne.n	800cc7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	68ba      	ldr	r2, [r7, #8]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	40010000 	.word	0x40010000
 800cc9c:	40010400 	.word	0x40010400
 800cca0:	40000400 	.word	0x40000400
 800cca4:	40000800 	.word	0x40000800
 800cca8:	40000c00 	.word	0x40000c00
 800ccac:	40001800 	.word	0x40001800
 800ccb0:	40014000 	.word	0x40014000

0800ccb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e042      	b.n	800cd4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d106      	bne.n	800ccde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f7f5 f8dd 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2224      	movs	r2, #36	@ 0x24
 800cce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f022 0201 	bic.w	r2, r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fd90 	bl	800d824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f825 	bl	800cd54 <UART_SetConfig>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d101      	bne.n	800cd14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cd10:	2301      	movs	r3, #1
 800cd12:	e01b      	b.n	800cd4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689a      	ldr	r2, [r3, #8]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0201 	orr.w	r2, r2, #1
 800cd42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f000 fe0f 	bl	800d968 <UART_CheckIdleState>
 800cd4a:	4603      	mov	r3, r0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd58:	b092      	sub	sp, #72	@ 0x48
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	689a      	ldr	r2, [r3, #8]
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	431a      	orrs	r2, r3
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	695b      	ldr	r3, [r3, #20]
 800cd72:	431a      	orrs	r2, r3
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	4bbe      	ldr	r3, [pc, #760]	@ (800d07c <UART_SetConfig+0x328>)
 800cd84:	4013      	ands	r3, r2
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	6812      	ldr	r2, [r2, #0]
 800cd8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cd8c:	430b      	orrs	r3, r1
 800cd8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	4ab3      	ldr	r2, [pc, #716]	@ (800d080 <UART_SetConfig+0x32c>)
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	d004      	beq.n	800cdc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	4baf      	ldr	r3, [pc, #700]	@ (800d084 <UART_SetConfig+0x330>)
 800cdc8:	4013      	ands	r3, r2
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	6812      	ldr	r2, [r2, #0]
 800cdce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cdd4:	697b      	ldr	r3, [r7, #20]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdda:	f023 010f 	bic.w	r1, r3, #15
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	430a      	orrs	r2, r1
 800cde8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4aa6      	ldr	r2, [pc, #664]	@ (800d088 <UART_SetConfig+0x334>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d177      	bne.n	800cee4 <UART_SetConfig+0x190>
 800cdf4:	4ba5      	ldr	r3, [pc, #660]	@ (800d08c <UART_SetConfig+0x338>)
 800cdf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cdfc:	2b28      	cmp	r3, #40	@ 0x28
 800cdfe:	d86d      	bhi.n	800cedc <UART_SetConfig+0x188>
 800ce00:	a201      	add	r2, pc, #4	@ (adr r2, 800ce08 <UART_SetConfig+0xb4>)
 800ce02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce06:	bf00      	nop
 800ce08:	0800cead 	.word	0x0800cead
 800ce0c:	0800cedd 	.word	0x0800cedd
 800ce10:	0800cedd 	.word	0x0800cedd
 800ce14:	0800cedd 	.word	0x0800cedd
 800ce18:	0800cedd 	.word	0x0800cedd
 800ce1c:	0800cedd 	.word	0x0800cedd
 800ce20:	0800cedd 	.word	0x0800cedd
 800ce24:	0800cedd 	.word	0x0800cedd
 800ce28:	0800ceb5 	.word	0x0800ceb5
 800ce2c:	0800cedd 	.word	0x0800cedd
 800ce30:	0800cedd 	.word	0x0800cedd
 800ce34:	0800cedd 	.word	0x0800cedd
 800ce38:	0800cedd 	.word	0x0800cedd
 800ce3c:	0800cedd 	.word	0x0800cedd
 800ce40:	0800cedd 	.word	0x0800cedd
 800ce44:	0800cedd 	.word	0x0800cedd
 800ce48:	0800cebd 	.word	0x0800cebd
 800ce4c:	0800cedd 	.word	0x0800cedd
 800ce50:	0800cedd 	.word	0x0800cedd
 800ce54:	0800cedd 	.word	0x0800cedd
 800ce58:	0800cedd 	.word	0x0800cedd
 800ce5c:	0800cedd 	.word	0x0800cedd
 800ce60:	0800cedd 	.word	0x0800cedd
 800ce64:	0800cedd 	.word	0x0800cedd
 800ce68:	0800cec5 	.word	0x0800cec5
 800ce6c:	0800cedd 	.word	0x0800cedd
 800ce70:	0800cedd 	.word	0x0800cedd
 800ce74:	0800cedd 	.word	0x0800cedd
 800ce78:	0800cedd 	.word	0x0800cedd
 800ce7c:	0800cedd 	.word	0x0800cedd
 800ce80:	0800cedd 	.word	0x0800cedd
 800ce84:	0800cedd 	.word	0x0800cedd
 800ce88:	0800cecd 	.word	0x0800cecd
 800ce8c:	0800cedd 	.word	0x0800cedd
 800ce90:	0800cedd 	.word	0x0800cedd
 800ce94:	0800cedd 	.word	0x0800cedd
 800ce98:	0800cedd 	.word	0x0800cedd
 800ce9c:	0800cedd 	.word	0x0800cedd
 800cea0:	0800cedd 	.word	0x0800cedd
 800cea4:	0800cedd 	.word	0x0800cedd
 800cea8:	0800ced5 	.word	0x0800ced5
 800ceac:	2301      	movs	r3, #1
 800ceae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb2:	e222      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800ceb4:	2304      	movs	r3, #4
 800ceb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceba:	e21e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cebc:	2308      	movs	r3, #8
 800cebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec2:	e21a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cec4:	2310      	movs	r3, #16
 800cec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceca:	e216      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cecc:	2320      	movs	r3, #32
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced2:	e212      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800ced4:	2340      	movs	r3, #64	@ 0x40
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceda:	e20e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cedc:	2380      	movs	r3, #128	@ 0x80
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee2:	e20a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	4a69      	ldr	r2, [pc, #420]	@ (800d090 <UART_SetConfig+0x33c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d130      	bne.n	800cf50 <UART_SetConfig+0x1fc>
 800ceee:	4b67      	ldr	r3, [pc, #412]	@ (800d08c <UART_SetConfig+0x338>)
 800cef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d826      	bhi.n	800cf48 <UART_SetConfig+0x1f4>
 800cefa:	a201      	add	r2, pc, #4	@ (adr r2, 800cf00 <UART_SetConfig+0x1ac>)
 800cefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf00:	0800cf19 	.word	0x0800cf19
 800cf04:	0800cf21 	.word	0x0800cf21
 800cf08:	0800cf29 	.word	0x0800cf29
 800cf0c:	0800cf31 	.word	0x0800cf31
 800cf10:	0800cf39 	.word	0x0800cf39
 800cf14:	0800cf41 	.word	0x0800cf41
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e1ec      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf20:	2304      	movs	r3, #4
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e1e8      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf28:	2308      	movs	r3, #8
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e1e4      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf30:	2310      	movs	r3, #16
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e1e0      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf38:	2320      	movs	r3, #32
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e1dc      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf40:	2340      	movs	r3, #64	@ 0x40
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf46:	e1d8      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf48:	2380      	movs	r3, #128	@ 0x80
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4e:	e1d4      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a4f      	ldr	r2, [pc, #316]	@ (800d094 <UART_SetConfig+0x340>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d130      	bne.n	800cfbc <UART_SetConfig+0x268>
 800cf5a:	4b4c      	ldr	r3, [pc, #304]	@ (800d08c <UART_SetConfig+0x338>)
 800cf5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d826      	bhi.n	800cfb4 <UART_SetConfig+0x260>
 800cf66:	a201      	add	r2, pc, #4	@ (adr r2, 800cf6c <UART_SetConfig+0x218>)
 800cf68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf6c:	0800cf85 	.word	0x0800cf85
 800cf70:	0800cf8d 	.word	0x0800cf8d
 800cf74:	0800cf95 	.word	0x0800cf95
 800cf78:	0800cf9d 	.word	0x0800cf9d
 800cf7c:	0800cfa5 	.word	0x0800cfa5
 800cf80:	0800cfad 	.word	0x0800cfad
 800cf84:	2300      	movs	r3, #0
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e1b6      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf8c:	2304      	movs	r3, #4
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e1b2      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf94:	2308      	movs	r3, #8
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9a:	e1ae      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cf9c:	2310      	movs	r3, #16
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa2:	e1aa      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cfa4:	2320      	movs	r3, #32
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfaa:	e1a6      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cfac:	2340      	movs	r3, #64	@ 0x40
 800cfae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb2:	e1a2      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cfb4:	2380      	movs	r3, #128	@ 0x80
 800cfb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfba:	e19e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a35      	ldr	r2, [pc, #212]	@ (800d098 <UART_SetConfig+0x344>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d130      	bne.n	800d028 <UART_SetConfig+0x2d4>
 800cfc6:	4b31      	ldr	r3, [pc, #196]	@ (800d08c <UART_SetConfig+0x338>)
 800cfc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfca:	f003 0307 	and.w	r3, r3, #7
 800cfce:	2b05      	cmp	r3, #5
 800cfd0:	d826      	bhi.n	800d020 <UART_SetConfig+0x2cc>
 800cfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd8 <UART_SetConfig+0x284>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800cff1 	.word	0x0800cff1
 800cfdc:	0800cff9 	.word	0x0800cff9
 800cfe0:	0800d001 	.word	0x0800d001
 800cfe4:	0800d009 	.word	0x0800d009
 800cfe8:	0800d011 	.word	0x0800d011
 800cfec:	0800d019 	.word	0x0800d019
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e180      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800cff8:	2304      	movs	r3, #4
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffe:	e17c      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d000:	2308      	movs	r3, #8
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d006:	e178      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d008:	2310      	movs	r3, #16
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00e:	e174      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d010:	2320      	movs	r3, #32
 800d012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d016:	e170      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d018:	2340      	movs	r3, #64	@ 0x40
 800d01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01e:	e16c      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d020:	2380      	movs	r3, #128	@ 0x80
 800d022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d026:	e168      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	4a1b      	ldr	r2, [pc, #108]	@ (800d09c <UART_SetConfig+0x348>)
 800d02e:	4293      	cmp	r3, r2
 800d030:	d142      	bne.n	800d0b8 <UART_SetConfig+0x364>
 800d032:	4b16      	ldr	r3, [pc, #88]	@ (800d08c <UART_SetConfig+0x338>)
 800d034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	2b05      	cmp	r3, #5
 800d03c:	d838      	bhi.n	800d0b0 <UART_SetConfig+0x35c>
 800d03e:	a201      	add	r2, pc, #4	@ (adr r2, 800d044 <UART_SetConfig+0x2f0>)
 800d040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d044:	0800d05d 	.word	0x0800d05d
 800d048:	0800d065 	.word	0x0800d065
 800d04c:	0800d06d 	.word	0x0800d06d
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d0a1 	.word	0x0800d0a1
 800d058:	0800d0a9 	.word	0x0800d0a9
 800d05c:	2300      	movs	r3, #0
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d062:	e14a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d064:	2304      	movs	r3, #4
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06a:	e146      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d06c:	2308      	movs	r3, #8
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d072:	e142      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d074:	2310      	movs	r3, #16
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07a:	e13e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d07c:	cfff69f3 	.word	0xcfff69f3
 800d080:	58000c00 	.word	0x58000c00
 800d084:	11fff4ff 	.word	0x11fff4ff
 800d088:	40011000 	.word	0x40011000
 800d08c:	58024400 	.word	0x58024400
 800d090:	40004400 	.word	0x40004400
 800d094:	40004800 	.word	0x40004800
 800d098:	40004c00 	.word	0x40004c00
 800d09c:	40005000 	.word	0x40005000
 800d0a0:	2320      	movs	r3, #32
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e128      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d0a8:	2340      	movs	r3, #64	@ 0x40
 800d0aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ae:	e124      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d0b0:	2380      	movs	r3, #128	@ 0x80
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e120      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4acb      	ldr	r2, [pc, #812]	@ (800d3ec <UART_SetConfig+0x698>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d176      	bne.n	800d1b0 <UART_SetConfig+0x45c>
 800d0c2:	4bcb      	ldr	r3, [pc, #812]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0ca:	2b28      	cmp	r3, #40	@ 0x28
 800d0cc:	d86c      	bhi.n	800d1a8 <UART_SetConfig+0x454>
 800d0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d4 <UART_SetConfig+0x380>)
 800d0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d4:	0800d179 	.word	0x0800d179
 800d0d8:	0800d1a9 	.word	0x0800d1a9
 800d0dc:	0800d1a9 	.word	0x0800d1a9
 800d0e0:	0800d1a9 	.word	0x0800d1a9
 800d0e4:	0800d1a9 	.word	0x0800d1a9
 800d0e8:	0800d1a9 	.word	0x0800d1a9
 800d0ec:	0800d1a9 	.word	0x0800d1a9
 800d0f0:	0800d1a9 	.word	0x0800d1a9
 800d0f4:	0800d181 	.word	0x0800d181
 800d0f8:	0800d1a9 	.word	0x0800d1a9
 800d0fc:	0800d1a9 	.word	0x0800d1a9
 800d100:	0800d1a9 	.word	0x0800d1a9
 800d104:	0800d1a9 	.word	0x0800d1a9
 800d108:	0800d1a9 	.word	0x0800d1a9
 800d10c:	0800d1a9 	.word	0x0800d1a9
 800d110:	0800d1a9 	.word	0x0800d1a9
 800d114:	0800d189 	.word	0x0800d189
 800d118:	0800d1a9 	.word	0x0800d1a9
 800d11c:	0800d1a9 	.word	0x0800d1a9
 800d120:	0800d1a9 	.word	0x0800d1a9
 800d124:	0800d1a9 	.word	0x0800d1a9
 800d128:	0800d1a9 	.word	0x0800d1a9
 800d12c:	0800d1a9 	.word	0x0800d1a9
 800d130:	0800d1a9 	.word	0x0800d1a9
 800d134:	0800d191 	.word	0x0800d191
 800d138:	0800d1a9 	.word	0x0800d1a9
 800d13c:	0800d1a9 	.word	0x0800d1a9
 800d140:	0800d1a9 	.word	0x0800d1a9
 800d144:	0800d1a9 	.word	0x0800d1a9
 800d148:	0800d1a9 	.word	0x0800d1a9
 800d14c:	0800d1a9 	.word	0x0800d1a9
 800d150:	0800d1a9 	.word	0x0800d1a9
 800d154:	0800d199 	.word	0x0800d199
 800d158:	0800d1a9 	.word	0x0800d1a9
 800d15c:	0800d1a9 	.word	0x0800d1a9
 800d160:	0800d1a9 	.word	0x0800d1a9
 800d164:	0800d1a9 	.word	0x0800d1a9
 800d168:	0800d1a9 	.word	0x0800d1a9
 800d16c:	0800d1a9 	.word	0x0800d1a9
 800d170:	0800d1a9 	.word	0x0800d1a9
 800d174:	0800d1a1 	.word	0x0800d1a1
 800d178:	2301      	movs	r3, #1
 800d17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17e:	e0bc      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d180:	2304      	movs	r3, #4
 800d182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d186:	e0b8      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d188:	2308      	movs	r3, #8
 800d18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18e:	e0b4      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d190:	2310      	movs	r3, #16
 800d192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d196:	e0b0      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d198:	2320      	movs	r3, #32
 800d19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19e:	e0ac      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1a0:	2340      	movs	r3, #64	@ 0x40
 800d1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a6:	e0a8      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1a8:	2380      	movs	r3, #128	@ 0x80
 800d1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ae:	e0a4      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a8f      	ldr	r2, [pc, #572]	@ (800d3f4 <UART_SetConfig+0x6a0>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d130      	bne.n	800d21c <UART_SetConfig+0x4c8>
 800d1ba:	4b8d      	ldr	r3, [pc, #564]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1be:	f003 0307 	and.w	r3, r3, #7
 800d1c2:	2b05      	cmp	r3, #5
 800d1c4:	d826      	bhi.n	800d214 <UART_SetConfig+0x4c0>
 800d1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1cc <UART_SetConfig+0x478>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d1e5 	.word	0x0800d1e5
 800d1d0:	0800d1ed 	.word	0x0800d1ed
 800d1d4:	0800d1f5 	.word	0x0800d1f5
 800d1d8:	0800d1fd 	.word	0x0800d1fd
 800d1dc:	0800d205 	.word	0x0800d205
 800d1e0:	0800d20d 	.word	0x0800d20d
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e086      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1ec:	2304      	movs	r3, #4
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f2:	e082      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1f4:	2308      	movs	r3, #8
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fa:	e07e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d1fc:	2310      	movs	r3, #16
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d202:	e07a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d204:	2320      	movs	r3, #32
 800d206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20a:	e076      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d20c:	2340      	movs	r3, #64	@ 0x40
 800d20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d212:	e072      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d214:	2380      	movs	r3, #128	@ 0x80
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21a:	e06e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	4a75      	ldr	r2, [pc, #468]	@ (800d3f8 <UART_SetConfig+0x6a4>)
 800d222:	4293      	cmp	r3, r2
 800d224:	d130      	bne.n	800d288 <UART_SetConfig+0x534>
 800d226:	4b72      	ldr	r3, [pc, #456]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22a:	f003 0307 	and.w	r3, r3, #7
 800d22e:	2b05      	cmp	r3, #5
 800d230:	d826      	bhi.n	800d280 <UART_SetConfig+0x52c>
 800d232:	a201      	add	r2, pc, #4	@ (adr r2, 800d238 <UART_SetConfig+0x4e4>)
 800d234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d238:	0800d251 	.word	0x0800d251
 800d23c:	0800d259 	.word	0x0800d259
 800d240:	0800d261 	.word	0x0800d261
 800d244:	0800d269 	.word	0x0800d269
 800d248:	0800d271 	.word	0x0800d271
 800d24c:	0800d279 	.word	0x0800d279
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d256:	e050      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d258:	2304      	movs	r3, #4
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25e:	e04c      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d260:	2308      	movs	r3, #8
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e048      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d268:	2310      	movs	r3, #16
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e044      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d270:	2320      	movs	r3, #32
 800d272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d276:	e040      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d278:	2340      	movs	r3, #64	@ 0x40
 800d27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27e:	e03c      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d280:	2380      	movs	r3, #128	@ 0x80
 800d282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d286:	e038      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a5b      	ldr	r2, [pc, #364]	@ (800d3fc <UART_SetConfig+0x6a8>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d130      	bne.n	800d2f4 <UART_SetConfig+0x5a0>
 800d292:	4b57      	ldr	r3, [pc, #348]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d296:	f003 0307 	and.w	r3, r3, #7
 800d29a:	2b05      	cmp	r3, #5
 800d29c:	d826      	bhi.n	800d2ec <UART_SetConfig+0x598>
 800d29e:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a4 <UART_SetConfig+0x550>)
 800d2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2a4:	0800d2bd 	.word	0x0800d2bd
 800d2a8:	0800d2c5 	.word	0x0800d2c5
 800d2ac:	0800d2cd 	.word	0x0800d2cd
 800d2b0:	0800d2d5 	.word	0x0800d2d5
 800d2b4:	0800d2dd 	.word	0x0800d2dd
 800d2b8:	0800d2e5 	.word	0x0800d2e5
 800d2bc:	2302      	movs	r3, #2
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e01a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2c4:	2304      	movs	r3, #4
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ca:	e016      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2cc:	2308      	movs	r3, #8
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e012      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2d4:	2310      	movs	r3, #16
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e00e      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e2:	e00a      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2e4:	2340      	movs	r3, #64	@ 0x40
 800d2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ea:	e006      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2ec:	2380      	movs	r3, #128	@ 0x80
 800d2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f2:	e002      	b.n	800d2fa <UART_SetConfig+0x5a6>
 800d2f4:	2380      	movs	r3, #128	@ 0x80
 800d2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a3f      	ldr	r2, [pc, #252]	@ (800d3fc <UART_SetConfig+0x6a8>)
 800d300:	4293      	cmp	r3, r2
 800d302:	f040 80f8 	bne.w	800d4f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d306:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d30a:	2b20      	cmp	r3, #32
 800d30c:	dc46      	bgt.n	800d39c <UART_SetConfig+0x648>
 800d30e:	2b02      	cmp	r3, #2
 800d310:	f2c0 8082 	blt.w	800d418 <UART_SetConfig+0x6c4>
 800d314:	3b02      	subs	r3, #2
 800d316:	2b1e      	cmp	r3, #30
 800d318:	d87e      	bhi.n	800d418 <UART_SetConfig+0x6c4>
 800d31a:	a201      	add	r2, pc, #4	@ (adr r2, 800d320 <UART_SetConfig+0x5cc>)
 800d31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d320:	0800d3a3 	.word	0x0800d3a3
 800d324:	0800d419 	.word	0x0800d419
 800d328:	0800d3ab 	.word	0x0800d3ab
 800d32c:	0800d419 	.word	0x0800d419
 800d330:	0800d419 	.word	0x0800d419
 800d334:	0800d419 	.word	0x0800d419
 800d338:	0800d3bb 	.word	0x0800d3bb
 800d33c:	0800d419 	.word	0x0800d419
 800d340:	0800d419 	.word	0x0800d419
 800d344:	0800d419 	.word	0x0800d419
 800d348:	0800d419 	.word	0x0800d419
 800d34c:	0800d419 	.word	0x0800d419
 800d350:	0800d419 	.word	0x0800d419
 800d354:	0800d419 	.word	0x0800d419
 800d358:	0800d3cb 	.word	0x0800d3cb
 800d35c:	0800d419 	.word	0x0800d419
 800d360:	0800d419 	.word	0x0800d419
 800d364:	0800d419 	.word	0x0800d419
 800d368:	0800d419 	.word	0x0800d419
 800d36c:	0800d419 	.word	0x0800d419
 800d370:	0800d419 	.word	0x0800d419
 800d374:	0800d419 	.word	0x0800d419
 800d378:	0800d419 	.word	0x0800d419
 800d37c:	0800d419 	.word	0x0800d419
 800d380:	0800d419 	.word	0x0800d419
 800d384:	0800d419 	.word	0x0800d419
 800d388:	0800d419 	.word	0x0800d419
 800d38c:	0800d419 	.word	0x0800d419
 800d390:	0800d419 	.word	0x0800d419
 800d394:	0800d419 	.word	0x0800d419
 800d398:	0800d40b 	.word	0x0800d40b
 800d39c:	2b40      	cmp	r3, #64	@ 0x40
 800d39e:	d037      	beq.n	800d410 <UART_SetConfig+0x6bc>
 800d3a0:	e03a      	b.n	800d418 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3a2:	f7fd fdf1 	bl	800af88 <HAL_RCCEx_GetD3PCLK1Freq>
 800d3a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3a8:	e03c      	b.n	800d424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fd fe00 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b8:	e034      	b.n	800d424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3ba:	f107 0318 	add.w	r3, r7, #24
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fd ff4c 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3c8:	e02c      	b.n	800d424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ca:	4b09      	ldr	r3, [pc, #36]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d016      	beq.n	800d404 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3d6:	4b06      	ldr	r3, [pc, #24]	@ (800d3f0 <UART_SetConfig+0x69c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	08db      	lsrs	r3, r3, #3
 800d3dc:	f003 0303 	and.w	r3, r3, #3
 800d3e0:	4a07      	ldr	r2, [pc, #28]	@ (800d400 <UART_SetConfig+0x6ac>)
 800d3e2:	fa22 f303 	lsr.w	r3, r2, r3
 800d3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3e8:	e01c      	b.n	800d424 <UART_SetConfig+0x6d0>
 800d3ea:	bf00      	nop
 800d3ec:	40011400 	.word	0x40011400
 800d3f0:	58024400 	.word	0x58024400
 800d3f4:	40007800 	.word	0x40007800
 800d3f8:	40007c00 	.word	0x40007c00
 800d3fc:	58000c00 	.word	0x58000c00
 800d400:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d404:	4b9d      	ldr	r3, [pc, #628]	@ (800d67c <UART_SetConfig+0x928>)
 800d406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d408:	e00c      	b.n	800d424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d40a:	4b9d      	ldr	r3, [pc, #628]	@ (800d680 <UART_SetConfig+0x92c>)
 800d40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40e:	e009      	b.n	800d424 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d410:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d416:	e005      	b.n	800d424 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d418:	2300      	movs	r3, #0
 800d41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d41c:	2301      	movs	r3, #1
 800d41e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d422:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d426:	2b00      	cmp	r3, #0
 800d428:	f000 81de 	beq.w	800d7e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d430:	4a94      	ldr	r2, [pc, #592]	@ (800d684 <UART_SetConfig+0x930>)
 800d432:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d436:	461a      	mov	r2, r3
 800d438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d43e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	685a      	ldr	r2, [r3, #4]
 800d444:	4613      	mov	r3, r2
 800d446:	005b      	lsls	r3, r3, #1
 800d448:	4413      	add	r3, r2
 800d44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d305      	bcc.n	800d45c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d458:	429a      	cmp	r2, r3
 800d45a:	d903      	bls.n	800d464 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d462:	e1c1      	b.n	800d7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d466:	2200      	movs	r2, #0
 800d468:	60bb      	str	r3, [r7, #8]
 800d46a:	60fa      	str	r2, [r7, #12]
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d470:	4a84      	ldr	r2, [pc, #528]	@ (800d684 <UART_SetConfig+0x930>)
 800d472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d476:	b29b      	uxth	r3, r3
 800d478:	2200      	movs	r2, #0
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	607a      	str	r2, [r7, #4]
 800d47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d482:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d486:	f7f2 ff2b 	bl	80002e0 <__aeabi_uldivmod>
 800d48a:	4602      	mov	r2, r0
 800d48c:	460b      	mov	r3, r1
 800d48e:	4610      	mov	r0, r2
 800d490:	4619      	mov	r1, r3
 800d492:	f04f 0200 	mov.w	r2, #0
 800d496:	f04f 0300 	mov.w	r3, #0
 800d49a:	020b      	lsls	r3, r1, #8
 800d49c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4a0:	0202      	lsls	r2, r0, #8
 800d4a2:	6979      	ldr	r1, [r7, #20]
 800d4a4:	6849      	ldr	r1, [r1, #4]
 800d4a6:	0849      	lsrs	r1, r1, #1
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	eb12 0804 	adds.w	r8, r2, r4
 800d4b2:	eb43 0905 	adc.w	r9, r3, r5
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	469a      	mov	sl, r3
 800d4be:	4693      	mov	fp, r2
 800d4c0:	4652      	mov	r2, sl
 800d4c2:	465b      	mov	r3, fp
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	4649      	mov	r1, r9
 800d4c8:	f7f2 ff0a 	bl	80002e0 <__aeabi_uldivmod>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4da:	d308      	bcc.n	800d4ee <UART_SetConfig+0x79a>
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4e2:	d204      	bcs.n	800d4ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4ea:	60da      	str	r2, [r3, #12]
 800d4ec:	e17c      	b.n	800d7e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4f4:	e178      	b.n	800d7e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	69db      	ldr	r3, [r3, #28]
 800d4fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4fe:	f040 80c5 	bne.w	800d68c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d502:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d506:	2b20      	cmp	r3, #32
 800d508:	dc48      	bgt.n	800d59c <UART_SetConfig+0x848>
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	db7b      	blt.n	800d606 <UART_SetConfig+0x8b2>
 800d50e:	2b20      	cmp	r3, #32
 800d510:	d879      	bhi.n	800d606 <UART_SetConfig+0x8b2>
 800d512:	a201      	add	r2, pc, #4	@ (adr r2, 800d518 <UART_SetConfig+0x7c4>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d5a3 	.word	0x0800d5a3
 800d51c:	0800d5ab 	.word	0x0800d5ab
 800d520:	0800d607 	.word	0x0800d607
 800d524:	0800d607 	.word	0x0800d607
 800d528:	0800d5b3 	.word	0x0800d5b3
 800d52c:	0800d607 	.word	0x0800d607
 800d530:	0800d607 	.word	0x0800d607
 800d534:	0800d607 	.word	0x0800d607
 800d538:	0800d5c3 	.word	0x0800d5c3
 800d53c:	0800d607 	.word	0x0800d607
 800d540:	0800d607 	.word	0x0800d607
 800d544:	0800d607 	.word	0x0800d607
 800d548:	0800d607 	.word	0x0800d607
 800d54c:	0800d607 	.word	0x0800d607
 800d550:	0800d607 	.word	0x0800d607
 800d554:	0800d607 	.word	0x0800d607
 800d558:	0800d5d3 	.word	0x0800d5d3
 800d55c:	0800d607 	.word	0x0800d607
 800d560:	0800d607 	.word	0x0800d607
 800d564:	0800d607 	.word	0x0800d607
 800d568:	0800d607 	.word	0x0800d607
 800d56c:	0800d607 	.word	0x0800d607
 800d570:	0800d607 	.word	0x0800d607
 800d574:	0800d607 	.word	0x0800d607
 800d578:	0800d607 	.word	0x0800d607
 800d57c:	0800d607 	.word	0x0800d607
 800d580:	0800d607 	.word	0x0800d607
 800d584:	0800d607 	.word	0x0800d607
 800d588:	0800d607 	.word	0x0800d607
 800d58c:	0800d607 	.word	0x0800d607
 800d590:	0800d607 	.word	0x0800d607
 800d594:	0800d607 	.word	0x0800d607
 800d598:	0800d5f9 	.word	0x0800d5f9
 800d59c:	2b40      	cmp	r3, #64	@ 0x40
 800d59e:	d02e      	beq.n	800d5fe <UART_SetConfig+0x8aa>
 800d5a0:	e031      	b.n	800d606 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5a2:	f7fb fd3b 	bl	800901c <HAL_RCC_GetPCLK1Freq>
 800d5a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5a8:	e033      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5aa:	f7fb fd4d 	bl	8009048 <HAL_RCC_GetPCLK2Freq>
 800d5ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5b0:	e02f      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fd fcfc 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5c0:	e027      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5c2:	f107 0318 	add.w	r3, r7, #24
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fd fe48 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5d0:	e01f      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5d2:	4b2d      	ldr	r3, [pc, #180]	@ (800d688 <UART_SetConfig+0x934>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f003 0320 	and.w	r3, r3, #32
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d009      	beq.n	800d5f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5de:	4b2a      	ldr	r3, [pc, #168]	@ (800d688 <UART_SetConfig+0x934>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	08db      	lsrs	r3, r3, #3
 800d5e4:	f003 0303 	and.w	r3, r3, #3
 800d5e8:	4a24      	ldr	r2, [pc, #144]	@ (800d67c <UART_SetConfig+0x928>)
 800d5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800d5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5f0:	e00f      	b.n	800d612 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5f2:	4b22      	ldr	r3, [pc, #136]	@ (800d67c <UART_SetConfig+0x928>)
 800d5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f6:	e00c      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d5f8:	4b21      	ldr	r3, [pc, #132]	@ (800d680 <UART_SetConfig+0x92c>)
 800d5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5fc:	e009      	b.n	800d612 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d604:	e005      	b.n	800d612 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d614:	2b00      	cmp	r3, #0
 800d616:	f000 80e7 	beq.w	800d7e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d61e:	4a19      	ldr	r2, [pc, #100]	@ (800d684 <UART_SetConfig+0x930>)
 800d620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d624:	461a      	mov	r2, r3
 800d626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d628:	fbb3 f3f2 	udiv	r3, r3, r2
 800d62c:	005a      	lsls	r2, r3, #1
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	085b      	lsrs	r3, r3, #1
 800d634:	441a      	add	r2, r3
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d63e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d642:	2b0f      	cmp	r3, #15
 800d644:	d916      	bls.n	800d674 <UART_SetConfig+0x920>
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d64c:	d212      	bcs.n	800d674 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d650:	b29b      	uxth	r3, r3
 800d652:	f023 030f 	bic.w	r3, r3, #15
 800d656:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65a:	085b      	lsrs	r3, r3, #1
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	f003 0307 	and.w	r3, r3, #7
 800d662:	b29a      	uxth	r2, r3
 800d664:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d666:	4313      	orrs	r3, r2
 800d668:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d670:	60da      	str	r2, [r3, #12]
 800d672:	e0b9      	b.n	800d7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d67a:	e0b5      	b.n	800d7e8 <UART_SetConfig+0xa94>
 800d67c:	03d09000 	.word	0x03d09000
 800d680:	003d0900 	.word	0x003d0900
 800d684:	08018ed0 	.word	0x08018ed0
 800d688:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d68c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d690:	2b20      	cmp	r3, #32
 800d692:	dc49      	bgt.n	800d728 <UART_SetConfig+0x9d4>
 800d694:	2b00      	cmp	r3, #0
 800d696:	db7c      	blt.n	800d792 <UART_SetConfig+0xa3e>
 800d698:	2b20      	cmp	r3, #32
 800d69a:	d87a      	bhi.n	800d792 <UART_SetConfig+0xa3e>
 800d69c:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a4 <UART_SetConfig+0x950>)
 800d69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a2:	bf00      	nop
 800d6a4:	0800d72f 	.word	0x0800d72f
 800d6a8:	0800d737 	.word	0x0800d737
 800d6ac:	0800d793 	.word	0x0800d793
 800d6b0:	0800d793 	.word	0x0800d793
 800d6b4:	0800d73f 	.word	0x0800d73f
 800d6b8:	0800d793 	.word	0x0800d793
 800d6bc:	0800d793 	.word	0x0800d793
 800d6c0:	0800d793 	.word	0x0800d793
 800d6c4:	0800d74f 	.word	0x0800d74f
 800d6c8:	0800d793 	.word	0x0800d793
 800d6cc:	0800d793 	.word	0x0800d793
 800d6d0:	0800d793 	.word	0x0800d793
 800d6d4:	0800d793 	.word	0x0800d793
 800d6d8:	0800d793 	.word	0x0800d793
 800d6dc:	0800d793 	.word	0x0800d793
 800d6e0:	0800d793 	.word	0x0800d793
 800d6e4:	0800d75f 	.word	0x0800d75f
 800d6e8:	0800d793 	.word	0x0800d793
 800d6ec:	0800d793 	.word	0x0800d793
 800d6f0:	0800d793 	.word	0x0800d793
 800d6f4:	0800d793 	.word	0x0800d793
 800d6f8:	0800d793 	.word	0x0800d793
 800d6fc:	0800d793 	.word	0x0800d793
 800d700:	0800d793 	.word	0x0800d793
 800d704:	0800d793 	.word	0x0800d793
 800d708:	0800d793 	.word	0x0800d793
 800d70c:	0800d793 	.word	0x0800d793
 800d710:	0800d793 	.word	0x0800d793
 800d714:	0800d793 	.word	0x0800d793
 800d718:	0800d793 	.word	0x0800d793
 800d71c:	0800d793 	.word	0x0800d793
 800d720:	0800d793 	.word	0x0800d793
 800d724:	0800d785 	.word	0x0800d785
 800d728:	2b40      	cmp	r3, #64	@ 0x40
 800d72a:	d02e      	beq.n	800d78a <UART_SetConfig+0xa36>
 800d72c:	e031      	b.n	800d792 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d72e:	f7fb fc75 	bl	800901c <HAL_RCC_GetPCLK1Freq>
 800d732:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d734:	e033      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d736:	f7fb fc87 	bl	8009048 <HAL_RCC_GetPCLK2Freq>
 800d73a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d73c:	e02f      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d73e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d742:	4618      	mov	r0, r3
 800d744:	f7fd fc36 	bl	800afb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d74c:	e027      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d74e:	f107 0318 	add.w	r3, r7, #24
 800d752:	4618      	mov	r0, r3
 800d754:	f7fd fd82 	bl	800b25c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d75c:	e01f      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d75e:	4b2d      	ldr	r3, [pc, #180]	@ (800d814 <UART_SetConfig+0xac0>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f003 0320 	and.w	r3, r3, #32
 800d766:	2b00      	cmp	r3, #0
 800d768:	d009      	beq.n	800d77e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d76a:	4b2a      	ldr	r3, [pc, #168]	@ (800d814 <UART_SetConfig+0xac0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	08db      	lsrs	r3, r3, #3
 800d770:	f003 0303 	and.w	r3, r3, #3
 800d774:	4a28      	ldr	r2, [pc, #160]	@ (800d818 <UART_SetConfig+0xac4>)
 800d776:	fa22 f303 	lsr.w	r3, r2, r3
 800d77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d77c:	e00f      	b.n	800d79e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d77e:	4b26      	ldr	r3, [pc, #152]	@ (800d818 <UART_SetConfig+0xac4>)
 800d780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d782:	e00c      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d784:	4b25      	ldr	r3, [pc, #148]	@ (800d81c <UART_SetConfig+0xac8>)
 800d786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d788:	e009      	b.n	800d79e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d78a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d78e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d790:	e005      	b.n	800d79e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d792:	2300      	movs	r3, #0
 800d794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d79c:	bf00      	nop
    }

    if (pclk != 0U)
 800d79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d021      	beq.n	800d7e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800d820 <UART_SetConfig+0xacc>)
 800d7aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	085b      	lsrs	r3, r3, #1
 800d7bc:	441a      	add	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ca:	2b0f      	cmp	r3, #15
 800d7cc:	d909      	bls.n	800d7e2 <UART_SetConfig+0xa8e>
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7d4:	d205      	bcs.n	800d7e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	60da      	str	r2, [r3, #12]
 800d7e0:	e002      	b.n	800d7e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	2200      	movs	r2, #0
 800d802:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d804:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3748      	adds	r7, #72	@ 0x48
 800d80c:	46bd      	mov	sp, r7
 800d80e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d812:	bf00      	nop
 800d814:	58024400 	.word	0x58024400
 800d818:	03d09000 	.word	0x03d09000
 800d81c:	003d0900 	.word	0x003d0900
 800d820:	08018ed0 	.word	0x08018ed0

0800d824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d830:	f003 0308 	and.w	r3, r3, #8
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00a      	beq.n	800d84e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	430a      	orrs	r2, r1
 800d84c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00a      	beq.n	800d870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	430a      	orrs	r2, r1
 800d86e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d874:	f003 0302 	and.w	r3, r3, #2
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d00a      	beq.n	800d892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	430a      	orrs	r2, r1
 800d890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d896:	f003 0304 	and.w	r3, r3, #4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00a      	beq.n	800d8b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	685b      	ldr	r3, [r3, #4]
 800d8a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	430a      	orrs	r2, r1
 800d8b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b8:	f003 0310 	and.w	r3, r3, #16
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d00a      	beq.n	800d8d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	430a      	orrs	r2, r1
 800d8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8da:	f003 0320 	and.w	r3, r3, #32
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00a      	beq.n	800d8f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	430a      	orrs	r2, r1
 800d8f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d900:	2b00      	cmp	r3, #0
 800d902:	d01a      	beq.n	800d93a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	430a      	orrs	r2, r1
 800d918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d91e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d922:	d10a      	bne.n	800d93a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d93e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d942:	2b00      	cmp	r3, #0
 800d944:	d00a      	beq.n	800d95c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	430a      	orrs	r2, r1
 800d95a:	605a      	str	r2, [r3, #4]
  }
}
 800d95c:	bf00      	nop
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b098      	sub	sp, #96	@ 0x60
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d978:	f7f4 fe2a 	bl	80025d0 <HAL_GetTick>
 800d97c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f003 0308 	and.w	r3, r3, #8
 800d988:	2b08      	cmp	r3, #8
 800d98a:	d12f      	bne.n	800d9ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d98c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d994:	2200      	movs	r2, #0
 800d996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f88e 	bl	800dabc <UART_WaitOnFlagUntilTimeout>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d022      	beq.n	800d9ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ae:	e853 3f00 	ldrex	r3, [r3]
 800d9b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9cc:	e841 2300 	strex	r3, r2, [r1]
 800d9d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e6      	bne.n	800d9a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2220      	movs	r2, #32
 800d9dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e063      	b.n	800dab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 0304 	and.w	r3, r3, #4
 800d9f6:	2b04      	cmp	r3, #4
 800d9f8:	d149      	bne.n	800da8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da02:	2200      	movs	r2, #0
 800da04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f857 	bl	800dabc <UART_WaitOnFlagUntilTimeout>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d03c      	beq.n	800da8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da1c:	e853 3f00 	ldrex	r3, [r3]
 800da20:	623b      	str	r3, [r7, #32]
   return(result);
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da32:	633b      	str	r3, [r7, #48]	@ 0x30
 800da34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da3a:	e841 2300 	strex	r3, r2, [r1]
 800da3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da42:	2b00      	cmp	r3, #0
 800da44:	d1e6      	bne.n	800da14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	3308      	adds	r3, #8
 800da4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	e853 3f00 	ldrex	r3, [r3]
 800da54:	60fb      	str	r3, [r7, #12]
   return(result);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f023 0301 	bic.w	r3, r3, #1
 800da5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3308      	adds	r3, #8
 800da64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da66:	61fa      	str	r2, [r7, #28]
 800da68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	69b9      	ldr	r1, [r7, #24]
 800da6c:	69fa      	ldr	r2, [r7, #28]
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	617b      	str	r3, [r7, #20]
   return(result);
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e5      	bne.n	800da46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2220      	movs	r2, #32
 800da7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da8a:	2303      	movs	r3, #3
 800da8c:	e012      	b.n	800dab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2220      	movs	r2, #32
 800da92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2220      	movs	r2, #32
 800da9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3758      	adds	r7, #88	@ 0x58
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	603b      	str	r3, [r7, #0]
 800dac8:	4613      	mov	r3, r2
 800daca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dacc:	e04f      	b.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dad4:	d04b      	beq.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dad6:	f7f4 fd7b 	bl	80025d0 <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	69ba      	ldr	r2, [r7, #24]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d302      	bcc.n	800daec <UART_WaitOnFlagUntilTimeout+0x30>
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800daec:	2303      	movs	r3, #3
 800daee:	e04e      	b.n	800db8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f003 0304 	and.w	r3, r3, #4
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d037      	beq.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b80      	cmp	r3, #128	@ 0x80
 800db02:	d034      	beq.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b40      	cmp	r3, #64	@ 0x40
 800db08:	d031      	beq.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	69db      	ldr	r3, [r3, #28]
 800db10:	f003 0308 	and.w	r3, r3, #8
 800db14:	2b08      	cmp	r3, #8
 800db16:	d110      	bne.n	800db3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2208      	movs	r2, #8
 800db1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 f839 	bl	800db98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2208      	movs	r2, #8
 800db2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e029      	b.n	800db8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69db      	ldr	r3, [r3, #28]
 800db40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db48:	d111      	bne.n	800db6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 f81f 	bl	800db98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2220      	movs	r2, #32
 800db5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800db6a:	2303      	movs	r3, #3
 800db6c:	e00f      	b.n	800db8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	69da      	ldr	r2, [r3, #28]
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	4013      	ands	r3, r2
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	bf0c      	ite	eq
 800db7e:	2301      	moveq	r3, #1
 800db80:	2300      	movne	r3, #0
 800db82:	b2db      	uxtb	r3, r3
 800db84:	461a      	mov	r2, r3
 800db86:	79fb      	ldrb	r3, [r7, #7]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d0a0      	beq.n	800dace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db98:	b480      	push	{r7}
 800db9a:	b095      	sub	sp, #84	@ 0x54
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dba8:	e853 3f00 	ldrex	r3, [r3]
 800dbac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbb0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbbe:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e6      	bne.n	800dba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	3308      	adds	r3, #8
 800dbd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	e853 3f00 	ldrex	r3, [r3]
 800dbe0:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbe2:	69fa      	ldr	r2, [r7, #28]
 800dbe4:	4b1e      	ldr	r3, [pc, #120]	@ (800dc60 <UART_EndRxTransfer+0xc8>)
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	3308      	adds	r3, #8
 800dbf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dbf4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbfa:	e841 2300 	strex	r3, r2, [r1]
 800dbfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d1e5      	bne.n	800dbd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d118      	bne.n	800dc40 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	e853 3f00 	ldrex	r3, [r3]
 800dc1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	f023 0310 	bic.w	r3, r3, #16
 800dc22:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc2c:	61bb      	str	r3, [r7, #24]
 800dc2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc30:	6979      	ldr	r1, [r7, #20]
 800dc32:	69ba      	ldr	r2, [r7, #24]
 800dc34:	e841 2300 	strex	r3, r2, [r1]
 800dc38:	613b      	str	r3, [r7, #16]
   return(result);
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d1e6      	bne.n	800dc0e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2220      	movs	r2, #32
 800dc44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc54:	bf00      	nop
 800dc56:	3754      	adds	r7, #84	@ 0x54
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	effffffe 	.word	0xeffffffe

0800dc64 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d101      	bne.n	800dc7c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e056      	b.n	800dd2a <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d106      	bne.n	800dc94 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7f4 f902 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2224      	movs	r2, #36	@ 0x24
 800dc98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f022 0201 	bic.w	r2, r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f7ff fdb5 	bl	800d824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7ff f84a 	bl	800cd54 <UART_SetConfig>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d101      	bne.n	800dcca <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e02f      	b.n	800dd2a <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	689a      	ldr	r2, [r3, #8]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dcd8:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	68ba      	ldr	r2, [r7, #8]
 800dcea:	430a      	orrs	r2, r1
 800dcec:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	055b      	lsls	r3, r3, #21
 800dcf2:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	041b      	lsls	r3, r3, #16
 800dcf8:	697a      	ldr	r2, [r7, #20]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	4b0b      	ldr	r3, [pc, #44]	@ (800dd34 <HAL_RS485Ex_Init+0xd0>)
 800dd06:	4013      	ands	r3, r2
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	6812      	ldr	r2, [r2, #0]
 800dd0c:	6979      	ldr	r1, [r7, #20]
 800dd0e:	430b      	orrs	r3, r1
 800dd10:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f042 0201 	orr.w	r2, r2, #1
 800dd20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f7ff fe20 	bl	800d968 <UART_CheckIdleState>
 800dd28:	4603      	mov	r3, r0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3718      	adds	r7, #24
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	fc00ffff 	.word	0xfc00ffff

0800dd38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d101      	bne.n	800dd4e <HAL_UARTEx_DisableFifoMode+0x16>
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	e027      	b.n	800dd9e <HAL_UARTEx_DisableFifoMode+0x66>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2224      	movs	r2, #36	@ 0x24
 800dd5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f022 0201 	bic.w	r2, r2, #1
 800dd74:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dd7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3714      	adds	r7, #20
 800dda2:	46bd      	mov	sp, r7
 800dda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddaa:	b580      	push	{r7, lr}
 800ddac:	b084      	sub	sp, #16
 800ddae:	af00      	add	r7, sp, #0
 800ddb0:	6078      	str	r0, [r7, #4]
 800ddb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d101      	bne.n	800ddc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	e02d      	b.n	800de1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2224      	movs	r2, #36	@ 0x24
 800ddce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f022 0201 	bic.w	r2, r2, #1
 800dde8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	689b      	ldr	r3, [r3, #8]
 800ddf0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	430a      	orrs	r2, r1
 800ddfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 f850 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	68fa      	ldr	r2, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2220      	movs	r2, #32
 800de10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de36:	2b01      	cmp	r3, #1
 800de38:	d101      	bne.n	800de3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800de3a:	2302      	movs	r3, #2
 800de3c:	e02d      	b.n	800de9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2224      	movs	r2, #36	@ 0x24
 800de4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 0201 	bic.w	r2, r2, #1
 800de64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	430a      	orrs	r2, r1
 800de78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f812 	bl	800dea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2220      	movs	r2, #32
 800de8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
	...

0800dea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b085      	sub	sp, #20
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d108      	bne.n	800dec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dec4:	e031      	b.n	800df2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dec6:	2310      	movs	r3, #16
 800dec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800deca:	2310      	movs	r3, #16
 800decc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	0e5b      	lsrs	r3, r3, #25
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	f003 0307 	and.w	r3, r3, #7
 800dedc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	0f5b      	lsrs	r3, r3, #29
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	7b3a      	ldrb	r2, [r7, #12]
 800def2:	4911      	ldr	r1, [pc, #68]	@ (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800def4:	5c8a      	ldrb	r2, [r1, r2]
 800def6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800defa:	7b3a      	ldrb	r2, [r7, #12]
 800defc:	490f      	ldr	r1, [pc, #60]	@ (800df3c <UARTEx_SetNbDataToProcess+0x98>)
 800defe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df00:	fb93 f3f2 	sdiv	r3, r3, r2
 800df04:	b29a      	uxth	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df0c:	7bfb      	ldrb	r3, [r7, #15]
 800df0e:	7b7a      	ldrb	r2, [r7, #13]
 800df10:	4909      	ldr	r1, [pc, #36]	@ (800df38 <UARTEx_SetNbDataToProcess+0x94>)
 800df12:	5c8a      	ldrb	r2, [r1, r2]
 800df14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df18:	7b7a      	ldrb	r2, [r7, #13]
 800df1a:	4908      	ldr	r1, [pc, #32]	@ (800df3c <UARTEx_SetNbDataToProcess+0x98>)
 800df1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800df22:	b29a      	uxth	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	08018ee8 	.word	0x08018ee8
 800df3c:	08018ef0 	.word	0x08018ef0

0800df40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df40:	b084      	sub	sp, #16
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
 800df4a:	f107 001c 	add.w	r0, r7, #28
 800df4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800df52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800df56:	2b01      	cmp	r3, #1
 800df58:	d121      	bne.n	800df9e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	68da      	ldr	r2, [r3, #12]
 800df6a:	4b2c      	ldr	r3, [pc, #176]	@ (800e01c <USB_CoreInit+0xdc>)
 800df6c:	4013      	ands	r3, r2
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800df7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df82:	2b01      	cmp	r3, #1
 800df84:	d105      	bne.n	800df92 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f001 fa3e 	bl	800f414 <USB_CoreReset>
 800df98:	4603      	mov	r3, r0
 800df9a:	73fb      	strb	r3, [r7, #15]
 800df9c:	e01b      	b.n	800dfd6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f001 fa32 	bl	800f414 <USB_CoreReset>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dfb4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d106      	bne.n	800dfca <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	639a      	str	r2, [r3, #56]	@ 0x38
 800dfc8:	e005      	b.n	800dfd6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dfd6:	7fbb      	ldrb	r3, [r7, #30]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d116      	bne.n	800e00a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dfea:	4b0d      	ldr	r3, [pc, #52]	@ (800e020 <USB_CoreInit+0xe0>)
 800dfec:	4313      	orrs	r3, r2
 800dfee:	687a      	ldr	r2, [r7, #4]
 800dff0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	f043 0206 	orr.w	r2, r3, #6
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	f043 0220 	orr.w	r2, r3, #32
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e016:	b004      	add	sp, #16
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	ffbdffbf 	.word	0xffbdffbf
 800e020:	03ee0000 	.word	0x03ee0000

0800e024 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	4613      	mov	r3, r2
 800e030:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	2b02      	cmp	r3, #2
 800e036:	d165      	bne.n	800e104 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	4a41      	ldr	r2, [pc, #260]	@ (800e140 <USB_SetTurnaroundTime+0x11c>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d906      	bls.n	800e04e <USB_SetTurnaroundTime+0x2a>
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	4a40      	ldr	r2, [pc, #256]	@ (800e144 <USB_SetTurnaroundTime+0x120>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d202      	bcs.n	800e04e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e048:	230f      	movs	r3, #15
 800e04a:	617b      	str	r3, [r7, #20]
 800e04c:	e062      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	4a3c      	ldr	r2, [pc, #240]	@ (800e144 <USB_SetTurnaroundTime+0x120>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d306      	bcc.n	800e064 <USB_SetTurnaroundTime+0x40>
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	4a3b      	ldr	r2, [pc, #236]	@ (800e148 <USB_SetTurnaroundTime+0x124>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d202      	bcs.n	800e064 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e05e:	230e      	movs	r3, #14
 800e060:	617b      	str	r3, [r7, #20]
 800e062:	e057      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	4a38      	ldr	r2, [pc, #224]	@ (800e148 <USB_SetTurnaroundTime+0x124>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d306      	bcc.n	800e07a <USB_SetTurnaroundTime+0x56>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	4a37      	ldr	r2, [pc, #220]	@ (800e14c <USB_SetTurnaroundTime+0x128>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d202      	bcs.n	800e07a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e074:	230d      	movs	r3, #13
 800e076:	617b      	str	r3, [r7, #20]
 800e078:	e04c      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	4a33      	ldr	r2, [pc, #204]	@ (800e14c <USB_SetTurnaroundTime+0x128>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d306      	bcc.n	800e090 <USB_SetTurnaroundTime+0x6c>
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	4a32      	ldr	r2, [pc, #200]	@ (800e150 <USB_SetTurnaroundTime+0x12c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d802      	bhi.n	800e090 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e08a:	230c      	movs	r3, #12
 800e08c:	617b      	str	r3, [r7, #20]
 800e08e:	e041      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	4a2f      	ldr	r2, [pc, #188]	@ (800e150 <USB_SetTurnaroundTime+0x12c>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d906      	bls.n	800e0a6 <USB_SetTurnaroundTime+0x82>
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	4a2e      	ldr	r2, [pc, #184]	@ (800e154 <USB_SetTurnaroundTime+0x130>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d802      	bhi.n	800e0a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e0a0:	230b      	movs	r3, #11
 800e0a2:	617b      	str	r3, [r7, #20]
 800e0a4:	e036      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	4a2a      	ldr	r2, [pc, #168]	@ (800e154 <USB_SetTurnaroundTime+0x130>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d906      	bls.n	800e0bc <USB_SetTurnaroundTime+0x98>
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	4a29      	ldr	r2, [pc, #164]	@ (800e158 <USB_SetTurnaroundTime+0x134>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d802      	bhi.n	800e0bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e0b6:	230a      	movs	r3, #10
 800e0b8:	617b      	str	r3, [r7, #20]
 800e0ba:	e02b      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	4a26      	ldr	r2, [pc, #152]	@ (800e158 <USB_SetTurnaroundTime+0x134>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d906      	bls.n	800e0d2 <USB_SetTurnaroundTime+0xae>
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	4a25      	ldr	r2, [pc, #148]	@ (800e15c <USB_SetTurnaroundTime+0x138>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d202      	bcs.n	800e0d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e0cc:	2309      	movs	r3, #9
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e020      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	4a21      	ldr	r2, [pc, #132]	@ (800e15c <USB_SetTurnaroundTime+0x138>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d306      	bcc.n	800e0e8 <USB_SetTurnaroundTime+0xc4>
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	4a20      	ldr	r2, [pc, #128]	@ (800e160 <USB_SetTurnaroundTime+0x13c>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d802      	bhi.n	800e0e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e0e2:	2308      	movs	r3, #8
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e015      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	4a1d      	ldr	r2, [pc, #116]	@ (800e160 <USB_SetTurnaroundTime+0x13c>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d906      	bls.n	800e0fe <USB_SetTurnaroundTime+0xda>
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	4a1c      	ldr	r2, [pc, #112]	@ (800e164 <USB_SetTurnaroundTime+0x140>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d202      	bcs.n	800e0fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e0f8:	2307      	movs	r3, #7
 800e0fa:	617b      	str	r3, [r7, #20]
 800e0fc:	e00a      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e0fe:	2306      	movs	r3, #6
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e007      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d102      	bne.n	800e110 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e10a:	2309      	movs	r3, #9
 800e10c:	617b      	str	r3, [r7, #20]
 800e10e:	e001      	b.n	800e114 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e110:	2309      	movs	r3, #9
 800e112:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68da      	ldr	r2, [r3, #12]
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	029b      	lsls	r3, r3, #10
 800e128:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e12c:	431a      	orrs	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	371c      	adds	r7, #28
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	00d8acbf 	.word	0x00d8acbf
 800e144:	00e4e1c0 	.word	0x00e4e1c0
 800e148:	00f42400 	.word	0x00f42400
 800e14c:	01067380 	.word	0x01067380
 800e150:	011a499f 	.word	0x011a499f
 800e154:	01312cff 	.word	0x01312cff
 800e158:	014ca43f 	.word	0x014ca43f
 800e15c:	016e3600 	.word	0x016e3600
 800e160:	01a6ab1f 	.word	0x01a6ab1f
 800e164:	01e84800 	.word	0x01e84800

0800e168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e168:	b480      	push	{r7}
 800e16a:	b083      	sub	sp, #12
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	f043 0201 	orr.w	r2, r3, #1
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e17c:	2300      	movs	r3, #0
}
 800e17e:	4618      	mov	r0, r3
 800e180:	370c      	adds	r7, #12
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e18a:	b480      	push	{r7}
 800e18c:	b083      	sub	sp, #12
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	f023 0201 	bic.w	r2, r3, #1
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1aa:	4770      	bx	lr

0800e1ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e1c8:	78fb      	ldrb	r3, [r7, #3]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d115      	bne.n	800e1fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e1da:	200a      	movs	r0, #10
 800e1dc:	f7f4 fa04 	bl	80025e8 <HAL_Delay>
      ms += 10U;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	330a      	adds	r3, #10
 800e1e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f001 f884 	bl	800f2f4 <USB_GetMode>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d01e      	beq.n	800e230 <USB_SetCurrentMode+0x84>
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800e1f6:	d9f0      	bls.n	800e1da <USB_SetCurrentMode+0x2e>
 800e1f8:	e01a      	b.n	800e230 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e1fa:	78fb      	ldrb	r3, [r7, #3]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d115      	bne.n	800e22c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	68db      	ldr	r3, [r3, #12]
 800e204:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e20c:	200a      	movs	r0, #10
 800e20e:	f7f4 f9eb 	bl	80025e8 <HAL_Delay>
      ms += 10U;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	330a      	adds	r3, #10
 800e216:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f001 f86b 	bl	800f2f4 <USB_GetMode>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d005      	beq.n	800e230 <USB_SetCurrentMode+0x84>
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2bc7      	cmp	r3, #199	@ 0xc7
 800e228:	d9f0      	bls.n	800e20c <USB_SetCurrentMode+0x60>
 800e22a:	e001      	b.n	800e230 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e005      	b.n	800e23c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2bc8      	cmp	r3, #200	@ 0xc8
 800e234:	d101      	bne.n	800e23a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e236:	2301      	movs	r3, #1
 800e238:	e000      	b.n	800e23c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e244:	b084      	sub	sp, #16
 800e246:	b580      	push	{r7, lr}
 800e248:	b086      	sub	sp, #24
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e256:	2300      	movs	r3, #0
 800e258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e25e:	2300      	movs	r3, #0
 800e260:	613b      	str	r3, [r7, #16]
 800e262:	e009      	b.n	800e278 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	3340      	adds	r3, #64	@ 0x40
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4413      	add	r3, r2
 800e26e:	2200      	movs	r2, #0
 800e270:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	3301      	adds	r3, #1
 800e276:	613b      	str	r3, [r7, #16]
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2b0e      	cmp	r3, #14
 800e27c:	d9f2      	bls.n	800e264 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e27e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e282:	2b00      	cmp	r3, #0
 800e284:	d11c      	bne.n	800e2c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e294:	f043 0302 	orr.w	r3, r3, #2
 800e298:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e29e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e005      	b.n	800e2cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e2d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d10d      	bne.n	800e2fc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e2e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d104      	bne.n	800e2f2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f968 	bl	800e5c0 <USB_SetDevSpeed>
 800e2f0:	e008      	b.n	800e304 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 f963 	bl	800e5c0 <USB_SetDevSpeed>
 800e2fa:	e003      	b.n	800e304 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e2fc:	2103      	movs	r1, #3
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 f95e 	bl	800e5c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e304:	2110      	movs	r1, #16
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f8fa 	bl	800e500 <USB_FlushTxFifo>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f924 	bl	800e564 <USB_FlushRxFifo>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e32c:	461a      	mov	r2, r3
 800e32e:	2300      	movs	r3, #0
 800e330:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e338:	461a      	mov	r2, r3
 800e33a:	2300      	movs	r3, #0
 800e33c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e344:	461a      	mov	r2, r3
 800e346:	2300      	movs	r3, #0
 800e348:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e34a:	2300      	movs	r3, #0
 800e34c:	613b      	str	r3, [r7, #16]
 800e34e:	e043      	b.n	800e3d8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	015a      	lsls	r2, r3, #5
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	4413      	add	r3, r2
 800e358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e366:	d118      	bne.n	800e39a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10a      	bne.n	800e384 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	015a      	lsls	r2, r3, #5
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	4413      	add	r3, r2
 800e376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e37a:	461a      	mov	r2, r3
 800e37c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	e013      	b.n	800e3ac <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e390:	461a      	mov	r2, r3
 800e392:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	e008      	b.n	800e3ac <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	015a      	lsls	r2, r3, #5
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	015a      	lsls	r2, r3, #5
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e3d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	613b      	str	r3, [r7, #16]
 800e3d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e3dc:	461a      	mov	r2, r3
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	d3b5      	bcc.n	800e350 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	613b      	str	r3, [r7, #16]
 800e3e8:	e043      	b.n	800e472 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	015a      	lsls	r2, r3, #5
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e400:	d118      	bne.n	800e434 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10a      	bne.n	800e41e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e408:	693b      	ldr	r3, [r7, #16]
 800e40a:	015a      	lsls	r2, r3, #5
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	4413      	add	r3, r2
 800e410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e414:	461a      	mov	r2, r3
 800e416:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e41a:	6013      	str	r3, [r2, #0]
 800e41c:	e013      	b.n	800e446 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e42a:	461a      	mov	r2, r3
 800e42c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	e008      	b.n	800e446 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e434:	693b      	ldr	r3, [r7, #16]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e440:	461a      	mov	r2, r3
 800e442:	2300      	movs	r3, #0
 800e444:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	015a      	lsls	r2, r3, #5
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	4413      	add	r3, r2
 800e44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e452:	461a      	mov	r2, r3
 800e454:	2300      	movs	r3, #0
 800e456:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	015a      	lsls	r2, r3, #5
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	4413      	add	r3, r2
 800e460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e464:	461a      	mov	r2, r3
 800e466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e46a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	3301      	adds	r3, #1
 800e470:	613b      	str	r3, [r7, #16]
 800e472:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e476:	461a      	mov	r2, r3
 800e478:	693b      	ldr	r3, [r7, #16]
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d3b5      	bcc.n	800e3ea <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e484:	691b      	ldr	r3, [r3, #16]
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e48c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e490:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e49e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d105      	bne.n	800e4b4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	f043 0210 	orr.w	r2, r3, #16
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699a      	ldr	r2, [r3, #24]
 800e4b8:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f8 <USB_DevInit+0x2b4>)
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e4c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d005      	beq.n	800e4d4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	f043 0208 	orr.w	r2, r3, #8
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e4d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d105      	bne.n	800e4e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	699a      	ldr	r2, [r3, #24]
 800e4e0:	4b06      	ldr	r3, [pc, #24]	@ (800e4fc <USB_DevInit+0x2b8>)
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3718      	adds	r7, #24
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e4f4:	b004      	add	sp, #16
 800e4f6:	4770      	bx	lr
 800e4f8:	803c3800 	.word	0x803c3800
 800e4fc:	40000004 	.word	0x40000004

0800e500 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e500:	b480      	push	{r7}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e50a:	2300      	movs	r3, #0
 800e50c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3301      	adds	r3, #1
 800e512:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e51a:	d901      	bls.n	800e520 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e51c:	2303      	movs	r3, #3
 800e51e:	e01b      	b.n	800e558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	daf2      	bge.n	800e50e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e528:	2300      	movs	r3, #0
 800e52a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	019b      	lsls	r3, r3, #6
 800e530:	f043 0220 	orr.w	r2, r3, #32
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	3301      	adds	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e544:	d901      	bls.n	800e54a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e546:	2303      	movs	r3, #3
 800e548:	e006      	b.n	800e558 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	f003 0320 	and.w	r3, r3, #32
 800e552:	2b20      	cmp	r3, #32
 800e554:	d0f0      	beq.n	800e538 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3714      	adds	r7, #20
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e56c:	2300      	movs	r3, #0
 800e56e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	3301      	adds	r3, #1
 800e574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e57c:	d901      	bls.n	800e582 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e57e:	2303      	movs	r3, #3
 800e580:	e018      	b.n	800e5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	691b      	ldr	r3, [r3, #16]
 800e586:	2b00      	cmp	r3, #0
 800e588:	daf2      	bge.n	800e570 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e58a:	2300      	movs	r3, #0
 800e58c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2210      	movs	r2, #16
 800e592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	3301      	adds	r3, #1
 800e598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e5a0:	d901      	bls.n	800e5a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	e006      	b.n	800e5b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	f003 0310 	and.w	r3, r3, #16
 800e5ae:	2b10      	cmp	r3, #16
 800e5b0:	d0f0      	beq.n	800e594 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	78fb      	ldrb	r3, [r7, #3]
 800e5da:	68f9      	ldr	r1, [r7, #12]
 800e5dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e5e4:	2300      	movs	r3, #0
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b087      	sub	sp, #28
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	f003 0306 	and.w	r3, r3, #6
 800e60a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d102      	bne.n	800e618 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e612:	2300      	movs	r3, #0
 800e614:	75fb      	strb	r3, [r7, #23]
 800e616:	e00a      	b.n	800e62e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d002      	beq.n	800e624 <USB_GetDevSpeed+0x32>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b06      	cmp	r3, #6
 800e622:	d102      	bne.n	800e62a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e624:	2302      	movs	r3, #2
 800e626:	75fb      	strb	r3, [r7, #23]
 800e628:	e001      	b.n	800e62e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e62a:	230f      	movs	r3, #15
 800e62c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e630:	4618      	mov	r0, r3
 800e632:	371c      	adds	r7, #28
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr

0800e63c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d139      	bne.n	800e6cc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e65e:	69da      	ldr	r2, [r3, #28]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	2101      	movs	r1, #1
 800e66a:	fa01 f303 	lsl.w	r3, r1, r3
 800e66e:	b29b      	uxth	r3, r3
 800e670:	68f9      	ldr	r1, [r7, #12]
 800e672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e676:	4313      	orrs	r3, r2
 800e678:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	015a      	lsls	r2, r3, #5
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	4413      	add	r3, r2
 800e682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d153      	bne.n	800e738 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e690:	68bb      	ldr	r3, [r7, #8]
 800e692:	015a      	lsls	r2, r3, #5
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	4413      	add	r3, r2
 800e698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	791b      	ldrb	r3, [r3, #4]
 800e6aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e6ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	059b      	lsls	r3, r3, #22
 800e6b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e6b4:	431a      	orrs	r2, r3
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	0159      	lsls	r1, r3, #5
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	440b      	add	r3, r1
 800e6be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	4b20      	ldr	r3, [pc, #128]	@ (800e748 <USB_ActivateEndpoint+0x10c>)
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	600b      	str	r3, [r1, #0]
 800e6ca:	e035      	b.n	800e738 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e6d2:	69da      	ldr	r2, [r3, #28]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	2101      	movs	r1, #1
 800e6de:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	68f9      	ldr	r1, [r7, #12]
 800e6e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	015a      	lsls	r2, r3, #5
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e700:	2b00      	cmp	r3, #0
 800e702:	d119      	bne.n	800e738 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	791b      	ldrb	r3, [r3, #4]
 800e71e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e720:	430b      	orrs	r3, r1
 800e722:	431a      	orrs	r2, r3
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	0159      	lsls	r1, r3, #5
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	440b      	add	r3, r1
 800e72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e730:	4619      	mov	r1, r3
 800e732:	4b05      	ldr	r3, [pc, #20]	@ (800e748 <USB_ActivateEndpoint+0x10c>)
 800e734:	4313      	orrs	r3, r2
 800e736:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e738:	2300      	movs	r3, #0
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3714      	adds	r7, #20
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	10008000 	.word	0x10008000

0800e74c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08a      	sub	sp, #40	@ 0x28
 800e750:	af02      	add	r7, sp, #8
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	785b      	ldrb	r3, [r3, #1]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	f040 8185 	bne.w	800ea78 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	691b      	ldr	r3, [r3, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d132      	bne.n	800e7dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	015a      	lsls	r2, r3, #5
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	4413      	add	r3, r2
 800e77e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e782:	691a      	ldr	r2, [r3, #16]
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	0159      	lsls	r1, r3, #5
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	440b      	add	r3, r1
 800e78c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e790:	4619      	mov	r1, r3
 800e792:	4ba7      	ldr	r3, [pc, #668]	@ (800ea30 <USB_EPStartXfer+0x2e4>)
 800e794:	4013      	ands	r3, r2
 800e796:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e798:	69bb      	ldr	r3, [r7, #24]
 800e79a:	015a      	lsls	r2, r3, #5
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	4413      	add	r3, r2
 800e7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	69ba      	ldr	r2, [r7, #24]
 800e7a8:	0151      	lsls	r1, r2, #5
 800e7aa:	69fa      	ldr	r2, [r7, #28]
 800e7ac:	440a      	add	r2, r1
 800e7ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	015a      	lsls	r2, r3, #5
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7c4:	691a      	ldr	r2, [r3, #16]
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	0159      	lsls	r1, r3, #5
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	440b      	add	r3, r1
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4b97      	ldr	r3, [pc, #604]	@ (800ea34 <USB_EPStartXfer+0x2e8>)
 800e7d6:	4013      	ands	r3, r2
 800e7d8:	610b      	str	r3, [r1, #16]
 800e7da:	e097      	b.n	800e90c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7dc:	69bb      	ldr	r3, [r7, #24]
 800e7de:	015a      	lsls	r2, r3, #5
 800e7e0:	69fb      	ldr	r3, [r7, #28]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7e8:	691a      	ldr	r2, [r3, #16]
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	0159      	lsls	r1, r3, #5
 800e7ee:	69fb      	ldr	r3, [r7, #28]
 800e7f0:	440b      	add	r3, r1
 800e7f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4b8e      	ldr	r3, [pc, #568]	@ (800ea34 <USB_EPStartXfer+0x2e8>)
 800e7fa:	4013      	ands	r3, r2
 800e7fc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	015a      	lsls	r2, r3, #5
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	4413      	add	r3, r2
 800e806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e80a:	691a      	ldr	r2, [r3, #16]
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	0159      	lsls	r1, r3, #5
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	440b      	add	r3, r1
 800e814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e818:	4619      	mov	r1, r3
 800e81a:	4b85      	ldr	r3, [pc, #532]	@ (800ea30 <USB_EPStartXfer+0x2e4>)
 800e81c:	4013      	ands	r3, r2
 800e81e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d11a      	bne.n	800e85c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	691a      	ldr	r2, [r3, #16]
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	689b      	ldr	r3, [r3, #8]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d903      	bls.n	800e83a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	689a      	ldr	r2, [r3, #8]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	015a      	lsls	r2, r3, #5
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	4413      	add	r3, r2
 800e842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	69ba      	ldr	r2, [r7, #24]
 800e84a:	0151      	lsls	r1, r2, #5
 800e84c:	69fa      	ldr	r2, [r7, #28]
 800e84e:	440a      	add	r2, r1
 800e850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e854:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e858:	6113      	str	r3, [r2, #16]
 800e85a:	e044      	b.n	800e8e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	691a      	ldr	r2, [r3, #16]
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	4413      	add	r3, r2
 800e866:	1e5a      	subs	r2, r3, #1
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e870:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e87e:	691a      	ldr	r2, [r3, #16]
 800e880:	8afb      	ldrh	r3, [r7, #22]
 800e882:	04d9      	lsls	r1, r3, #19
 800e884:	4b6c      	ldr	r3, [pc, #432]	@ (800ea38 <USB_EPStartXfer+0x2ec>)
 800e886:	400b      	ands	r3, r1
 800e888:	69b9      	ldr	r1, [r7, #24]
 800e88a:	0148      	lsls	r0, r1, #5
 800e88c:	69f9      	ldr	r1, [r7, #28]
 800e88e:	4401      	add	r1, r0
 800e890:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e894:	4313      	orrs	r3, r2
 800e896:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	791b      	ldrb	r3, [r3, #4]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d122      	bne.n	800e8e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	015a      	lsls	r2, r3, #5
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	69ba      	ldr	r2, [r7, #24]
 800e8b0:	0151      	lsls	r1, r2, #5
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	440a      	add	r2, r1
 800e8b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8ba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e8be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	015a      	lsls	r2, r3, #5
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8cc:	691a      	ldr	r2, [r3, #16]
 800e8ce:	8afb      	ldrh	r3, [r7, #22]
 800e8d0:	075b      	lsls	r3, r3, #29
 800e8d2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e8d6:	69b9      	ldr	r1, [r7, #24]
 800e8d8:	0148      	lsls	r0, r1, #5
 800e8da:	69f9      	ldr	r1, [r7, #28]
 800e8dc:	4401      	add	r1, r0
 800e8de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	015a      	lsls	r2, r3, #5
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8f2:	691a      	ldr	r2, [r3, #16]
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8fc:	69b9      	ldr	r1, [r7, #24]
 800e8fe:	0148      	lsls	r0, r1, #5
 800e900:	69f9      	ldr	r1, [r7, #28]
 800e902:	4401      	add	r1, r0
 800e904:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e908:	4313      	orrs	r3, r2
 800e90a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d14b      	bne.n	800e9aa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	69db      	ldr	r3, [r3, #28]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d009      	beq.n	800e92e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e91a:	69bb      	ldr	r3, [r7, #24]
 800e91c:	015a      	lsls	r2, r3, #5
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	4413      	add	r3, r2
 800e922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e926:	461a      	mov	r2, r3
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	69db      	ldr	r3, [r3, #28]
 800e92c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	791b      	ldrb	r3, [r3, #4]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d128      	bne.n	800e988 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e942:	2b00      	cmp	r3, #0
 800e944:	d110      	bne.n	800e968 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e946:	69bb      	ldr	r3, [r7, #24]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	69ba      	ldr	r2, [r7, #24]
 800e956:	0151      	lsls	r1, r2, #5
 800e958:	69fa      	ldr	r2, [r7, #28]
 800e95a:	440a      	add	r2, r1
 800e95c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e964:	6013      	str	r3, [r2, #0]
 800e966:	e00f      	b.n	800e988 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	015a      	lsls	r2, r3, #5
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	4413      	add	r3, r2
 800e970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	69ba      	ldr	r2, [r7, #24]
 800e978:	0151      	lsls	r1, r2, #5
 800e97a:	69fa      	ldr	r2, [r7, #28]
 800e97c:	440a      	add	r2, r1
 800e97e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e986:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	0151      	lsls	r1, r2, #5
 800e99a:	69fa      	ldr	r2, [r7, #28]
 800e99c:	440a      	add	r2, r1
 800e99e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	e169      	b.n	800ec7e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9aa:	69bb      	ldr	r3, [r7, #24]
 800e9ac:	015a      	lsls	r2, r3, #5
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	69ba      	ldr	r2, [r7, #24]
 800e9ba:	0151      	lsls	r1, r2, #5
 800e9bc:	69fa      	ldr	r2, [r7, #28]
 800e9be:	440a      	add	r2, r1
 800e9c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e9c8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	791b      	ldrb	r3, [r3, #4]
 800e9ce:	2b01      	cmp	r3, #1
 800e9d0:	d015      	beq.n	800e9fe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 8151 	beq.w	800ec7e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	f003 030f 	and.w	r3, r3, #15
 800e9ec:	2101      	movs	r1, #1
 800e9ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e9f2:	69f9      	ldr	r1, [r7, #28]
 800e9f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	634b      	str	r3, [r1, #52]	@ 0x34
 800e9fc:	e13f      	b.n	800ec7e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e9fe:	69fb      	ldr	r3, [r7, #28]
 800ea00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d116      	bne.n	800ea3c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	015a      	lsls	r2, r3, #5
 800ea12:	69fb      	ldr	r3, [r7, #28]
 800ea14:	4413      	add	r3, r2
 800ea16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	0151      	lsls	r1, r2, #5
 800ea20:	69fa      	ldr	r2, [r7, #28]
 800ea22:	440a      	add	r2, r1
 800ea24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea2c:	6013      	str	r3, [r2, #0]
 800ea2e:	e015      	b.n	800ea5c <USB_EPStartXfer+0x310>
 800ea30:	e007ffff 	.word	0xe007ffff
 800ea34:	fff80000 	.word	0xfff80000
 800ea38:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea3c:	69bb      	ldr	r3, [r7, #24]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	69fb      	ldr	r3, [r7, #28]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	69ba      	ldr	r2, [r7, #24]
 800ea4c:	0151      	lsls	r1, r2, #5
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	440a      	add	r2, r1
 800ea52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ea56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea5a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	68d9      	ldr	r1, [r3, #12]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	781a      	ldrb	r2, [r3, #0]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	b298      	uxth	r0, r3
 800ea6a:	79fb      	ldrb	r3, [r7, #7]
 800ea6c:	9300      	str	r3, [sp, #0]
 800ea6e:	4603      	mov	r3, r0
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 f9b9 	bl	800ede8 <USB_WritePacket>
 800ea76:	e102      	b.n	800ec7e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	015a      	lsls	r2, r3, #5
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	4413      	add	r3, r2
 800ea80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea84:	691a      	ldr	r2, [r3, #16]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	0159      	lsls	r1, r3, #5
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	440b      	add	r3, r1
 800ea8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea92:	4619      	mov	r1, r3
 800ea94:	4b7c      	ldr	r3, [pc, #496]	@ (800ec88 <USB_EPStartXfer+0x53c>)
 800ea96:	4013      	ands	r3, r2
 800ea98:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	015a      	lsls	r2, r3, #5
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa6:	691a      	ldr	r2, [r3, #16]
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	0159      	lsls	r1, r3, #5
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	440b      	add	r3, r1
 800eab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eab4:	4619      	mov	r1, r3
 800eab6:	4b75      	ldr	r3, [pc, #468]	@ (800ec8c <USB_EPStartXfer+0x540>)
 800eab8:	4013      	ands	r3, r2
 800eaba:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d12f      	bne.n	800eb22 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	691b      	ldr	r3, [r3, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	689a      	ldr	r2, [r3, #8]
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	689a      	ldr	r2, [r3, #8]
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae6:	691a      	ldr	r2, [r3, #16]
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	6a1b      	ldr	r3, [r3, #32]
 800eaec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaf0:	69b9      	ldr	r1, [r7, #24]
 800eaf2:	0148      	lsls	r0, r1, #5
 800eaf4:	69f9      	ldr	r1, [r7, #28]
 800eaf6:	4401      	add	r1, r0
 800eaf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eafc:	4313      	orrs	r3, r2
 800eafe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0c:	691b      	ldr	r3, [r3, #16]
 800eb0e:	69ba      	ldr	r2, [r7, #24]
 800eb10:	0151      	lsls	r1, r2, #5
 800eb12:	69fa      	ldr	r2, [r7, #28]
 800eb14:	440a      	add	r2, r1
 800eb16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb1e:	6113      	str	r3, [r2, #16]
 800eb20:	e05f      	b.n	800ebe2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d123      	bne.n	800eb72 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	015a      	lsls	r2, r3, #5
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	4413      	add	r3, r2
 800eb32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb36:	691a      	ldr	r2, [r3, #16]
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb40:	69b9      	ldr	r1, [r7, #24]
 800eb42:	0148      	lsls	r0, r1, #5
 800eb44:	69f9      	ldr	r1, [r7, #28]
 800eb46:	4401      	add	r1, r0
 800eb48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eb50:	69bb      	ldr	r3, [r7, #24]
 800eb52:	015a      	lsls	r2, r3, #5
 800eb54:	69fb      	ldr	r3, [r7, #28]
 800eb56:	4413      	add	r3, r2
 800eb58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	0151      	lsls	r1, r2, #5
 800eb62:	69fa      	ldr	r2, [r7, #28]
 800eb64:	440a      	add	r2, r1
 800eb66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb6e:	6113      	str	r3, [r2, #16]
 800eb70:	e037      	b.n	800ebe2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	691a      	ldr	r2, [r3, #16]
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	689b      	ldr	r3, [r3, #8]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	1e5a      	subs	r2, r3, #1
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	689b      	ldr	r3, [r3, #8]
 800eb82:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb86:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	8afa      	ldrh	r2, [r7, #22]
 800eb8e:	fb03 f202 	mul.w	r2, r3, r2
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb96:	69bb      	ldr	r3, [r7, #24]
 800eb98:	015a      	lsls	r2, r3, #5
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eba2:	691a      	ldr	r2, [r3, #16]
 800eba4:	8afb      	ldrh	r3, [r7, #22]
 800eba6:	04d9      	lsls	r1, r3, #19
 800eba8:	4b39      	ldr	r3, [pc, #228]	@ (800ec90 <USB_EPStartXfer+0x544>)
 800ebaa:	400b      	ands	r3, r1
 800ebac:	69b9      	ldr	r1, [r7, #24]
 800ebae:	0148      	lsls	r0, r1, #5
 800ebb0:	69f9      	ldr	r1, [r7, #28]
 800ebb2:	4401      	add	r1, r0
 800ebb4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	015a      	lsls	r2, r3, #5
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebc8:	691a      	ldr	r2, [r3, #16]
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ebd2:	69b9      	ldr	r1, [r7, #24]
 800ebd4:	0148      	lsls	r0, r1, #5
 800ebd6:	69f9      	ldr	r1, [r7, #28]
 800ebd8:	4401      	add	r1, r0
 800ebda:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ebde:	4313      	orrs	r3, r2
 800ebe0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ebe2:	79fb      	ldrb	r3, [r7, #7]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d10d      	bne.n	800ec04 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d009      	beq.n	800ec04 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	68d9      	ldr	r1, [r3, #12]
 800ebf4:	69bb      	ldr	r3, [r7, #24]
 800ebf6:	015a      	lsls	r2, r3, #5
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	4413      	add	r3, r2
 800ebfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec00:	460a      	mov	r2, r1
 800ec02:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	791b      	ldrb	r3, [r3, #4]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d128      	bne.n	800ec5e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d110      	bne.n	800ec3e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	015a      	lsls	r2, r3, #5
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	4413      	add	r3, r2
 800ec24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	69ba      	ldr	r2, [r7, #24]
 800ec2c:	0151      	lsls	r1, r2, #5
 800ec2e:	69fa      	ldr	r2, [r7, #28]
 800ec30:	440a      	add	r2, r1
 800ec32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec36:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ec3a:	6013      	str	r3, [r2, #0]
 800ec3c:	e00f      	b.n	800ec5e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	015a      	lsls	r2, r3, #5
 800ec42:	69fb      	ldr	r3, [r7, #28]
 800ec44:	4413      	add	r3, r2
 800ec46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	69ba      	ldr	r2, [r7, #24]
 800ec4e:	0151      	lsls	r1, r2, #5
 800ec50:	69fa      	ldr	r2, [r7, #28]
 800ec52:	440a      	add	r2, r1
 800ec54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ec5c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	015a      	lsls	r2, r3, #5
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	4413      	add	r3, r2
 800ec66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	69ba      	ldr	r2, [r7, #24]
 800ec6e:	0151      	lsls	r1, r2, #5
 800ec70:	69fa      	ldr	r2, [r7, #28]
 800ec72:	440a      	add	r2, r1
 800ec74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec78:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ec7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3720      	adds	r7, #32
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	fff80000 	.word	0xfff80000
 800ec8c:	e007ffff 	.word	0xe007ffff
 800ec90:	1ff80000 	.word	0x1ff80000

0800ec94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b087      	sub	sp, #28
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800eca2:	2300      	movs	r3, #0
 800eca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	785b      	ldrb	r3, [r3, #1]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d14a      	bne.n	800ed48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	015a      	lsls	r2, r3, #5
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	4413      	add	r3, r2
 800ecbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecca:	f040 8086 	bne.w	800edda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	015a      	lsls	r2, r3, #5
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	683a      	ldr	r2, [r7, #0]
 800ece0:	7812      	ldrb	r2, [r2, #0]
 800ece2:	0151      	lsls	r1, r2, #5
 800ece4:	693a      	ldr	r2, [r7, #16]
 800ece6:	440a      	add	r2, r1
 800ece8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecf0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	7812      	ldrb	r2, [r2, #0]
 800ed06:	0151      	lsls	r1, r2, #5
 800ed08:	693a      	ldr	r2, [r7, #16]
 800ed0a:	440a      	add	r2, r1
 800ed0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d902      	bls.n	800ed2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	75fb      	strb	r3, [r7, #23]
          break;
 800ed2a:	e056      	b.n	800edda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	781b      	ldrb	r3, [r3, #0]
 800ed30:	015a      	lsls	r2, r3, #5
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	4413      	add	r3, r2
 800ed36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed44:	d0e7      	beq.n	800ed16 <USB_EPStopXfer+0x82>
 800ed46:	e048      	b.n	800edda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	015a      	lsls	r2, r3, #5
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	4413      	add	r3, r2
 800ed52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed60:	d13b      	bne.n	800edda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	015a      	lsls	r2, r3, #5
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	7812      	ldrb	r2, [r2, #0]
 800ed76:	0151      	lsls	r1, r2, #5
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	440a      	add	r2, r1
 800ed7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ed80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ed84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	781b      	ldrb	r3, [r3, #0]
 800ed8a:	015a      	lsls	r2, r3, #5
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	4413      	add	r3, r2
 800ed90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	7812      	ldrb	r2, [r2, #0]
 800ed9a:	0151      	lsls	r1, r2, #5
 800ed9c:	693a      	ldr	r2, [r7, #16]
 800ed9e:	440a      	add	r2, r1
 800eda0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eda4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eda8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	3301      	adds	r3, #1
 800edae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d902      	bls.n	800edc0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	75fb      	strb	r3, [r7, #23]
          break;
 800edbe:	e00c      	b.n	800edda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	015a      	lsls	r2, r3, #5
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	4413      	add	r3, r2
 800edca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edd8:	d0e7      	beq.n	800edaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800edda:	7dfb      	ldrb	r3, [r7, #23]
}
 800eddc:	4618      	mov	r0, r3
 800edde:	371c      	adds	r7, #28
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr

0800ede8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ede8:	b480      	push	{r7}
 800edea:	b089      	sub	sp, #36	@ 0x24
 800edec:	af00      	add	r7, sp, #0
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	4611      	mov	r1, r2
 800edf4:	461a      	mov	r2, r3
 800edf6:	460b      	mov	r3, r1
 800edf8:	71fb      	strb	r3, [r7, #7]
 800edfa:	4613      	mov	r3, r2
 800edfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d123      	bne.n	800ee56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee0e:	88bb      	ldrh	r3, [r7, #4]
 800ee10:	3303      	adds	r3, #3
 800ee12:	089b      	lsrs	r3, r3, #2
 800ee14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee16:	2300      	movs	r3, #0
 800ee18:	61bb      	str	r3, [r7, #24]
 800ee1a:	e018      	b.n	800ee4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	031a      	lsls	r2, r3, #12
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	4413      	add	r3, r2
 800ee24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee28:	461a      	mov	r2, r3
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	3301      	adds	r3, #1
 800ee34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee36:	69fb      	ldr	r3, [r7, #28]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	3301      	adds	r3, #1
 800ee46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ee48:	69bb      	ldr	r3, [r7, #24]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	61bb      	str	r3, [r7, #24]
 800ee4e:	69ba      	ldr	r2, [r7, #24]
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d3e2      	bcc.n	800ee1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3724      	adds	r7, #36	@ 0x24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b08b      	sub	sp, #44	@ 0x2c
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ee7a:	88fb      	ldrh	r3, [r7, #6]
 800ee7c:	089b      	lsrs	r3, r3, #2
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ee82:	88fb      	ldrh	r3, [r7, #6]
 800ee84:	f003 0303 	and.w	r3, r3, #3
 800ee88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	623b      	str	r3, [r7, #32]
 800ee8e:	e014      	b.n	800eeba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ee90:	69bb      	ldr	r3, [r7, #24]
 800ee92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee96:	681a      	ldr	r2, [r3, #0]
 800ee98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ee9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9e:	3301      	adds	r3, #1
 800eea0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea4:	3301      	adds	r3, #1
 800eea6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeaa:	3301      	adds	r3, #1
 800eeac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800eeae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	623b      	str	r3, [r7, #32]
 800eeba:	6a3a      	ldr	r2, [r7, #32]
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d3e6      	bcc.n	800ee90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eec2:	8bfb      	ldrh	r3, [r7, #30]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01e      	beq.n	800ef06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eec8:	2300      	movs	r3, #0
 800eeca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eed2:	461a      	mov	r2, r3
 800eed4:	f107 0310 	add.w	r3, r7, #16
 800eed8:	6812      	ldr	r2, [r2, #0]
 800eeda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800eedc:	693a      	ldr	r2, [r7, #16]
 800eede:	6a3b      	ldr	r3, [r7, #32]
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	00db      	lsls	r3, r3, #3
 800eee4:	fa22 f303 	lsr.w	r3, r2, r3
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeec:	701a      	strb	r2, [r3, #0]
      i++;
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	3301      	adds	r3, #1
 800eef2:	623b      	str	r3, [r7, #32]
      pDest++;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	3301      	adds	r3, #1
 800eef8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800eefa:	8bfb      	ldrh	r3, [r7, #30]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef00:	8bfb      	ldrh	r3, [r7, #30]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1ea      	bne.n	800eedc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ef08:	4618      	mov	r0, r3
 800ef0a:	372c      	adds	r7, #44	@ 0x2c
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b085      	sub	sp, #20
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	785b      	ldrb	r3, [r3, #1]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d12c      	bne.n	800ef8a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	015a      	lsls	r2, r3, #5
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	db12      	blt.n	800ef68 <USB_EPSetStall+0x54>
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00f      	beq.n	800ef68 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	015a      	lsls	r2, r3, #5
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68ba      	ldr	r2, [r7, #8]
 800ef58:	0151      	lsls	r1, r2, #5
 800ef5a:	68fa      	ldr	r2, [r7, #12]
 800ef5c:	440a      	add	r2, r1
 800ef5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef66:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	015a      	lsls	r2, r3, #5
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	4413      	add	r3, r2
 800ef70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	68ba      	ldr	r2, [r7, #8]
 800ef78:	0151      	lsls	r1, r2, #5
 800ef7a:	68fa      	ldr	r2, [r7, #12]
 800ef7c:	440a      	add	r2, r1
 800ef7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef86:	6013      	str	r3, [r2, #0]
 800ef88:	e02b      	b.n	800efe2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	015a      	lsls	r2, r3, #5
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	4413      	add	r3, r2
 800ef92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	db12      	blt.n	800efc2 <USB_EPSetStall+0xae>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00f      	beq.n	800efc2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	015a      	lsls	r2, r3, #5
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4413      	add	r3, r2
 800efaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	0151      	lsls	r1, r2, #5
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	440a      	add	r2, r1
 800efb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800efc0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	015a      	lsls	r2, r3, #5
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	4413      	add	r3, r2
 800efca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	68ba      	ldr	r2, [r7, #8]
 800efd2:	0151      	lsls	r1, r2, #5
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	440a      	add	r2, r1
 800efd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efdc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800efe0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	781b      	ldrb	r3, [r3, #0]
 800f002:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	785b      	ldrb	r3, [r3, #1]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d128      	bne.n	800f05e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	015a      	lsls	r2, r3, #5
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	4413      	add	r3, r2
 800f014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	0151      	lsls	r1, r2, #5
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	440a      	add	r2, r1
 800f022:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f026:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f02a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	791b      	ldrb	r3, [r3, #4]
 800f030:	2b03      	cmp	r3, #3
 800f032:	d003      	beq.n	800f03c <USB_EPClearStall+0x4c>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	791b      	ldrb	r3, [r3, #4]
 800f038:	2b02      	cmp	r3, #2
 800f03a:	d138      	bne.n	800f0ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	015a      	lsls	r2, r3, #5
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	4413      	add	r3, r2
 800f044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	0151      	lsls	r1, r2, #5
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	440a      	add	r2, r1
 800f052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f05a:	6013      	str	r3, [r2, #0]
 800f05c:	e027      	b.n	800f0ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	015a      	lsls	r2, r3, #5
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	4413      	add	r3, r2
 800f066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	0151      	lsls	r1, r2, #5
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	440a      	add	r2, r1
 800f074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f078:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f07c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	791b      	ldrb	r3, [r3, #4]
 800f082:	2b03      	cmp	r3, #3
 800f084:	d003      	beq.n	800f08e <USB_EPClearStall+0x9e>
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	791b      	ldrb	r3, [r3, #4]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d10f      	bne.n	800f0ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	015a      	lsls	r2, r3, #5
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	4413      	add	r3, r2
 800f096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	0151      	lsls	r1, r2, #5
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	440a      	add	r2, r1
 800f0a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f0a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f0ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f0ae:	2300      	movs	r3, #0
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3714      	adds	r7, #20
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f0da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f0de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	78fb      	ldrb	r3, [r7, #3]
 800f0ea:	011b      	lsls	r3, r3, #4
 800f0ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f0f0:	68f9      	ldr	r1, [r7, #12]
 800f0f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3714      	adds	r7, #20
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f108:	b480      	push	{r7}
 800f10a:	b085      	sub	sp, #20
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f122:	f023 0303 	bic.w	r3, r3, #3
 800f126:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f136:	f023 0302 	bic.w	r3, r3, #2
 800f13a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3714      	adds	r7, #20
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f14a:	b480      	push	{r7}
 800f14c:	b085      	sub	sp, #20
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f164:	f023 0303 	bic.w	r3, r3, #3
 800f168:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f178:	f043 0302 	orr.w	r3, r3, #2
 800f17c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	3714      	adds	r7, #20
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	699b      	ldr	r3, [r3, #24]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	4013      	ands	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800f1b2:	b480      	push	{r7}
 800f1b4:	b085      	sub	sp, #20
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
 800f1ba:	460b      	mov	r3, r1
 800f1bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800f1c2:	78fb      	ldrb	r3, [r7, #3]
 800f1c4:	015a      	lsls	r2, r3, #5
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800f1d2:	78fb      	ldrb	r3, [r7, #3]
 800f1d4:	015a      	lsls	r2, r3, #5
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	4413      	add	r3, r2
 800f1da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f1de:	68db      	ldr	r3, [r3, #12]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	4013      	ands	r3, r2
 800f1e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f1e6:	68bb      	ldr	r3, [r7, #8]
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	4013      	ands	r3, r2
 800f216:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	0c1b      	lsrs	r3, r3, #16
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3714      	adds	r7, #20
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr

0800f228 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f244:	69db      	ldr	r3, [r3, #28]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	4013      	ands	r3, r2
 800f24a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	b29b      	uxth	r3, r3
}
 800f250:	4618      	mov	r0, r3
 800f252:	3714      	adds	r7, #20
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr

0800f25c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b085      	sub	sp, #20
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	460b      	mov	r3, r1
 800f266:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f26c:	78fb      	ldrb	r3, [r7, #3]
 800f26e:	015a      	lsls	r2, r3, #5
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	4413      	add	r3, r2
 800f274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f282:	695b      	ldr	r3, [r3, #20]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	4013      	ands	r3, r2
 800f288:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f28a:	68bb      	ldr	r3, [r7, #8]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3714      	adds	r7, #20
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f298:	b480      	push	{r7}
 800f29a:	b087      	sub	sp, #28
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	460b      	mov	r3, r1
 800f2a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2bc:	78fb      	ldrb	r3, [r7, #3]
 800f2be:	f003 030f 	and.w	r3, r3, #15
 800f2c2:	68fa      	ldr	r2, [r7, #12]
 800f2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c8:	01db      	lsls	r3, r3, #7
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	4313      	orrs	r3, r2
 800f2d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2d2:	78fb      	ldrb	r3, [r7, #3]
 800f2d4:	015a      	lsls	r2, r3, #5
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	4413      	add	r3, r2
 800f2da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	4013      	ands	r3, r2
 800f2e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2e6:	68bb      	ldr	r3, [r7, #8]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	371c      	adds	r7, #28
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	f003 0301 	and.w	r3, r3, #1
}
 800f304:	4618      	mov	r0, r3
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f322:	681a      	ldr	r2, [r3, #0]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f32a:	4619      	mov	r1, r3
 800f32c:	4b09      	ldr	r3, [pc, #36]	@ (800f354 <USB_ActivateSetup+0x44>)
 800f32e:	4013      	ands	r3, r2
 800f330:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	68fa      	ldr	r2, [r7, #12]
 800f33c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3714      	adds	r7, #20
 800f34c:	46bd      	mov	sp, r7
 800f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f352:	4770      	bx	lr
 800f354:	fffff800 	.word	0xfffff800

0800f358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f358:	b480      	push	{r7}
 800f35a:	b087      	sub	sp, #28
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	460b      	mov	r3, r1
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	333c      	adds	r3, #60	@ 0x3c
 800f36e:	3304      	adds	r3, #4
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	4a26      	ldr	r2, [pc, #152]	@ (800f410 <USB_EP0_OutStart+0xb8>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d90a      	bls.n	800f392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f38c:	d101      	bne.n	800f392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	e037      	b.n	800f402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f398:	461a      	mov	r2, r3
 800f39a:	2300      	movs	r3, #0
 800f39c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3a4:	691b      	ldr	r3, [r3, #16]
 800f3a6:	697a      	ldr	r2, [r7, #20]
 800f3a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f3b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3c0:	f043 0318 	orr.w	r3, r3, #24
 800f3c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f3d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f3da:	7afb      	ldrb	r3, [r7, #11]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d10f      	bne.n	800f400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	697a      	ldr	r2, [r7, #20]
 800f3f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f3fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f3fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f400:	2300      	movs	r3, #0
}
 800f402:	4618      	mov	r0, r3
 800f404:	371c      	adds	r7, #28
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr
 800f40e:	bf00      	nop
 800f410:	4f54300a 	.word	0x4f54300a

0800f414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f414:	b480      	push	{r7}
 800f416:	b085      	sub	sp, #20
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	3301      	adds	r3, #1
 800f424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f42c:	d901      	bls.n	800f432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f42e:	2303      	movs	r3, #3
 800f430:	e01b      	b.n	800f46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	2b00      	cmp	r3, #0
 800f438:	daf2      	bge.n	800f420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	f043 0201 	orr.w	r2, r3, #1
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	3301      	adds	r3, #1
 800f44e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f456:	d901      	bls.n	800f45c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f458:	2303      	movs	r3, #3
 800f45a:	e006      	b.n	800f46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	f003 0301 	and.w	r3, r3, #1
 800f464:	2b01      	cmp	r3, #1
 800f466:	d0f0      	beq.n	800f44a <USB_CoreReset+0x36>

  return HAL_OK;
 800f468:	2300      	movs	r3, #0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3714      	adds	r7, #20
 800f46e:	46bd      	mov	sp, r7
 800f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f474:	4770      	bx	lr
	...

0800f478 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f478:	b084      	sub	sp, #16
 800f47a:	b580      	push	{r7, lr}
 800f47c:	b086      	sub	sp, #24
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f486:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f48a:	2300      	movs	r3, #0
 800f48c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f498:	461a      	mov	r2, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	639a      	str	r2, [r3, #56]	@ 0x38


  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d119      	bne.n	800f4f6 <USB_HostInit+0x7e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800f4c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d10a      	bne.n	800f4e0 <USB_HostInit+0x68>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	68fa      	ldr	r2, [r7, #12]
 800f4d4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f4d8:	f043 0304 	orr.w	r3, r3, #4
 800f4dc:	6013      	str	r3, [r2, #0]
 800f4de:	e014      	b.n	800f50a <USB_HostInit+0x92>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68fa      	ldr	r2, [r7, #12]
 800f4ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f4ee:	f023 0304 	bic.w	r3, r3, #4
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	e009      	b.n	800f50a <USB_HostInit+0x92>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f504:	f023 0304 	bic.w	r3, r3, #4
 800f508:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f50a:	2110      	movs	r1, #16
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7fe fff7 	bl	800e500 <USB_FlushTxFifo>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <USB_HostInit+0xa4>
  {
    ret = HAL_ERROR;
 800f518:	2301      	movs	r3, #1
 800f51a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f7ff f821 	bl	800e564 <USB_FlushRxFifo>
 800f522:	4603      	mov	r3, r0
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <USB_HostInit+0xb4>
  {
    ret = HAL_ERROR;
 800f528:	2301      	movs	r3, #1
 800f52a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800f52c:	2300      	movs	r3, #0
 800f52e:	613b      	str	r3, [r7, #16]
 800f530:	e015      	b.n	800f55e <USB_HostInit+0xe6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	015a      	lsls	r2, r3, #5
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	4413      	add	r3, r2
 800f53a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f53e:	461a      	mov	r2, r3
 800f540:	f04f 33ff 	mov.w	r3, #4294967295
 800f544:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	015a      	lsls	r2, r3, #5
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	4413      	add	r3, r2
 800f54e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f552:	461a      	mov	r2, r3
 800f554:	2300      	movs	r3, #0
 800f556:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	3301      	adds	r3, #1
 800f55c:	613b      	str	r3, [r7, #16]
 800f55e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f562:	461a      	mov	r2, r3
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	4293      	cmp	r3, r2
 800f568:	d3e3      	bcc.n	800f532 <USB_HostInit+0xba>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2200      	movs	r2, #0
 800f56e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f04f 32ff 	mov.w	r2, #4294967295
 800f576:	615a      	str	r2, [r3, #20]
  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x200U;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f57e:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a0f      	ldr	r2, [pc, #60]	@ (800f5c0 <USB_HostInit+0x148>)
 800f584:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a0e      	ldr	r2, [pc, #56]	@ (800f5c4 <USB_HostInit+0x14c>)
 800f58a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f58e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f592:	2b00      	cmp	r3, #0
 800f594:	d105      	bne.n	800f5a2 <USB_HostInit+0x12a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	699b      	ldr	r3, [r3, #24]
 800f59a:	f043 0210 	orr.w	r2, r3, #16
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	699a      	ldr	r2, [r3, #24]
 800f5a6:	4b08      	ldr	r3, [pc, #32]	@ (800f5c8 <USB_HostInit+0x150>)
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800f5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3718      	adds	r7, #24
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5ba:	b004      	add	sp, #16
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	01000200 	.word	0x01000200
 800f5c4:	00e00300 	.word	0x00e00300
 800f5c8:	a3200008 	.word	0xa3200008

0800f5cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b085      	sub	sp, #20
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	68fa      	ldr	r2, [r7, #12]
 800f5e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f5ea:	f023 0303 	bic.w	r3, r3, #3
 800f5ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f5f6:	681a      	ldr	r2, [r3, #0]
 800f5f8:	78fb      	ldrb	r3, [r7, #3]
 800f5fa:	f003 0303 	and.w	r3, r3, #3
 800f5fe:	68f9      	ldr	r1, [r7, #12]
 800f600:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800f604:	4313      	orrs	r3, r2
 800f606:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800f608:	78fb      	ldrb	r3, [r7, #3]
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	d107      	bne.n	800f61e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f614:	461a      	mov	r2, r3
 800f616:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800f61a:	6053      	str	r3, [r2, #4]
 800f61c:	e00c      	b.n	800f638 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800f61e:	78fb      	ldrb	r3, [r7, #3]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d107      	bne.n	800f634 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f62a:	461a      	mov	r2, r3
 800f62c:	f241 7370 	movw	r3, #6000	@ 0x1770
 800f630:	6053      	str	r3, [r2, #4]
 800f632:	e001      	b.n	800f638 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800f634:	2301      	movs	r3, #1
 800f636:	e000      	b.n	800f63a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3714      	adds	r7, #20
 800f63e:	46bd      	mov	sp, r7
 800f640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f644:	4770      	bx	lr

0800f646 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800f652:	2300      	movs	r3, #0
 800f654:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800f666:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f674:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800f676:	2064      	movs	r0, #100	@ 0x64
 800f678:	f7f2 ffb6 	bl	80025e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f684:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f688:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800f68a:	200a      	movs	r0, #10
 800f68c:	f7f2 ffac 	bl	80025e8 <HAL_Delay>

  return HAL_OK;
 800f690:	2300      	movs	r3, #0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3710      	adds	r7, #16
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800f69a:	b480      	push	{r7}
 800f69c:	b085      	sub	sp, #20
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800f6be:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d109      	bne.n	800f6de <USB_DriveVbus+0x44>
 800f6ca:	78fb      	ldrb	r3, [r7, #3]
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d106      	bne.n	800f6de <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f6d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f6dc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800f6de:	68bb      	ldr	r3, [r7, #8]
 800f6e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f6e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6e8:	d109      	bne.n	800f6fe <USB_DriveVbus+0x64>
 800f6ea:	78fb      	ldrb	r3, [r7, #3]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d106      	bne.n	800f6fe <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800f6f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f6fc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3714      	adds	r7, #20
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr

0800f70c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800f718:	2300      	movs	r3, #0
 800f71a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	0c5b      	lsrs	r3, r3, #17
 800f72a:	f003 0303 	and.w	r3, r3, #3
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3714      	adds	r7, #20
 800f732:	46bd      	mov	sp, r7
 800f734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f738:	4770      	bx	lr

0800f73a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800f73a:	b480      	push	{r7}
 800f73c:	b085      	sub	sp, #20
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	b29b      	uxth	r3, r3
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b088      	sub	sp, #32
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	4608      	mov	r0, r1
 800f766:	4611      	mov	r1, r2
 800f768:	461a      	mov	r2, r3
 800f76a:	4603      	mov	r3, r0
 800f76c:	70fb      	strb	r3, [r7, #3]
 800f76e:	460b      	mov	r3, r1
 800f770:	70bb      	strb	r3, [r7, #2]
 800f772:	4613      	mov	r3, r2
 800f774:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800f776:	2300      	movs	r3, #0
 800f778:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800f77e:	78fb      	ldrb	r3, [r7, #3]
 800f780:	015a      	lsls	r2, r3, #5
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	4413      	add	r3, r2
 800f786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f78a:	461a      	mov	r2, r3
 800f78c:	f04f 33ff 	mov.w	r3, #4294967295
 800f790:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800f792:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f796:	2b03      	cmp	r3, #3
 800f798:	d878      	bhi.n	800f88c <USB_HC_Init+0x130>
 800f79a:	a201      	add	r2, pc, #4	@ (adr r2, 800f7a0 <USB_HC_Init+0x44>)
 800f79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7a0:	0800f7b1 	.word	0x0800f7b1
 800f7a4:	0800f84f 	.word	0x0800f84f
 800f7a8:	0800f7b1 	.word	0x0800f7b1
 800f7ac:	0800f811 	.word	0x0800f811
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	015a      	lsls	r2, r3, #5
 800f7b4:	693b      	ldr	r3, [r7, #16]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7bc:	461a      	mov	r2, r3
 800f7be:	f240 439d 	movw	r3, #1181	@ 0x49d
 800f7c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800f7c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	da10      	bge.n	800f7ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	78fa      	ldrb	r2, [r7, #3]
 800f7dc:	0151      	lsls	r1, r2, #5
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	440a      	add	r2, r1
 800f7e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f7e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f7ea:	60d3      	str	r3, [r2, #12]
      else
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                               USB_OTG_HCINTMSK_ACKM;
      }
      break;
 800f7ec:	e054      	b.n	800f898 <USB_HC_Init+0x13c>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800f7ee:	78fb      	ldrb	r3, [r7, #3]
 800f7f0:	015a      	lsls	r2, r3, #5
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	4413      	add	r3, r2
 800f7f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	78fa      	ldrb	r2, [r7, #3]
 800f7fe:	0151      	lsls	r1, r2, #5
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	440a      	add	r2, r1
 800f804:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f808:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800f80c:	60d3      	str	r3, [r2, #12]
      break;
 800f80e:	e043      	b.n	800f898 <USB_HC_Init+0x13c>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	015a      	lsls	r2, r3, #5
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	4413      	add	r3, r2
 800f818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f81c:	461a      	mov	r2, r3
 800f81e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800f822:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f824:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	da32      	bge.n	800f892 <USB_HC_Init+0x136>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	015a      	lsls	r2, r3, #5
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	4413      	add	r3, r2
 800f834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	78fa      	ldrb	r2, [r7, #3]
 800f83c:	0151      	lsls	r1, r2, #5
 800f83e:	693a      	ldr	r2, [r7, #16]
 800f840:	440a      	add	r2, r1
 800f842:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f84a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800f84c:	e021      	b.n	800f892 <USB_HC_Init+0x136>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800f84e:	78fb      	ldrb	r3, [r7, #3]
 800f850:	015a      	lsls	r2, r3, #5
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	4413      	add	r3, r2
 800f856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f85a:	461a      	mov	r2, r3
 800f85c:	f240 2325 	movw	r3, #549	@ 0x225
 800f860:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800f862:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f866:	2b00      	cmp	r3, #0
 800f868:	da15      	bge.n	800f896 <USB_HC_Init+0x13a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800f86a:	78fb      	ldrb	r3, [r7, #3]
 800f86c:	015a      	lsls	r2, r3, #5
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	4413      	add	r3, r2
 800f872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	78fa      	ldrb	r2, [r7, #3]
 800f87a:	0151      	lsls	r1, r2, #5
 800f87c:	693a      	ldr	r2, [r7, #16]
 800f87e:	440a      	add	r2, r1
 800f880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f884:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800f888:	60d3      	str	r3, [r2, #12]
      }
      break;
 800f88a:	e004      	b.n	800f896 <USB_HC_Init+0x13a>

    default:
      ret = HAL_ERROR;
 800f88c:	2301      	movs	r3, #1
 800f88e:	77fb      	strb	r3, [r7, #31]
      break;
 800f890:	e002      	b.n	800f898 <USB_HC_Init+0x13c>
      break;
 800f892:	bf00      	nop
 800f894:	e000      	b.n	800f898 <USB_HC_Init+0x13c>
      break;
 800f896:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800f898:	78fb      	ldrb	r3, [r7, #3]
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800f8aa:	78fb      	ldrb	r3, [r7, #3]
 800f8ac:	015a      	lsls	r2, r3, #5
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	78fa      	ldrb	r2, [r7, #3]
 800f8ba:	0151      	lsls	r1, r2, #5
 800f8bc:	693a      	ldr	r2, [r7, #16]
 800f8be:	440a      	add	r2, r1
 800f8c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f8c4:	f043 0302 	orr.w	r3, r3, #2
 800f8c8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f8d0:	699a      	ldr	r2, [r3, #24]
 800f8d2:	78fb      	ldrb	r3, [r7, #3]
 800f8d4:	f003 030f 	and.w	r3, r3, #15
 800f8d8:	2101      	movs	r1, #1
 800f8da:	fa01 f303 	lsl.w	r3, r1, r3
 800f8de:	6939      	ldr	r1, [r7, #16]
 800f8e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	699b      	ldr	r3, [r3, #24]
 800f8ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800f8f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	da03      	bge.n	800f904 <USB_HC_Init+0x1a8>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800f8fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	e001      	b.n	800f908 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharEpDir = 0U;
 800f904:	2300      	movs	r3, #0
 800f906:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7ff feff 	bl	800f70c <USB_GetHostSpeed>
 800f90e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800f910:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f914:	2b02      	cmp	r3, #2
 800f916:	d106      	bne.n	800f926 <USB_HC_Init+0x1ca>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2b02      	cmp	r3, #2
 800f91c:	d003      	beq.n	800f926 <USB_HC_Init+0x1ca>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800f91e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f922:	617b      	str	r3, [r7, #20]
 800f924:	e001      	b.n	800f92a <USB_HC_Init+0x1ce>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800f926:	2300      	movs	r3, #0
 800f928:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f92a:	787b      	ldrb	r3, [r7, #1]
 800f92c:	059b      	lsls	r3, r3, #22
 800f92e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f932:	78bb      	ldrb	r3, [r7, #2]
 800f934:	02db      	lsls	r3, r3, #11
 800f936:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f93a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f93c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f940:	049b      	lsls	r3, r3, #18
 800f942:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800f946:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800f948:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f94a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800f94e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	431a      	orrs	r2, r3
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f958:	78fa      	ldrb	r2, [r7, #3]
 800f95a:	0151      	lsls	r1, r2, #5
 800f95c:	693a      	ldr	r2, [r7, #16]
 800f95e:	440a      	add	r2, r1
 800f960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800f964:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800f968:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800f96a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f96e:	2b03      	cmp	r3, #3
 800f970:	d003      	beq.n	800f97a <USB_HC_Init+0x21e>
 800f972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f976:	2b01      	cmp	r3, #1
 800f978:	d10f      	bne.n	800f99a <USB_HC_Init+0x23e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800f97a:	78fb      	ldrb	r3, [r7, #3]
 800f97c:	015a      	lsls	r2, r3, #5
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	4413      	add	r3, r2
 800f982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	78fa      	ldrb	r2, [r7, #3]
 800f98a:	0151      	lsls	r1, r2, #5
 800f98c:	693a      	ldr	r2, [r7, #16]
 800f98e:	440a      	add	r2, r1
 800f990:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f994:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f998:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800f99a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3720      	adds	r7, #32
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08c      	sub	sp, #48	@ 0x30
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	785b      	ldrb	r3, [r3, #1]
 800f9ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800f9bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f9c0:	837b      	strh	r3, [r7, #26]

  /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
  if (dma == 1U)
 800f9c2:	79fb      	ldrb	r3, [r7, #7]
 800f9c4:	2b01      	cmp	r3, #1
 800f9c6:	d118      	bne.n	800f9fa <USB_HC_StartXfer+0x56>
  {
    if ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK))
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	7c9b      	ldrb	r3, [r3, #18]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d003      	beq.n	800f9d8 <USB_HC_StartXfer+0x34>
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	7c9b      	ldrb	r3, [r3, #18]
 800f9d4:	2b02      	cmp	r3, #2
 800f9d6:	d120      	bne.n	800fa1a <USB_HC_StartXfer+0x76>
    {

      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	015a      	lsls	r2, r3, #5
 800f9dc:	6a3b      	ldr	r3, [r7, #32]
 800f9de:	4413      	add	r3, r2
 800f9e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800f9e4:	68db      	ldr	r3, [r3, #12]
 800f9e6:	69fa      	ldr	r2, [r7, #28]
 800f9e8:	0151      	lsls	r1, r2, #5
 800f9ea:	6a3a      	ldr	r2, [r7, #32]
 800f9ec:	440a      	add	r2, r1
 800f9ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800f9f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9f6:	60d3      	str	r3, [r2, #12]
 800f9f8:	e00f      	b.n	800fa1a <USB_HC_StartXfer+0x76>
                                               USB_OTG_HCINTMSK_NAKM);
    }
  }
  else
  {
    if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	791b      	ldrb	r3, [r3, #4]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d10b      	bne.n	800fa1a <USB_HC_StartXfer+0x76>
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	795b      	ldrb	r3, [r3, #5]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d107      	bne.n	800fa1a <USB_HC_StartXfer+0x76>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800fa0a:	68bb      	ldr	r3, [r7, #8]
 800fa0c:	785b      	ldrb	r3, [r3, #1]
 800fa0e:	4619      	mov	r1, r3
 800fa10:	68f8      	ldr	r0, [r7, #12]
 800fa12:	f000 fb69 	bl	80100e8 <USB_DoPing>
      return HAL_OK;
 800fa16:	2300      	movs	r3, #0
 800fa18:	e230      	b.n	800fe7c <USB_HC_StartXfer+0x4d8>
    }
  }

  if (hc->do_ssplit == 1U)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	799b      	ldrb	r3, [r3, #6]
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	d158      	bne.n	800fad4 <USB_HC_StartXfer+0x130>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800fa22:	2301      	movs	r3, #1
 800fa24:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	78db      	ldrb	r3, [r3, #3]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d007      	beq.n	800fa3e <USB_HC_StartXfer+0x9a>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fa2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	8a92      	ldrh	r2, [r2, #20]
 800fa34:	fb03 f202 	mul.w	r2, r3, r2
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	61da      	str	r2, [r3, #28]
 800fa3c:	e079      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	7c9b      	ldrb	r3, [r3, #18]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d130      	bne.n	800faa8 <USB_HC_StartXfer+0x104>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	2bbc      	cmp	r3, #188	@ 0xbc
 800fa4c:	d918      	bls.n	800fa80 <USB_HC_StartXfer+0xdc>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	8a9b      	ldrh	r3, [r3, #20]
 800fa52:	461a      	mov	r2, r3
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	69da      	ldr	r2, [r3, #28]
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d003      	beq.n	800fa70 <USB_HC_StartXfer+0xcc>
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d103      	bne.n	800fa78 <USB_HC_StartXfer+0xd4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	2202      	movs	r2, #2
 800fa74:	60da      	str	r2, [r3, #12]
 800fa76:	e05c      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	60da      	str	r2, [r3, #12]
 800fa7e:	e058      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	6a1a      	ldr	r2, [r3, #32]
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	68db      	ldr	r3, [r3, #12]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d007      	beq.n	800faa0 <USB_HC_StartXfer+0xfc>
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d003      	beq.n	800faa0 <USB_HC_StartXfer+0xfc>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	2204      	movs	r2, #4
 800fa9c:	60da      	str	r2, [r3, #12]
 800fa9e:	e048      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	2203      	movs	r2, #3
 800faa4:	60da      	str	r2, [r3, #12]
 800faa6:	e044      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d10d      	bne.n	800faca <USB_HC_StartXfer+0x126>
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	6a1b      	ldr	r3, [r3, #32]
 800fab2:	68ba      	ldr	r2, [r7, #8]
 800fab4:	8a92      	ldrh	r2, [r2, #20]
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d907      	bls.n	800faca <USB_HC_StartXfer+0x126>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800faba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fabc:	68ba      	ldr	r2, [r7, #8]
 800fabe:	8a92      	ldrh	r2, [r2, #20]
 800fac0:	fb03 f202 	mul.w	r2, r3, r2
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	61da      	str	r2, [r3, #28]
 800fac8:	e033      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	6a1a      	ldr	r2, [r3, #32]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	61da      	str	r2, [r3, #28]
 800fad2:	e02e      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d018      	beq.n	800fb0e <USB_HC_StartXfer+0x16a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	6a1b      	ldr	r3, [r3, #32]
 800fae0:	68ba      	ldr	r2, [r7, #8]
 800fae2:	8a92      	ldrh	r2, [r2, #20]
 800fae4:	4413      	add	r3, r2
 800fae6:	3b01      	subs	r3, #1
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	8a92      	ldrh	r2, [r2, #20]
 800faec:	fbb3 f3f2 	udiv	r3, r3, r2
 800faf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800faf2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800faf4:	8b7b      	ldrh	r3, [r7, #26]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d90b      	bls.n	800fb12 <USB_HC_StartXfer+0x16e>
      {
        num_packets = max_hc_pkt_count;
 800fafa:	8b7b      	ldrh	r3, [r7, #26]
 800fafc:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fafe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb00:	68ba      	ldr	r2, [r7, #8]
 800fb02:	8a92      	ldrh	r2, [r2, #20]
 800fb04:	fb03 f202 	mul.w	r2, r3, r2
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	61da      	str	r2, [r3, #28]
 800fb0c:	e001      	b.n	800fb12 <USB_HC_StartXfer+0x16e>
      }
    }
    else
    {
      num_packets = 1U;
 800fb0e:	2301      	movs	r3, #1
 800fb10:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	78db      	ldrb	r3, [r3, #3]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d007      	beq.n	800fb2a <USB_HC_StartXfer+0x186>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800fb1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb1c:	68ba      	ldr	r2, [r7, #8]
 800fb1e:	8a92      	ldrh	r2, [r2, #20]
 800fb20:	fb03 f202 	mul.w	r2, r3, r2
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	61da      	str	r2, [r3, #28]
 800fb28:	e003      	b.n	800fb32 <USB_HC_StartXfer+0x18e>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	6a1a      	ldr	r2, [r3, #32]
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	69db      	ldr	r3, [r3, #28]
 800fb36:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fb3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800fb3c:	04d9      	lsls	r1, r3, #19
 800fb3e:	4ba4      	ldr	r3, [pc, #656]	@ (800fdd0 <USB_HC_StartXfer+0x42c>)
 800fb40:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb42:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	7d9b      	ldrb	r3, [r3, #22]
 800fb48:	075b      	lsls	r3, r3, #29
 800fb4a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb4e:	69f9      	ldr	r1, [r7, #28]
 800fb50:	0148      	lsls	r0, r1, #5
 800fb52:	6a39      	ldr	r1, [r7, #32]
 800fb54:	4401      	add	r1, r0
 800fb56:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800fb5a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800fb5c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800fb5e:	79fb      	ldrb	r3, [r7, #7]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d009      	beq.n	800fb78 <USB_HC_StartXfer+0x1d4>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	6999      	ldr	r1, [r3, #24]
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	015a      	lsls	r2, r3, #5
 800fb6c:	6a3b      	ldr	r3, [r7, #32]
 800fb6e:	4413      	add	r3, r2
 800fb70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb74:	460a      	mov	r2, r1
 800fb76:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800fb78:	6a3b      	ldr	r3, [r7, #32]
 800fb7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bf0c      	ite	eq
 800fb88:	2301      	moveq	r3, #1
 800fb8a:	2300      	movne	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	015a      	lsls	r2, r3, #5
 800fb94:	6a3b      	ldr	r3, [r7, #32]
 800fb96:	4413      	add	r3, r2
 800fb98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	69fa      	ldr	r2, [r7, #28]
 800fba0:	0151      	lsls	r1, r2, #5
 800fba2:	6a3a      	ldr	r2, [r7, #32]
 800fba4:	440a      	add	r2, r1
 800fba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fbaa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800fbae:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800fbb0:	69fb      	ldr	r3, [r7, #28]
 800fbb2:	015a      	lsls	r2, r3, #5
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	7e7b      	ldrb	r3, [r7, #25]
 800fbc0:	075b      	lsls	r3, r3, #29
 800fbc2:	69f9      	ldr	r1, [r7, #28]
 800fbc4:	0148      	lsls	r0, r1, #5
 800fbc6:	6a39      	ldr	r1, [r7, #32]
 800fbc8:	4401      	add	r1, r0
 800fbca:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	799b      	ldrb	r3, [r3, #6]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	f040 80c4 	bne.w	800fd64 <USB_HC_StartXfer+0x3c0>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	7c5b      	ldrb	r3, [r3, #17]
 800fbe0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	69fa      	ldr	r2, [r7, #28]
 800fbea:	0151      	lsls	r1, r2, #5
 800fbec:	6a3a      	ldr	r2, [r7, #32]
 800fbee:	440a      	add	r2, r1
 800fbf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800fbf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800fbf8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	015a      	lsls	r2, r3, #5
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	4413      	add	r3, r2
 800fc02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	69fa      	ldr	r2, [r7, #28]
 800fc0a:	0151      	lsls	r1, r2, #5
 800fc0c:	6a3a      	ldr	r2, [r7, #32]
 800fc0e:	440a      	add	r2, r1
 800fc10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fc14:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800fc18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	79db      	ldrb	r3, [r3, #7]
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d123      	bne.n	800fc6a <USB_HC_StartXfer+0x2c6>
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	78db      	ldrb	r3, [r3, #3]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d11f      	bne.n	800fc6a <USB_HC_StartXfer+0x2c6>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	015a      	lsls	r2, r3, #5
 800fc2e:	6a3b      	ldr	r3, [r7, #32]
 800fc30:	4413      	add	r3, r2
 800fc32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	69fa      	ldr	r2, [r7, #28]
 800fc3a:	0151      	lsls	r1, r2, #5
 800fc3c:	6a3a      	ldr	r2, [r7, #32]
 800fc3e:	440a      	add	r2, r1
 800fc40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fc44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fc48:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	015a      	lsls	r2, r3, #5
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	4413      	add	r3, r2
 800fc52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	69fa      	ldr	r2, [r7, #28]
 800fc5a:	0151      	lsls	r1, r2, #5
 800fc5c:	6a3a      	ldr	r2, [r7, #32]
 800fc5e:	440a      	add	r2, r1
 800fc60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fc64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc68:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	7c9b      	ldrb	r3, [r3, #18]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d003      	beq.n	800fc7a <USB_HC_StartXfer+0x2d6>
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	7c9b      	ldrb	r3, [r3, #18]
 800fc76:	2b03      	cmp	r3, #3
 800fc78:	d117      	bne.n	800fcaa <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d113      	bne.n	800fcaa <USB_HC_StartXfer+0x306>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	78db      	ldrb	r3, [r3, #3]
 800fc86:	2b01      	cmp	r3, #1
 800fc88:	d10f      	bne.n	800fcaa <USB_HC_StartXfer+0x306>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	015a      	lsls	r2, r3, #5
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	4413      	add	r3, r2
 800fc92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	69fa      	ldr	r2, [r7, #28]
 800fc9a:	0151      	lsls	r1, r2, #5
 800fc9c:	6a3a      	ldr	r2, [r7, #32]
 800fc9e:	440a      	add	r2, r1
 800fca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fca8:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	7c9b      	ldrb	r3, [r3, #18]
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d163      	bne.n	800fd7a <USB_HC_StartXfer+0x3d6>
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	78db      	ldrb	r3, [r3, #3]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d15f      	bne.n	800fd7a <USB_HC_StartXfer+0x3d6>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	2b03      	cmp	r3, #3
 800fcc2:	d859      	bhi.n	800fd78 <USB_HC_StartXfer+0x3d4>
 800fcc4:	a201      	add	r2, pc, #4	@ (adr r2, 800fccc <USB_HC_StartXfer+0x328>)
 800fcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcca:	bf00      	nop
 800fccc:	0800fcdd 	.word	0x0800fcdd
 800fcd0:	0800fcff 	.word	0x0800fcff
 800fcd4:	0800fd21 	.word	0x0800fd21
 800fcd8:	0800fd43 	.word	0x0800fd43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	015a      	lsls	r2, r3, #5
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	4413      	add	r3, r2
 800fce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	69fa      	ldr	r2, [r7, #28]
 800fcec:	0151      	lsls	r1, r2, #5
 800fcee:	6a3a      	ldr	r2, [r7, #32]
 800fcf0:	440a      	add	r2, r1
 800fcf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fcf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fcfa:	6053      	str	r3, [r2, #4]
          break;
 800fcfc:	e03d      	b.n	800fd7a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	6a3b      	ldr	r3, [r7, #32]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	69fa      	ldr	r2, [r7, #28]
 800fd0e:	0151      	lsls	r1, r2, #5
 800fd10:	6a3a      	ldr	r2, [r7, #32]
 800fd12:	440a      	add	r2, r1
 800fd14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fd18:	f043 030e 	orr.w	r3, r3, #14
 800fd1c:	6053      	str	r3, [r2, #4]
          break;
 800fd1e:	e02c      	b.n	800fd7a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	015a      	lsls	r2, r3, #5
 800fd24:	6a3b      	ldr	r3, [r7, #32]
 800fd26:	4413      	add	r3, r2
 800fd28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	69fa      	ldr	r2, [r7, #28]
 800fd30:	0151      	lsls	r1, r2, #5
 800fd32:	6a3a      	ldr	r2, [r7, #32]
 800fd34:	440a      	add	r2, r1
 800fd36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fd3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fd3e:	6053      	str	r3, [r2, #4]
          break;
 800fd40:	e01b      	b.n	800fd7a <USB_HC_StartXfer+0x3d6>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	015a      	lsls	r2, r3, #5
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	4413      	add	r3, r2
 800fd4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	69fa      	ldr	r2, [r7, #28]
 800fd52:	0151      	lsls	r1, r2, #5
 800fd54:	6a3a      	ldr	r2, [r7, #32]
 800fd56:	440a      	add	r2, r1
 800fd58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800fd5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fd60:	6053      	str	r3, [r2, #4]
          break;
 800fd62:	e00a      	b.n	800fd7a <USB_HC_StartXfer+0x3d6>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	015a      	lsls	r2, r3, #5
 800fd68:	6a3b      	ldr	r3, [r7, #32]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd70:	461a      	mov	r2, r3
 800fd72:	2300      	movs	r3, #0
 800fd74:	6053      	str	r3, [r2, #4]
 800fd76:	e000      	b.n	800fd7a <USB_HC_StartXfer+0x3d6>
          break;
 800fd78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	6a3b      	ldr	r3, [r7, #32]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800fd90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	78db      	ldrb	r3, [r3, #3]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d004      	beq.n	800fda4 <USB_HC_StartXfer+0x400>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fda0:	613b      	str	r3, [r7, #16]
 800fda2:	e003      	b.n	800fdac <USB_HC_StartXfer+0x408>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fdaa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fdb2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	015a      	lsls	r2, r3, #5
 800fdb8:	6a3b      	ldr	r3, [r7, #32]
 800fdba:	4413      	add	r3, r2
 800fdbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800fdc6:	79fb      	ldrb	r3, [r7, #7]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <USB_HC_StartXfer+0x430>
  {
    return HAL_OK;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	e055      	b.n	800fe7c <USB_HC_StartXfer+0x4d8>
 800fdd0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	78db      	ldrb	r3, [r3, #3]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d14e      	bne.n	800fe7a <USB_HC_StartXfer+0x4d6>
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	6a1b      	ldr	r3, [r3, #32]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d04a      	beq.n	800fe7a <USB_HC_StartXfer+0x4d6>
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	79db      	ldrb	r3, [r3, #7]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d146      	bne.n	800fe7a <USB_HC_StartXfer+0x4d6>
  {
    switch (hc->ep_type)
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	7c9b      	ldrb	r3, [r3, #18]
 800fdf0:	2b03      	cmp	r3, #3
 800fdf2:	d831      	bhi.n	800fe58 <USB_HC_StartXfer+0x4b4>
 800fdf4:	a201      	add	r2, pc, #4	@ (adr r2, 800fdfc <USB_HC_StartXfer+0x458>)
 800fdf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdfa:	bf00      	nop
 800fdfc:	0800fe0d 	.word	0x0800fe0d
 800fe00:	0800fe31 	.word	0x0800fe31
 800fe04:	0800fe0d 	.word	0x0800fe0d
 800fe08:	0800fe31 	.word	0x0800fe31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	6a1b      	ldr	r3, [r3, #32]
 800fe10:	3303      	adds	r3, #3
 800fe12:	089b      	lsrs	r3, r3, #2
 800fe14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800fe16:	8afa      	ldrh	r2, [r7, #22]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d91c      	bls.n	800fe5c <USB_HC_StartXfer+0x4b8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	699b      	ldr	r3, [r3, #24]
 800fe26:	f043 0220 	orr.w	r2, r3, #32
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	619a      	str	r2, [r3, #24]
        }
        break;
 800fe2e:	e015      	b.n	800fe5c <USB_HC_StartXfer+0x4b8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	6a1b      	ldr	r3, [r3, #32]
 800fe34:	3303      	adds	r3, #3
 800fe36:	089b      	lsrs	r3, r3, #2
 800fe38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800fe3a:	8afa      	ldrh	r2, [r7, #22]
 800fe3c:	6a3b      	ldr	r3, [r7, #32]
 800fe3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fe42:	691b      	ldr	r3, [r3, #16]
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d90a      	bls.n	800fe60 <USB_HC_StartXfer+0x4bc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	619a      	str	r2, [r3, #24]
        }
        break;
 800fe56:	e003      	b.n	800fe60 <USB_HC_StartXfer+0x4bc>

      default:
        break;
 800fe58:	bf00      	nop
 800fe5a:	e002      	b.n	800fe62 <USB_HC_StartXfer+0x4be>
        break;
 800fe5c:	bf00      	nop
 800fe5e:	e000      	b.n	800fe62 <USB_HC_StartXfer+0x4be>
        break;
 800fe60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	6999      	ldr	r1, [r3, #24]
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	785a      	ldrb	r2, [r3, #1]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	6a1b      	ldr	r3, [r3, #32]
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	2000      	movs	r0, #0
 800fe72:	9000      	str	r0, [sp, #0]
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7fe ffb7 	bl	800ede8 <USB_WritePacket>
  }

  return HAL_OK;
 800fe7a:	2300      	movs	r3, #0
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3728      	adds	r7, #40	@ 0x28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800fe84:	b480      	push	{r7}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fe96:	695b      	ldr	r3, [r3, #20]
 800fe98:	b29b      	uxth	r3, r3
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800fea6:	b480      	push	{r7}
 800fea8:	b089      	sub	sp, #36	@ 0x24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
 800feae:	460b      	mov	r3, r1
 800feb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800feb6:	78fb      	ldrb	r3, [r7, #3]
 800feb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800feba:	2300      	movs	r3, #0
 800febc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	015a      	lsls	r2, r3, #5
 800fec2:	69fb      	ldr	r3, [r7, #28]
 800fec4:	4413      	add	r3, r2
 800fec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	0c9b      	lsrs	r3, r3, #18
 800fece:	f003 0303 	and.w	r3, r3, #3
 800fed2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	015a      	lsls	r2, r3, #5
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	4413      	add	r3, r2
 800fedc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	0fdb      	lsrs	r3, r3, #31
 800fee4:	f003 0301 	and.w	r3, r3, #1
 800fee8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	015a      	lsls	r2, r3, #5
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	4413      	add	r3, r2
 800fef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	0fdb      	lsrs	r3, r3, #31
 800fefa:	f003 0301 	and.w	r3, r3, #1
 800fefe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	689b      	ldr	r3, [r3, #8]
 800ff04:	f003 0320 	and.w	r3, r3, #32
 800ff08:	2b20      	cmp	r3, #32
 800ff0a:	d10d      	bne.n	800ff28 <USB_HC_Halt+0x82>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d10a      	bne.n	800ff28 <USB_HC_Halt+0x82>
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d005      	beq.n	800ff24 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d002      	beq.n	800ff24 <USB_HC_Halt+0x7e>
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	2b03      	cmp	r3, #3
 800ff22:	d101      	bne.n	800ff28 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	e0d8      	b.n	80100da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d002      	beq.n	800ff34 <USB_HC_Halt+0x8e>
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	2b02      	cmp	r3, #2
 800ff32:	d173      	bne.n	801001c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ff34:	69bb      	ldr	r3, [r7, #24]
 800ff36:	015a      	lsls	r2, r3, #5
 800ff38:	69fb      	ldr	r3, [r7, #28]
 800ff3a:	4413      	add	r3, r2
 800ff3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	69ba      	ldr	r2, [r7, #24]
 800ff44:	0151      	lsls	r1, r2, #5
 800ff46:	69fa      	ldr	r2, [r7, #28]
 800ff48:	440a      	add	r2, r1
 800ff4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ff4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ff52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	689b      	ldr	r3, [r3, #8]
 800ff58:	f003 0320 	and.w	r3, r3, #32
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d14a      	bne.n	800fff6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d133      	bne.n	800ffd4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	015a      	lsls	r2, r3, #5
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	4413      	add	r3, r2
 800ff74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	0151      	lsls	r1, r2, #5
 800ff7e:	69fa      	ldr	r2, [r7, #28]
 800ff80:	440a      	add	r2, r1
 800ff82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ff86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	69ba      	ldr	r2, [r7, #24]
 800ff9c:	0151      	lsls	r1, r2, #5
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	440a      	add	r2, r1
 800ffa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ffa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ffaa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ffb8:	d82e      	bhi.n	8010018 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ffba:	69bb      	ldr	r3, [r7, #24]
 800ffbc:	015a      	lsls	r2, r3, #5
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ffcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ffd0:	d0ec      	beq.n	800ffac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ffd2:	e081      	b.n	80100d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	015a      	lsls	r2, r3, #5
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	4413      	add	r3, r2
 800ffdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	69ba      	ldr	r2, [r7, #24]
 800ffe4:	0151      	lsls	r1, r2, #5
 800ffe6:	69fa      	ldr	r2, [r7, #28]
 800ffe8:	440a      	add	r2, r1
 800ffea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ffee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800fff2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800fff4:	e070      	b.n	80100d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	015a      	lsls	r2, r3, #5
 800fffa:	69fb      	ldr	r3, [r7, #28]
 800fffc:	4413      	add	r3, r2
 800fffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	69ba      	ldr	r2, [r7, #24]
 8010006:	0151      	lsls	r1, r2, #5
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	440a      	add	r2, r1
 801000c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010014:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8010016:	e05f      	b.n	80100d8 <USB_HC_Halt+0x232>
            break;
 8010018:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801001a:	e05d      	b.n	80100d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	4413      	add	r3, r2
 8010024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	69ba      	ldr	r2, [r7, #24]
 801002c:	0151      	lsls	r1, r2, #5
 801002e:	69fa      	ldr	r2, [r7, #28]
 8010030:	440a      	add	r2, r1
 8010032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010036:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801003a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d133      	bne.n	80100b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	015a      	lsls	r2, r3, #5
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	4413      	add	r3, r2
 8010054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	0151      	lsls	r1, r2, #5
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	440a      	add	r2, r1
 8010062:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010066:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801006a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	4413      	add	r3, r2
 8010074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	69ba      	ldr	r2, [r7, #24]
 801007c:	0151      	lsls	r1, r2, #5
 801007e:	69fa      	ldr	r2, [r7, #28]
 8010080:	440a      	add	r2, r1
 8010082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801008a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801008c:	68bb      	ldr	r3, [r7, #8]
 801008e:	3301      	adds	r3, #1
 8010090:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010098:	d81d      	bhi.n	80100d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	015a      	lsls	r2, r3, #5
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	4413      	add	r3, r2
 80100a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80100ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80100b0:	d0ec      	beq.n	801008c <USB_HC_Halt+0x1e6>
 80100b2:	e011      	b.n	80100d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	015a      	lsls	r2, r3, #5
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	4413      	add	r3, r2
 80100bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	69ba      	ldr	r2, [r7, #24]
 80100c4:	0151      	lsls	r1, r2, #5
 80100c6:	69fa      	ldr	r2, [r7, #28]
 80100c8:	440a      	add	r2, r1
 80100ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80100ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	e000      	b.n	80100d8 <USB_HC_Halt+0x232>
          break;
 80100d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80100d8:	2300      	movs	r3, #0
}
 80100da:	4618      	mov	r0, r3
 80100dc:	3724      	adds	r7, #36	@ 0x24
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr
	...

080100e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80100e8:	b480      	push	{r7}
 80100ea:	b087      	sub	sp, #28
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80100f8:	78fb      	ldrb	r3, [r7, #3]
 80100fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80100fc:	2301      	movs	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	04da      	lsls	r2, r3, #19
 8010104:	4b15      	ldr	r3, [pc, #84]	@ (801015c <USB_DoPing+0x74>)
 8010106:	4013      	ands	r3, r2
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	0151      	lsls	r1, r2, #5
 801010c:	697a      	ldr	r2, [r7, #20]
 801010e:	440a      	add	r2, r1
 8010110:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	015a      	lsls	r2, r3, #5
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	4413      	add	r3, r2
 8010122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8010138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	015a      	lsls	r2, r3, #5
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	4413      	add	r3, r2
 8010142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010146:	461a      	mov	r2, r3
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	371c      	adds	r7, #28
 8010152:	46bd      	mov	sp, r7
 8010154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop
 801015c:	1ff80000 	.word	0x1ff80000

08010160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b088      	sub	sp, #32
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010168:	2300      	movs	r3, #0
 801016a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f7fe f808 	bl	800e18a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801017a:	2110      	movs	r1, #16
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7fe f9bf 	bl	800e500 <USB_FlushTxFifo>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8010188:	2301      	movs	r3, #1
 801018a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f7fe f9e9 	bl	800e564 <USB_FlushRxFifo>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8010198:	2301      	movs	r3, #1
 801019a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801019c:	2300      	movs	r3, #0
 801019e:	61bb      	str	r3, [r7, #24]
 80101a0:	e01f      	b.n	80101e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	015a      	lsls	r2, r3, #5
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	4413      	add	r3, r2
 80101aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80101b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80101c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80101c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	015a      	lsls	r2, r3, #5
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	4413      	add	r3, r2
 80101d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80101d6:	461a      	mov	r2, r3
 80101d8:	693b      	ldr	r3, [r7, #16]
 80101da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80101dc:	69bb      	ldr	r3, [r7, #24]
 80101de:	3301      	adds	r3, #1
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	2b0f      	cmp	r3, #15
 80101e6:	d9dc      	bls.n	80101a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80101e8:	2300      	movs	r3, #0
 80101ea:	61bb      	str	r3, [r7, #24]
 80101ec:	e034      	b.n	8010258 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	015a      	lsls	r2, r3, #5
 80101f2:	697b      	ldr	r3, [r7, #20]
 80101f4:	4413      	add	r3, r2
 80101f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80101fe:	693b      	ldr	r3, [r7, #16]
 8010200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010204:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801020c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010214:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	015a      	lsls	r2, r3, #5
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	4413      	add	r3, r2
 801021e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010222:	461a      	mov	r2, r3
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	3301      	adds	r3, #1
 801022c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8010234:	d80c      	bhi.n	8010250 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	015a      	lsls	r2, r3, #5
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	4413      	add	r3, r2
 801023e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801024c:	d0ec      	beq.n	8010228 <USB_StopHost+0xc8>
 801024e:	e000      	b.n	8010252 <USB_StopHost+0xf2>
        break;
 8010250:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	3301      	adds	r3, #1
 8010256:	61bb      	str	r3, [r7, #24]
 8010258:	69bb      	ldr	r3, [r7, #24]
 801025a:	2b0f      	cmp	r3, #15
 801025c:	d9c7      	bls.n	80101ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010264:	461a      	mov	r2, r3
 8010266:	f04f 33ff 	mov.w	r3, #4294967295
 801026a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f04f 32ff 	mov.w	r2, #4294967295
 8010272:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7fd ff77 	bl	800e168 <USB_EnableGlobalInt>

  return ret;
 801027a:	7ffb      	ldrb	r3, [r7, #31]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3720      	adds	r7, #32
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}

08010284 <__NVIC_SystemReset>:
{
 8010284:	b480      	push	{r7}
 8010286:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8010288:	f3bf 8f4f 	dsb	sy
}
 801028c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801028e:	4b06      	ldr	r3, [pc, #24]	@ (80102a8 <__NVIC_SystemReset+0x24>)
 8010290:	68db      	ldr	r3, [r3, #12]
 8010292:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8010296:	4904      	ldr	r1, [pc, #16]	@ (80102a8 <__NVIC_SystemReset+0x24>)
 8010298:	4b04      	ldr	r3, [pc, #16]	@ (80102ac <__NVIC_SystemReset+0x28>)
 801029a:	4313      	orrs	r3, r2
 801029c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801029e:	f3bf 8f4f 	dsb	sy
}
 80102a2:	bf00      	nop
    __NOP();
 80102a4:	bf00      	nop
 80102a6:	e7fd      	b.n	80102a4 <__NVIC_SystemReset+0x20>
 80102a8:	e000ed00 	.word	0xe000ed00
 80102ac:	05fa0004 	.word	0x05fa0004

080102b0 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 80102bc:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 80102c0:	f008 f8c8 	bl	8018454 <USBD_static_malloc>
 80102c4:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d109      	bne.n	80102e0 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	32b0      	adds	r2, #176	@ 0xb0
 80102d6:	2100      	movs	r1, #0
 80102d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80102dc:	2302      	movs	r3, #2
 80102de:	e052      	b.n	8010386 <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	32b0      	adds	r2, #176	@ 0xb0
 80102ea:	68f9      	ldr	r1, [r7, #12]
 80102ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	32b0      	adds	r2, #176	@ 0xb0
 80102fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8010312:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2200      	movs	r2, #0
 801031a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	2200      	movs	r2, #0
 8010322:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2202      	movs	r2, #2
 8010332:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2202      	movs	r2, #2
 801035a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801036c:	687a      	ldr	r2, [r7, #4]
 801036e:	33b0      	adds	r3, #176	@ 0xb0
 8010370:	009b      	lsls	r3, r3, #2
 8010372:	4413      	add	r3, r2
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	4798      	blx	r3
 801037a:	4603      	mov	r3, r0
 801037c:	2b00      	cmp	r3, #0
 801037e:	d001      	beq.n	8010384 <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8010380:	2303      	movs	r3, #3
 8010382:	e000      	b.n	8010386 <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8010384:	2300      	movs	r3, #0
}
 8010386:	4618      	mov	r0, r3
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b084      	sub	sp, #16
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
 8010396:	460b      	mov	r3, r1
 8010398:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	32b0      	adds	r2, #176	@ 0xb0
 80103a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d101      	bne.n	80103b0 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 80103ac:	2302      	movs	r3, #2
 80103ae:	e03c      	b.n	801042a <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	32b0      	adds	r2, #176	@ 0xb0
 80103ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103be:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2200      	movs	r2, #0
 80103c4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2200      	movs	r2, #0
 80103cc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	2202      	movs	r2, #2
 80103d4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	2200      	movs	r2, #0
 80103dc:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2202      	movs	r2, #2
 80103e4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	33b0      	adds	r3, #176	@ 0xb0
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	689b      	ldr	r3, [r3, #8]
 80103fa:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	32b0      	adds	r2, #176	@ 0xb0
 8010406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801040a:	4618      	mov	r0, r3
 801040c:	f008 f830 	bl	8018470 <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	32b0      	adds	r2, #176	@ 0xb0
 801041a:	2100      	movs	r1, #0
 801041c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	32b0      	adds	r2, #176	@ 0xb0
 8010448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801044c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801044e:	2300      	movs	r3, #0
 8010450:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8010452:	2300      	movs	r3, #0
 8010454:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d101      	bne.n	8010460 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 801045c:	2303      	movs	r3, #3
 801045e:	e0e8      	b.n	8010632 <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010468:	2b00      	cmp	r3, #0
 801046a:	d03e      	beq.n	80104ea <USBD_DFU_Setup+0xb6>
 801046c:	2b20      	cmp	r3, #32
 801046e:	f040 80d8 	bne.w	8010622 <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	785b      	ldrb	r3, [r3, #1]
 8010476:	2b06      	cmp	r3, #6
 8010478:	d82f      	bhi.n	80104da <USBD_DFU_Setup+0xa6>
 801047a:	a201      	add	r2, pc, #4	@ (adr r2, 8010480 <USBD_DFU_Setup+0x4c>)
 801047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010480:	080104d1 	.word	0x080104d1
 8010484:	0801049d 	.word	0x0801049d
 8010488:	080104a7 	.word	0x080104a7
 801048c:	080104b1 	.word	0x080104b1
 8010490:	080104b9 	.word	0x080104b9
 8010494:	080104c1 	.word	0x080104c1
 8010498:	080104c9 	.word	0x080104c9
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 801049c:	6839      	ldr	r1, [r7, #0]
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 fac2 	bl	8010a28 <DFU_Download>
          break;
 80104a4:	e020      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80104a6:	6839      	ldr	r1, [r7, #0]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 fb33 	bl	8010b14 <DFU_Upload>
          break;
 80104ae:	e01b      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80104b0:	6878      	ldr	r0, [r7, #4]
 80104b2:	f000 fc37 	bl	8010d24 <DFU_GetStatus>
          break;
 80104b6:	e017      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 fcff 	bl	8010ebc <DFU_ClearStatus>
          break;
 80104be:	e013      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f000 fd53 	bl	8010f6c <DFU_GetState>
          break;
 80104c6:	e00f      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 fd6b 	bl	8010fa4 <DFU_Abort>
          break;
 80104ce:	e00b      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fa38 	bl	8010948 <DFU_Detach>
          break;
 80104d8:	e006      	b.n	80104e8 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 80104da:	6839      	ldr	r1, [r7, #0]
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f002 f882 	bl	80125e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80104e2:	2303      	movs	r3, #3
 80104e4:	75fb      	strb	r3, [r7, #23]
          break;
 80104e6:	bf00      	nop
      }
      break;
 80104e8:	e0a2      	b.n	8010630 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	785b      	ldrb	r3, [r3, #1]
 80104ee:	2b0b      	cmp	r3, #11
 80104f0:	f200 808c 	bhi.w	801060c <USBD_DFU_Setup+0x1d8>
 80104f4:	a201      	add	r2, pc, #4	@ (adr r2, 80104fc <USBD_DFU_Setup+0xc8>)
 80104f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104fa:	bf00      	nop
 80104fc:	0801052d 	.word	0x0801052d
 8010500:	0801061b 	.word	0x0801061b
 8010504:	0801060d 	.word	0x0801060d
 8010508:	0801060d 	.word	0x0801060d
 801050c:	0801060d 	.word	0x0801060d
 8010510:	0801060d 	.word	0x0801060d
 8010514:	08010557 	.word	0x08010557
 8010518:	0801060d 	.word	0x0801060d
 801051c:	0801060d 	.word	0x0801060d
 8010520:	0801060d 	.word	0x0801060d
 8010524:	0801059f 	.word	0x0801059f
 8010528:	080105cb 	.word	0x080105cb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010532:	b2db      	uxtb	r3, r3
 8010534:	2b03      	cmp	r3, #3
 8010536:	d107      	bne.n	8010548 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010538:	f107 0308 	add.w	r3, r7, #8
 801053c:	2202      	movs	r2, #2
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f002 f8cd 	bl	80126e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010546:	e06b      	b.n	8010620 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8010548:	6839      	ldr	r1, [r7, #0]
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f002 f84b 	bl	80125e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010550:	2303      	movs	r3, #3
 8010552:	75fb      	strb	r3, [r7, #23]
          break;
 8010554:	e064      	b.n	8010620 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	885b      	ldrh	r3, [r3, #2]
 801055a:	0a1b      	lsrs	r3, r3, #8
 801055c:	b29b      	uxth	r3, r3
 801055e:	2b21      	cmp	r3, #33	@ 0x21
 8010560:	d15d      	bne.n	801061e <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8010568:	4618      	mov	r0, r3
 801056a:	f000 fdd5 	bl	8011118 <USBD_DFU_GetDfuFuncDesc>
 801056e:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d00c      	beq.n	8010590 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	88db      	ldrh	r3, [r3, #6]
 801057a:	2b09      	cmp	r3, #9
 801057c:	bf28      	it	cs
 801057e:	2309      	movcs	r3, #9
 8010580:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8010582:	897b      	ldrh	r3, [r7, #10]
 8010584:	461a      	mov	r2, r3
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f002 f8a9 	bl	80126e0 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 801058e:	e046      	b.n	801061e <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8010590:	6839      	ldr	r1, [r7, #0]
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f002 f827 	bl	80125e6 <USBD_CtlError>
              ret = USBD_FAIL;
 8010598:	2303      	movs	r3, #3
 801059a:	75fb      	strb	r3, [r7, #23]
          break;
 801059c:	e03f      	b.n	801061e <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d108      	bne.n	80105bc <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 80105b0:	2201      	movs	r2, #1
 80105b2:	4619      	mov	r1, r3
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f002 f893 	bl	80126e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80105ba:	e031      	b.n	8010620 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80105bc:	6839      	ldr	r1, [r7, #0]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f002 f811 	bl	80125e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80105c4:	2303      	movs	r3, #3
 80105c6:	75fb      	strb	r3, [r7, #23]
          break;
 80105c8:	e02a      	b.n	8010620 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	885b      	ldrh	r3, [r3, #2]
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d114      	bne.n	80105fe <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b03      	cmp	r3, #3
 80105de:	d107      	bne.n	80105f0 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	885b      	ldrh	r3, [r3, #2]
 80105e4:	b2db      	uxtb	r3, r3
 80105e6:	461a      	mov	r2, r3
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80105ee:	e017      	b.n	8010620 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f001 fff7 	bl	80125e6 <USBD_CtlError>
              ret = USBD_FAIL;
 80105f8:	2303      	movs	r3, #3
 80105fa:	75fb      	strb	r3, [r7, #23]
          break;
 80105fc:	e010      	b.n	8010620 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f001 fff0 	bl	80125e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010606:	2303      	movs	r3, #3
 8010608:	75fb      	strb	r3, [r7, #23]
          break;
 801060a:	e009      	b.n	8010620 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801060c:	6839      	ldr	r1, [r7, #0]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f001 ffe9 	bl	80125e6 <USBD_CtlError>
          ret = USBD_FAIL;
 8010614:	2303      	movs	r3, #3
 8010616:	75fb      	strb	r3, [r7, #23]
          break;
 8010618:	e002      	b.n	8010620 <USBD_DFU_Setup+0x1ec>
          break;
 801061a:	bf00      	nop
 801061c:	e008      	b.n	8010630 <USBD_DFU_Setup+0x1fc>
          break;
 801061e:	bf00      	nop
      }
      break;
 8010620:	e006      	b.n	8010630 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8010622:	6839      	ldr	r1, [r7, #0]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f001 ffde 	bl	80125e6 <USBD_CtlError>
      ret = USBD_FAIL;
 801062a:	2303      	movs	r3, #3
 801062c:	75fb      	strb	r3, [r7, #23]
      break;
 801062e:	bf00      	nop
  }

  return (uint8_t)ret;
 8010630:	7dfb      	ldrb	r3, [r7, #23]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop

0801063c <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	221b      	movs	r2, #27
 8010648:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 801064a:	4b03      	ldr	r3, [pc, #12]	@ (8010658 <USBD_DFU_GetCfgDesc+0x1c>)
}
 801064c:	4618      	mov	r0, r3
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	2400004c 	.word	0x2400004c

0801065c <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8010664:	2300      	movs	r3, #0
}
 8010666:	4618      	mov	r0, r3
 8010668:	370c      	adds	r7, #12
 801066a:	46bd      	mov	sp, r7
 801066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010670:	4770      	bx	lr

08010672 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b088      	sub	sp, #32
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	32b0      	adds	r2, #176	@ 0xb0
 8010684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010688:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	33b0      	adds	r3, #176	@ 0xb0
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80106a2:	2303      	movs	r3, #3
 80106a4:	e0f1      	b.n	801088a <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80106ac:	2b04      	cmp	r3, #4
 80106ae:	f040 80e0 	bne.w	8010872 <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	f040 8085 	bne.w	80107c8 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 80106be:	69fb      	ldr	r3, [r7, #28]
 80106c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	f000 80b5 	beq.w	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80106d0:	2b05      	cmp	r3, #5
 80106d2:	d166      	bne.n	80107a2 <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	2b21      	cmp	r3, #33	@ 0x21
 80106da:	d124      	bne.n	8010726 <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 80106dc:	69fb      	ldr	r3, [r7, #28]
 80106de:	785b      	ldrb	r3, [r3, #1]
 80106e0:	461a      	mov	r2, r3
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80106ee:	69fb      	ldr	r3, [r7, #28]
 80106f0:	789b      	ldrb	r3, [r3, #2]
 80106f2:	021b      	lsls	r3, r3, #8
 80106f4:	441a      	add	r2, r3
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	78db      	ldrb	r3, [r3, #3]
 8010706:	041b      	lsls	r3, r3, #16
 8010708:	441a      	add	r2, r3
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	791b      	ldrb	r3, [r3, #4]
 801071a:	061b      	lsls	r3, r3, #24
 801071c:	441a      	add	r2, r3
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8010724:	e086      	b.n	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	2b41      	cmp	r3, #65	@ 0x41
 801072c:	d137      	bne.n	801079e <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	785b      	ldrb	r3, [r3, #1]
 8010732:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8010734:	69fb      	ldr	r3, [r7, #28]
 8010736:	789b      	ldrb	r3, [r3, #2]
 8010738:	021b      	lsls	r3, r3, #8
 801073a:	693a      	ldr	r2, [r7, #16]
 801073c:	4413      	add	r3, r2
 801073e:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	78db      	ldrb	r3, [r3, #3]
 8010744:	041b      	lsls	r3, r3, #16
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	4413      	add	r3, r2
 801074a:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	791b      	ldrb	r3, [r3, #4]
 8010750:	061b      	lsls	r3, r3, #24
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	4413      	add	r3, r2
 8010756:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	6938      	ldr	r0, [r7, #16]
 801075e:	4798      	blx	r3
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d066      	beq.n	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	220a      	movs	r2, #10
 801076a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	220b      	movs	r2, #11
 8010772:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	2200      	movs	r2, #0
 801077a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	2200      	movs	r2, #0
 8010782:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	2200      	movs	r2, #0
 801078a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 801079a:	2303      	movs	r3, #3
 801079c:	e075      	b.n	801088a <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 801079e:	2303      	movs	r3, #3
 80107a0:	e073      	b.n	801088a <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	2200      	movs	r2, #0
 80107ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80107b2:	2300      	movs	r3, #0
 80107b4:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 80107b6:	2301      	movs	r3, #1
 80107b8:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 80107ba:	f107 0308 	add.w	r3, r7, #8
 80107be:	4619      	mov	r1, r3
 80107c0:	6878      	ldr	r0, [r7, #4]
 80107c2:	f001 ff10 	bl	80125e6 <USBD_CtlError>
 80107c6:	e035      	b.n	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d930      	bls.n	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80107d8:	3b02      	subs	r3, #2
 80107da:	029a      	lsls	r2, r3, #10
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80107e2:	4413      	add	r3, r2
 80107e4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	691b      	ldr	r3, [r3, #16]
 80107ea:	69f8      	ldr	r0, [r7, #28]
 80107ec:	6979      	ldr	r1, [r7, #20]
 80107ee:	69fa      	ldr	r2, [r7, #28]
 80107f0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80107f4:	4798      	blx	r3
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01b      	beq.n	8010834 <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	220a      	movs	r2, #10
 8010800:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	220b      	movs	r2, #11
 8010808:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 801080c:	69fb      	ldr	r3, [r7, #28]
 801080e:	2200      	movs	r2, #0
 8010810:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	2200      	movs	r2, #0
 8010818:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	2200      	movs	r2, #0
 8010820:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8010830:	2303      	movs	r3, #3
 8010832:	e02a      	b.n	801088a <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8010834:	69fb      	ldr	r3, [r7, #28]
 8010836:	2200      	movs	r2, #0
 8010838:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	2200      	movs	r2, #0
 8010840:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2203      	movs	r2, #3
 8010848:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	2200      	movs	r2, #0
 8010850:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	2200      	movs	r2, #0
 8010858:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	2200      	movs	r2, #0
 8010860:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801086a:	69fb      	ldr	r3, [r7, #28]
 801086c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8010870:	e00a      	b.n	8010888 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010878:	2b07      	cmp	r3, #7
 801087a:	d103      	bne.n	8010884 <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fbe6 	bl	801104e <DFU_Leave>
 8010882:	e001      	b.n	8010888 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8010884:	2303      	movs	r3, #3
 8010886:	e000      	b.n	801088a <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	3720      	adds	r7, #32
 801088e:	46bd      	mov	sp, r7
 8010890:	bd80      	pop	{r7, pc}

08010892 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8010892:	b480      	push	{r7}
 8010894:	b083      	sub	sp, #12
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	370c      	adds	r7, #12
 80108a0:	46bd      	mov	sp, r7
 80108a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a6:	4770      	bx	lr

080108a8 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 80108a8:	b480      	push	{r7}
 80108aa:	b083      	sub	sp, #12
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	220a      	movs	r2, #10
 80108b4:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 80108b6:	4b03      	ldr	r3, [pc, #12]	@ (80108c4 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	370c      	adds	r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c2:	4770      	bx	lr
 80108c4:	24000068 	.word	0x24000068

080108c8 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b086      	sub	sp, #24
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	460b      	mov	r3, r1
 80108d2:	607a      	str	r2, [r7, #4]
 80108d4:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	33b0      	adds	r3, #176	@ 0xb0
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80108e8:	7afb      	ldrb	r3, [r7, #11]
 80108ea:	2b06      	cmp	r3, #6
 80108ec:	d808      	bhi.n	8010900 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	4906      	ldr	r1, [pc, #24]	@ (8010910 <USBD_DFU_GetUsrStringDesc+0x48>)
 80108f6:	4618      	mov	r0, r3
 80108f8:	f001 fe86 	bl	8012608 <USBD_GetString>
    return USBD_StrDesc;
 80108fc:	4b04      	ldr	r3, [pc, #16]	@ (8010910 <USBD_DFU_GetUsrStringDesc+0x48>)
 80108fe:	e003      	b.n	8010908 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	801a      	strh	r2, [r3, #0]
    return NULL;
 8010906:	2300      	movs	r3, #0
  }
}
 8010908:	4618      	mov	r0, r3
 801090a:	3718      	adds	r7, #24
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	24000954 	.word	0x24000954

08010914 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d101      	bne.n	8010928 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010924:	2303      	movs	r3, #3
 8010926:	e009      	b.n	801093c <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	33b0      	adds	r3, #176	@ 0xb0
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4413      	add	r3, r2
 8010936:	683a      	ldr	r2, [r7, #0]
 8010938:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	370c      	adds	r7, #12
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
 8010950:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	32b0      	adds	r2, #176	@ 0xb0
 801095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010960:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8010968:	4618      	mov	r0, r3
 801096a:	f000 fbd5 	bl	8011118 <USBD_DFU_GetDfuFuncDesc>
 801096e:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d054      	beq.n	8010a20 <DFU_Detach+0xd8>
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d051      	beq.n	8010a20 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010982:	2b02      	cmp	r3, #2
 8010984:	d013      	beq.n	80109ae <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801098c:	2b03      	cmp	r3, #3
 801098e:	d00e      	beq.n	80109ae <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010996:	2b05      	cmp	r3, #5
 8010998:	d009      	beq.n	80109ae <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80109a0:	2b06      	cmp	r3, #6
 80109a2:	d004      	beq.n	80109ae <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80109aa:	2b09      	cmp	r3, #9
 80109ac:	d125      	bne.n	80109fa <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	2202      	movs	r2, #2
 80109b2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2200      	movs	r2, #0
 80109e6:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2200      	movs	r2, #0
 80109ee:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	2200      	movs	r2, #0
 80109f6:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	789b      	ldrb	r3, [r3, #2]
 80109fe:	f003 0308 	and.w	r3, r3, #8
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d006      	beq.n	8010a14 <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fc26 	bl	8011258 <USBD_Stop>
    (void)USBD_Start(pdev);
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f000 fc17 	bl	8011240 <USBD_Start>
 8010a12:	e006      	b.n	8010a22 <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	885b      	ldrh	r3, [r3, #2]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7f1 fde5 	bl	80025e8 <HAL_Delay>
 8010a1e:	e000      	b.n	8010a22 <DFU_Detach+0xda>
    return;
 8010a20:	bf00      	nop
  }
}
 8010a22:	3710      	adds	r7, #16
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	32b0      	adds	r2, #176	@ 0xb0
 8010a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a40:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d061      	beq.n	8010b0c <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	88db      	ldrh	r3, [r3, #6]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d033      	beq.n	8010ab8 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d004      	beq.n	8010a64 <DFU_Download+0x3c>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010a60:	2b05      	cmp	r3, #5
 8010a62:	d124      	bne.n	8010aae <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	885b      	ldrh	r3, [r3, #2]
 8010a68:	461a      	mov	r2, r3
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	88db      	ldrh	r3, [r3, #6]
 8010a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010a78:	bf28      	it	cs
 8010a7a:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	461a      	mov	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2203      	movs	r2, #3
 8010a8c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8010a9c:	68f9      	ldr	r1, [r7, #12]
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f001 fe46 	bl	8012738 <USBD_CtlPrepareRx>
 8010aac:	e02f      	b.n	8010b0e <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010aae:	6839      	ldr	r1, [r7, #0]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f001 fd98 	bl	80125e6 <USBD_CtlError>
 8010ab6:	e02a      	b.n	8010b0e <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010abe:	2b05      	cmp	r3, #5
 8010ac0:	d004      	beq.n	8010acc <DFU_Download+0xa4>
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010ac8:	2b02      	cmp	r3, #2
 8010aca:	d11a      	bne.n	8010b02 <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2206      	movs	r2, #6
 8010ad8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8010b00:	e005      	b.n	8010b0e <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8010b02:	6839      	ldr	r1, [r7, #0]
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f001 fd6e 	bl	80125e6 <USBD_CtlError>
 8010b0a:	e000      	b.n	8010b0e <DFU_Download+0xe6>
    return;
 8010b0c:	bf00      	nop
    }
  }
}
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b088      	sub	sp, #32
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	32b0      	adds	r2, #176	@ 0xb0
 8010b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b2c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	33b0      	adds	r3, #176	@ 0xb0
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f000 80ea 	beq.w	8010d1c <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	88db      	ldrh	r3, [r3, #6]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f000 80ce 	beq.w	8010cee <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	d005      	beq.n	8010b68 <DFU_Upload+0x54>
 8010b5c:	69fb      	ldr	r3, [r7, #28]
 8010b5e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010b62:	2b09      	cmp	r3, #9
 8010b64:	f040 80b6 	bne.w	8010cd4 <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	885b      	ldrh	r3, [r3, #2]
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	88db      	ldrh	r3, [r3, #6]
 8010b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010b7c:	bf28      	it	cs
 8010b7e:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	461a      	mov	r2, r3
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8010b8c:	69fb      	ldr	r3, [r7, #28]
 8010b8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d12e      	bne.n	8010bf4 <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010b9c:	2b03      	cmp	r3, #3
 8010b9e:	d901      	bls.n	8010ba4 <DFU_Upload+0x90>
 8010ba0:	2202      	movs	r2, #2
 8010ba2:	e000      	b.n	8010ba6 <DFU_Upload+0x92>
 8010ba4:	2209      	movs	r2, #9
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8010bd0:	69fb      	ldr	r3, [r7, #28]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	2221      	movs	r2, #33	@ 0x21
 8010bda:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	2241      	movs	r2, #65	@ 0x41
 8010be0:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 8010be2:	2303      	movs	r3, #3
 8010be4:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	4619      	mov	r1, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f001 fd77 	bl	80126e0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010bf2:	e094      	b.n	8010d1e <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d94f      	bls.n	8010c9e <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	2209      	movs	r2, #9
 8010c02:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	2200      	movs	r2, #0
 8010c12:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010c30:	3b02      	subs	r3, #2
 8010c32:	029a      	lsls	r2, r3, #10
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8010c3a:	4413      	add	r3, r2
 8010c3c:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8010c3e:	69bb      	ldr	r3, [r7, #24]
 8010c40:	695b      	ldr	r3, [r3, #20]
 8010c42:	6978      	ldr	r0, [r7, #20]
 8010c44:	69f9      	ldr	r1, [r7, #28]
 8010c46:	69fa      	ldr	r2, [r7, #28]
 8010c48:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8010c4c:	4798      	blx	r3
 8010c4e:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d11a      	bne.n	8010c8c <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	220f      	movs	r2, #15
 8010c5a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	2200      	movs	r2, #0
 8010c62:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 8010c82:	6839      	ldr	r1, [r7, #0]
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f001 fcae 	bl	80125e6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8010c8a:	e048      	b.n	8010d1e <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010c92:	461a      	mov	r2, r3
 8010c94:	6939      	ldr	r1, [r7, #16]
 8010c96:	6878      	ldr	r0, [r7, #4]
 8010c98:	f001 fd22 	bl	80126e0 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8010c9c:	e03f      	b.n	8010d1e <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	220f      	movs	r2, #15
 8010ca2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	2200      	movs	r2, #0
 8010caa:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010cae:	69fb      	ldr	r3, [r7, #28]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	2200      	movs	r2, #0
 8010cba:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 8010cca:	6839      	ldr	r1, [r7, #0]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f001 fc8a 	bl	80125e6 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8010cd2:	e024      	b.n	8010d1e <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8010cd4:	69fb      	ldr	r3, [r7, #28]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 8010ce4:	6839      	ldr	r1, [r7, #0]
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f001 fc7d 	bl	80125e6 <USBD_CtlError>
 8010cec:	e017      	b.n	8010d1e <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	2202      	movs	r2, #2
 8010cf2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8010cfe:	69fb      	ldr	r3, [r7, #28]
 8010d00:	2200      	movs	r2, #0
 8010d02:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8010d1a:	e000      	b.n	8010d1e <DFU_Upload+0x20a>
    return;
 8010d1c:	bf00      	nop
  }
}
 8010d1e:	3720      	adds	r7, #32
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b086      	sub	sp, #24
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	32b0      	adds	r2, #176	@ 0xb0
 8010d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d3a:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d42:	687a      	ldr	r2, [r7, #4]
 8010d44:	33b0      	adds	r3, #176	@ 0xb0
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4413      	add	r3, r2
 8010d4a:	685b      	ldr	r3, [r3, #4]
 8010d4c:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 f9df 	bl	8011118 <USBD_DFU_GetDfuFuncDesc>
 8010d5a:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	f000 80a8 	beq.w	8010eb4 <DFU_GetStatus+0x190>
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	f000 80a4 	beq.w	8010eb4 <DFU_GetStatus+0x190>
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	f000 80a0 	beq.w	8010eb4 <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010d7a:	2b03      	cmp	r3, #3
 8010d7c:	d002      	beq.n	8010d84 <DFU_GetStatus+0x60>
 8010d7e:	2b06      	cmp	r3, #6
 8010d80:	d051      	beq.n	8010e26 <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 8010d82:	e08e      	b.n	8010ea2 <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d034      	beq.n	8010df8 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2204      	movs	r2, #4
 8010d92:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	2200      	movs	r2, #0
 8010da2:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010dae:	697b      	ldr	r3, [r7, #20]
 8010db0:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10e      	bne.n	8010de2 <DFU_GetStatus+0xbe>
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	2b41      	cmp	r3, #65	@ 0x41
 8010dca:	d10a      	bne.n	8010de2 <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	699b      	ldr	r3, [r3, #24]
 8010dd0:	697a      	ldr	r2, [r7, #20]
 8010dd2:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8010dd6:	697a      	ldr	r2, [r7, #20]
 8010dd8:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 8010ddc:	2100      	movs	r1, #0
 8010dde:	4798      	blx	r3
      break;
 8010de0:	e05f      	b.n	8010ea2 <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	699b      	ldr	r3, [r3, #24]
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8010dec:	697a      	ldr	r2, [r7, #20]
 8010dee:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 8010df2:	2101      	movs	r1, #1
 8010df4:	4798      	blx	r3
      break;
 8010df6:	e054      	b.n	8010ea2 <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2205      	movs	r2, #5
 8010dfc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8010e24:	e03d      	b.n	8010ea2 <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d116      	bne.n	8010e5e <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	2207      	movs	r2, #7
 8010e34:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	2200      	movs	r2, #0
 8010e44:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010e56:	697b      	ldr	r3, [r7, #20]
 8010e58:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8010e5c:	e020      	b.n	8010ea0 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d11b      	bne.n	8010ea0 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	789b      	ldrb	r3, [r3, #2]
 8010e6c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d015      	beq.n	8010ea0 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	2202      	movs	r2, #2
 8010e78:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2200      	movs	r2, #0
 8010e88:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8010ea0:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8010ea8:	2206      	movs	r2, #6
 8010eaa:	4619      	mov	r1, r3
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f001 fc17 	bl	80126e0 <USBD_CtlSendData>
 8010eb2:	e000      	b.n	8010eb6 <DFU_GetStatus+0x192>
    return;
 8010eb4:	bf00      	nop
}
 8010eb6:	3718      	adds	r7, #24
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	32b0      	adds	r2, #176	@ 0xb0
 8010ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ed2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d042      	beq.n	8010f60 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010ee0:	2b0a      	cmp	r3, #10
 8010ee2:	d11e      	bne.n	8010f22 <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2202      	movs	r2, #2
 8010ee8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2200      	movs	r2, #0
 8010ef0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 8010f20:	e01f      	b.n	8010f62 <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	220a      	movs	r2, #10
 8010f26:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	220e      	movs	r2, #14
 8010f2e:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	2200      	movs	r2, #0
 8010f36:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2200      	movs	r2, #0
 8010f46:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 8010f5e:	e000      	b.n	8010f62 <DFU_ClearStatus+0xa6>
    return;
 8010f60:	bf00      	nop
  }
}
 8010f62:	3714      	adds	r7, #20
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr

08010f6c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b084      	sub	sp, #16
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	32b0      	adds	r2, #176	@ 0xb0
 8010f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f82:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d008      	beq.n	8010f9c <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8010f90:	2201      	movs	r2, #1
 8010f92:	4619      	mov	r1, r3
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f001 fba3 	bl	80126e0 <USBD_CtlSendData>
 8010f9a:	e000      	b.n	8010f9e <DFU_GetState+0x32>
    return;
 8010f9c:	bf00      	nop
}
 8010f9e:	3710      	adds	r7, #16
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	32b0      	adds	r2, #176	@ 0xb0
 8010fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fba:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d03f      	beq.n	8011042 <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010fc8:	2b02      	cmp	r3, #2
 8010fca:	d013      	beq.n	8010ff4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8010fd2:	2b03      	cmp	r3, #3
 8010fd4:	d00e      	beq.n	8010ff4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8010fdc:	2b05      	cmp	r3, #5
 8010fde:	d009      	beq.n	8010ff4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8010fe6:	2b06      	cmp	r3, #6
 8010fe8:	d004      	beq.n	8010ff4 <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8010ff0:	2b09      	cmp	r3, #9
 8010ff2:	d127      	bne.n	8011044 <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2200      	movs	r2, #0
 8011008:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2200      	movs	r2, #0
 801102c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2200      	movs	r2, #0
 8011034:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2200      	movs	r2, #0
 801103c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8011040:	e000      	b.n	8011044 <DFU_Abort+0xa0>
    return;
 8011042:	bf00      	nop
  }
}
 8011044:	3714      	adds	r7, #20
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr

0801104e <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b086      	sub	sp, #24
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	32b0      	adds	r2, #176	@ 0xb0
 8011060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011064:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	33b0      	adds	r3, #176	@ 0xb0
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 801107e:	4618      	mov	r0, r3
 8011080:	f000 f84a 	bl	8011118 <USBD_DFU_GetDfuFuncDesc>
 8011084:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d041      	beq.n	8011110 <DFU_Leave+0xc2>
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d03e      	beq.n	8011110 <DFU_Leave+0xc2>
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d03b      	beq.n	8011110 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	2200      	movs	r2, #0
 801109c:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	789b      	ldrb	r3, [r3, #2]
 80110a4:	f003 0304 	and.w	r3, r3, #4
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d016      	beq.n	80110da <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	2206      	movs	r2, #6
 80110b0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	2200      	movs	r2, #0
 80110b8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	2200      	movs	r2, #0
 80110c0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	2200      	movs	r2, #0
 80110c8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 80110d8:	e01b      	b.n	8011112 <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	2208      	movs	r2, #8
 80110de:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	2200      	movs	r2, #0
 80110ee:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f8a6 	bl	8011258 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 801110c:	f7ff f8ba 	bl	8010284 <__NVIC_SystemReset>
    return;
 8011110:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b086      	sub	sp, #24
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 8011128:	2300      	movs	r3, #0
 801112a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	885b      	ldrh	r3, [r3, #2]
 8011130:	b29b      	uxth	r3, r3
 8011132:	68fa      	ldr	r2, [r7, #12]
 8011134:	7812      	ldrb	r2, [r2, #0]
 8011136:	4293      	cmp	r3, r2
 8011138:	d917      	bls.n	801116a <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011140:	e00d      	b.n	801115e <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011142:	f107 030a 	add.w	r3, r7, #10
 8011146:	4619      	mov	r1, r3
 8011148:	6978      	ldr	r0, [r7, #20]
 801114a:	f000 fbfd 	bl	8011948 <USBD_GetNextDesc>
 801114e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	785b      	ldrb	r3, [r3, #1]
 8011154:	2b21      	cmp	r3, #33	@ 0x21
 8011156:	d102      	bne.n	801115e <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	613b      	str	r3, [r7, #16]
        break;
 801115c:	e005      	b.n	801116a <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	885b      	ldrh	r3, [r3, #2]
 8011162:	b29a      	uxth	r2, r3
 8011164:	897b      	ldrh	r3, [r7, #10]
 8011166:	429a      	cmp	r2, r3
 8011168:	d8eb      	bhi.n	8011142 <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 801116a:	693b      	ldr	r3, [r7, #16]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3718      	adds	r7, #24
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b086      	sub	sp, #24
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	4613      	mov	r3, r2
 8011180:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2b00      	cmp	r3, #0
 8011186:	d101      	bne.n	801118c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011188:	2303      	movs	r3, #3
 801118a:	e01f      	b.n	80111cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	2200      	movs	r2, #0
 8011198:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2200      	movs	r2, #0
 80111a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d003      	beq.n	80111b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	68ba      	ldr	r2, [r7, #8]
 80111ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	2201      	movs	r2, #1
 80111b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	79fa      	ldrb	r2, [r7, #7]
 80111be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80111c0:	68f8      	ldr	r0, [r7, #12]
 80111c2:	f006 ffcf 	bl	8018164 <USBD_LL_Init>
 80111c6:	4603      	mov	r3, r0
 80111c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80111ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3718      	adds	r7, #24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b084      	sub	sp, #16
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80111de:	2300      	movs	r3, #0
 80111e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d101      	bne.n	80111ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80111e8:	2303      	movs	r3, #3
 80111ea:	e025      	b.n	8011238 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	683a      	ldr	r2, [r7, #0]
 80111f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	32ae      	adds	r2, #174	@ 0xae
 80111fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00f      	beq.n	8011228 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	32ae      	adds	r2, #174	@ 0xae
 8011212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011218:	f107 020e 	add.w	r2, r7, #14
 801121c:	4610      	mov	r0, r2
 801121e:	4798      	blx	r3
 8011220:	4602      	mov	r2, r0
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801122e:	1c5a      	adds	r2, r3, #1
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8011236:	2300      	movs	r3, #0
}
 8011238:	4618      	mov	r0, r3
 801123a:	3710      	adds	r7, #16
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}

08011240 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f006 ffdb 	bl	8018204 <USBD_LL_Start>
 801124e:	4603      	mov	r3, r0
}
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f006 ffea 	bl	801823a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801126c:	2b00      	cmp	r3, #0
 801126e:	d009      	beq.n	8011284 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	6852      	ldr	r2, [r2, #4]
 801127c:	b2d2      	uxtb	r2, r2
 801127e:	4611      	mov	r1, r2
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8011284:	2300      	movs	r3, #0
}
 8011286:	4618      	mov	r0, r3
 8011288:	3708      	adds	r7, #8
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}

0801128e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801128e:	b480      	push	{r7}
 8011290:	b083      	sub	sp, #12
 8011292:	af00      	add	r7, sp, #0
 8011294:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011296:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011298:	4618      	mov	r0, r3
 801129a:	370c      	adds	r7, #12
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b084      	sub	sp, #16
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	460b      	mov	r3, r1
 80112ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d009      	beq.n	80112d2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	78fa      	ldrb	r2, [r7, #3]
 80112c8:	4611      	mov	r1, r2
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	4798      	blx	r3
 80112ce:	4603      	mov	r3, r0
 80112d0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80112d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
 80112e4:	460b      	mov	r3, r1
 80112e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80112e8:	2300      	movs	r3, #0
 80112ea:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	78fa      	ldrb	r2, [r7, #3]
 80112f6:	4611      	mov	r1, r2
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	4798      	blx	r3
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011302:	2303      	movs	r3, #3
 8011304:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011306:	7bfb      	ldrb	r3, [r7, #15]
}
 8011308:	4618      	mov	r0, r3
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011320:	6839      	ldr	r1, [r7, #0]
 8011322:	4618      	mov	r0, r3
 8011324:	f001 f925 	bl	8012572 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2201      	movs	r2, #1
 801132c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011336:	461a      	mov	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011344:	f003 031f 	and.w	r3, r3, #31
 8011348:	2b02      	cmp	r3, #2
 801134a:	d01a      	beq.n	8011382 <USBD_LL_SetupStage+0x72>
 801134c:	2b02      	cmp	r3, #2
 801134e:	d822      	bhi.n	8011396 <USBD_LL_SetupStage+0x86>
 8011350:	2b00      	cmp	r3, #0
 8011352:	d002      	beq.n	801135a <USBD_LL_SetupStage+0x4a>
 8011354:	2b01      	cmp	r3, #1
 8011356:	d00a      	beq.n	801136e <USBD_LL_SetupStage+0x5e>
 8011358:	e01d      	b.n	8011396 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011360:	4619      	mov	r1, r3
 8011362:	6878      	ldr	r0, [r7, #4]
 8011364:	f000 fb2c 	bl	80119c0 <USBD_StdDevReq>
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]
      break;
 801136c:	e020      	b.n	80113b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011374:	4619      	mov	r1, r3
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fb94 	bl	8011aa4 <USBD_StdItfReq>
 801137c:	4603      	mov	r3, r0
 801137e:	73fb      	strb	r3, [r7, #15]
      break;
 8011380:	e016      	b.n	80113b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011388:	4619      	mov	r1, r3
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 fbf6 	bl	8011b7c <USBD_StdEPReq>
 8011390:	4603      	mov	r3, r0
 8011392:	73fb      	strb	r3, [r7, #15]
      break;
 8011394:	e00c      	b.n	80113b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801139c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	4619      	mov	r1, r3
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f006 ff89 	bl	80182bc <USBD_LL_StallEP>
 80113aa:	4603      	mov	r3, r0
 80113ac:	73fb      	strb	r3, [r7, #15]
      break;
 80113ae:	bf00      	nop
  }

  return ret;
 80113b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b086      	sub	sp, #24
 80113be:	af00      	add	r7, sp, #0
 80113c0:	60f8      	str	r0, [r7, #12]
 80113c2:	460b      	mov	r3, r1
 80113c4:	607a      	str	r2, [r7, #4]
 80113c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80113cc:	7afb      	ldrb	r3, [r7, #11]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d16e      	bne.n	80114b0 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80113d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80113e0:	2b03      	cmp	r3, #3
 80113e2:	f040 8098 	bne.w	8011516 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	689a      	ldr	r2, [r3, #8]
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	429a      	cmp	r2, r3
 80113f0:	d913      	bls.n	801141a <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	689a      	ldr	r2, [r3, #8]
 80113f6:	693b      	ldr	r3, [r7, #16]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	1ad2      	subs	r2, r2, r3
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	68da      	ldr	r2, [r3, #12]
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	4293      	cmp	r3, r2
 801140a:	bf28      	it	cs
 801140c:	4613      	movcs	r3, r2
 801140e:	461a      	mov	r2, r3
 8011410:	6879      	ldr	r1, [r7, #4]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	f001 f9ad 	bl	8012772 <USBD_CtlContinueRx>
 8011418:	e07d      	b.n	8011516 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011420:	f003 031f 	and.w	r3, r3, #31
 8011424:	2b02      	cmp	r3, #2
 8011426:	d014      	beq.n	8011452 <USBD_LL_DataOutStage+0x98>
 8011428:	2b02      	cmp	r3, #2
 801142a:	d81d      	bhi.n	8011468 <USBD_LL_DataOutStage+0xae>
 801142c:	2b00      	cmp	r3, #0
 801142e:	d002      	beq.n	8011436 <USBD_LL_DataOutStage+0x7c>
 8011430:	2b01      	cmp	r3, #1
 8011432:	d003      	beq.n	801143c <USBD_LL_DataOutStage+0x82>
 8011434:	e018      	b.n	8011468 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	75bb      	strb	r3, [r7, #22]
            break;
 801143a:	e018      	b.n	801146e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011442:	b2db      	uxtb	r3, r3
 8011444:	4619      	mov	r1, r3
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f000 fa64 	bl	8011914 <USBD_CoreFindIF>
 801144c:	4603      	mov	r3, r0
 801144e:	75bb      	strb	r3, [r7, #22]
            break;
 8011450:	e00d      	b.n	801146e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011458:	b2db      	uxtb	r3, r3
 801145a:	4619      	mov	r1, r3
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	f000 fa66 	bl	801192e <USBD_CoreFindEP>
 8011462:	4603      	mov	r3, r0
 8011464:	75bb      	strb	r3, [r7, #22]
            break;
 8011466:	e002      	b.n	801146e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011468:	2300      	movs	r3, #0
 801146a:	75bb      	strb	r3, [r7, #22]
            break;
 801146c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801146e:	7dbb      	ldrb	r3, [r7, #22]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d119      	bne.n	80114a8 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b03      	cmp	r3, #3
 801147e:	d113      	bne.n	80114a8 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011480:	7dba      	ldrb	r2, [r7, #22]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	32ae      	adds	r2, #174	@ 0xae
 8011486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801148a:	691b      	ldr	r3, [r3, #16]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00b      	beq.n	80114a8 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011490:	7dba      	ldrb	r2, [r7, #22]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011498:	7dba      	ldrb	r2, [r7, #22]
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	32ae      	adds	r2, #174	@ 0xae
 801149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	68f8      	ldr	r0, [r7, #12]
 80114a6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80114a8:	68f8      	ldr	r0, [r7, #12]
 80114aa:	f001 f973 	bl	8012794 <USBD_CtlSendStatus>
 80114ae:	e032      	b.n	8011516 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80114b0:	7afb      	ldrb	r3, [r7, #11]
 80114b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	4619      	mov	r1, r3
 80114ba:	68f8      	ldr	r0, [r7, #12]
 80114bc:	f000 fa37 	bl	801192e <USBD_CoreFindEP>
 80114c0:	4603      	mov	r3, r0
 80114c2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80114c4:	7dbb      	ldrb	r3, [r7, #22]
 80114c6:	2bff      	cmp	r3, #255	@ 0xff
 80114c8:	d025      	beq.n	8011516 <USBD_LL_DataOutStage+0x15c>
 80114ca:	7dbb      	ldrb	r3, [r7, #22]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d122      	bne.n	8011516 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	2b03      	cmp	r3, #3
 80114da:	d117      	bne.n	801150c <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80114dc:	7dba      	ldrb	r2, [r7, #22]
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	32ae      	adds	r2, #174	@ 0xae
 80114e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114e6:	699b      	ldr	r3, [r3, #24]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00f      	beq.n	801150c <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80114ec:	7dba      	ldrb	r2, [r7, #22]
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80114f4:	7dba      	ldrb	r2, [r7, #22]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	32ae      	adds	r2, #174	@ 0xae
 80114fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114fe:	699b      	ldr	r3, [r3, #24]
 8011500:	7afa      	ldrb	r2, [r7, #11]
 8011502:	4611      	mov	r1, r2
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	4798      	blx	r3
 8011508:	4603      	mov	r3, r0
 801150a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801150c:	7dfb      	ldrb	r3, [r7, #23]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011512:	7dfb      	ldrb	r3, [r7, #23]
 8011514:	e000      	b.n	8011518 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011516:	2300      	movs	r3, #0
}
 8011518:	4618      	mov	r0, r3
 801151a:	3718      	adds	r7, #24
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}

08011520 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b086      	sub	sp, #24
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	460b      	mov	r3, r1
 801152a:	607a      	str	r2, [r7, #4]
 801152c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801152e:	7afb      	ldrb	r3, [r7, #11]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d16f      	bne.n	8011614 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	3314      	adds	r3, #20
 8011538:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011540:	2b02      	cmp	r3, #2
 8011542:	d15a      	bne.n	80115fa <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	689a      	ldr	r2, [r3, #8]
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	429a      	cmp	r2, r3
 801154e:	d914      	bls.n	801157a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	689a      	ldr	r2, [r3, #8]
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	1ad2      	subs	r2, r2, r3
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	461a      	mov	r2, r3
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f001 f8d5 	bl	8012716 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801156c:	2300      	movs	r3, #0
 801156e:	2200      	movs	r2, #0
 8011570:	2100      	movs	r1, #0
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f006 ff4c 	bl	8018410 <USBD_LL_PrepareReceive>
 8011578:	e03f      	b.n	80115fa <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	68da      	ldr	r2, [r3, #12]
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	689b      	ldr	r3, [r3, #8]
 8011582:	429a      	cmp	r2, r3
 8011584:	d11c      	bne.n	80115c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801158e:	429a      	cmp	r2, r3
 8011590:	d316      	bcc.n	80115c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	685a      	ldr	r2, [r3, #4]
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801159c:	429a      	cmp	r2, r3
 801159e:	d20f      	bcs.n	80115c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80115a0:	2200      	movs	r2, #0
 80115a2:	2100      	movs	r1, #0
 80115a4:	68f8      	ldr	r0, [r7, #12]
 80115a6:	f001 f8b6 	bl	8012716 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	2200      	movs	r2, #0
 80115ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80115b2:	2300      	movs	r3, #0
 80115b4:	2200      	movs	r2, #0
 80115b6:	2100      	movs	r1, #0
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f006 ff29 	bl	8018410 <USBD_LL_PrepareReceive>
 80115be:	e01c      	b.n	80115fa <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	2b03      	cmp	r3, #3
 80115ca:	d10f      	bne.n	80115ec <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115d2:	68db      	ldr	r3, [r3, #12]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d009      	beq.n	80115ec <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	2200      	movs	r2, #0
 80115dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	68f8      	ldr	r0, [r7, #12]
 80115ea:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80115ec:	2180      	movs	r1, #128	@ 0x80
 80115ee:	68f8      	ldr	r0, [r7, #12]
 80115f0:	f006 fe64 	bl	80182bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80115f4:	68f8      	ldr	r0, [r7, #12]
 80115f6:	f001 f8e0 	bl	80127ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d03a      	beq.n	801167a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011604:	68f8      	ldr	r0, [r7, #12]
 8011606:	f7ff fe42 	bl	801128e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	2200      	movs	r2, #0
 801160e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011612:	e032      	b.n	801167a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011614:	7afb      	ldrb	r3, [r7, #11]
 8011616:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801161a:	b2db      	uxtb	r3, r3
 801161c:	4619      	mov	r1, r3
 801161e:	68f8      	ldr	r0, [r7, #12]
 8011620:	f000 f985 	bl	801192e <USBD_CoreFindEP>
 8011624:	4603      	mov	r3, r0
 8011626:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011628:	7dfb      	ldrb	r3, [r7, #23]
 801162a:	2bff      	cmp	r3, #255	@ 0xff
 801162c:	d025      	beq.n	801167a <USBD_LL_DataInStage+0x15a>
 801162e:	7dfb      	ldrb	r3, [r7, #23]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d122      	bne.n	801167a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b03      	cmp	r3, #3
 801163e:	d11c      	bne.n	801167a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011640:	7dfa      	ldrb	r2, [r7, #23]
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	32ae      	adds	r2, #174	@ 0xae
 8011646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801164a:	695b      	ldr	r3, [r3, #20]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d014      	beq.n	801167a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011650:	7dfa      	ldrb	r2, [r7, #23]
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011658:	7dfa      	ldrb	r2, [r7, #23]
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	32ae      	adds	r2, #174	@ 0xae
 801165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011662:	695b      	ldr	r3, [r3, #20]
 8011664:	7afa      	ldrb	r2, [r7, #11]
 8011666:	4611      	mov	r1, r2
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	4798      	blx	r3
 801166c:	4603      	mov	r3, r0
 801166e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011670:	7dbb      	ldrb	r3, [r7, #22]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d001      	beq.n	801167a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011676:	7dbb      	ldrb	r3, [r7, #22]
 8011678:	e000      	b.n	801167c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801167a:	2300      	movs	r3, #0
}
 801167c:	4618      	mov	r0, r3
 801167e:	3718      	adds	r7, #24
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b084      	sub	sp, #16
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801168c:	2300      	movs	r3, #0
 801168e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2201      	movs	r2, #1
 8011694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d014      	beq.n	80116ea <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d00e      	beq.n	80116ea <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	6852      	ldr	r2, [r2, #4]
 80116d8:	b2d2      	uxtb	r2, r2
 80116da:	4611      	mov	r1, r2
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	4798      	blx	r3
 80116e0:	4603      	mov	r3, r0
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d001      	beq.n	80116ea <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80116e6:	2303      	movs	r3, #3
 80116e8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80116ea:	2340      	movs	r3, #64	@ 0x40
 80116ec:	2200      	movs	r2, #0
 80116ee:	2100      	movs	r1, #0
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f006 fdbd 	bl	8018270 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2240      	movs	r2, #64	@ 0x40
 8011702:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011706:	2340      	movs	r3, #64	@ 0x40
 8011708:	2200      	movs	r2, #0
 801170a:	2180      	movs	r1, #128	@ 0x80
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f006 fdaf 	bl	8018270 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2201      	movs	r2, #1
 8011716:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2240      	movs	r2, #64	@ 0x40
 801171c:	621a      	str	r2, [r3, #32]

  return ret;
 801171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	460b      	mov	r3, r1
 8011732:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	78fa      	ldrb	r2, [r7, #3]
 8011738:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801173a:	2300      	movs	r3, #0
}
 801173c:	4618      	mov	r0, r3
 801173e:	370c      	adds	r7, #12
 8011740:	46bd      	mov	sp, r7
 8011742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011746:	4770      	bx	lr

08011748 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011748:	b480      	push	{r7}
 801174a:	b083      	sub	sp, #12
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011756:	b2db      	uxtb	r3, r3
 8011758:	2b04      	cmp	r3, #4
 801175a:	d006      	beq.n	801176a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011762:	b2da      	uxtb	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2204      	movs	r2, #4
 801176e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801178e:	b2db      	uxtb	r3, r3
 8011790:	2b04      	cmp	r3, #4
 8011792:	d106      	bne.n	80117a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801179a:	b2da      	uxtb	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80117a2:	2300      	movs	r3, #0
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	370c      	adds	r7, #12
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	d110      	bne.n	80117e6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00b      	beq.n	80117e6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117d4:	69db      	ldr	r3, [r3, #28]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d005      	beq.n	80117e6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117e0:	69db      	ldr	r3, [r3, #28]
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80117e6:	2300      	movs	r3, #0
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	32ae      	adds	r2, #174	@ 0xae
 8011806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801180e:	2303      	movs	r3, #3
 8011810:	e01c      	b.n	801184c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011818:	b2db      	uxtb	r3, r3
 801181a:	2b03      	cmp	r3, #3
 801181c:	d115      	bne.n	801184a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	32ae      	adds	r2, #174	@ 0xae
 8011828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801182c:	6a1b      	ldr	r3, [r3, #32]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00b      	beq.n	801184a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	32ae      	adds	r2, #174	@ 0xae
 801183c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011840:	6a1b      	ldr	r3, [r3, #32]
 8011842:	78fa      	ldrb	r2, [r7, #3]
 8011844:	4611      	mov	r1, r2
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801184a:	2300      	movs	r3, #0
}
 801184c:	4618      	mov	r0, r3
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	460b      	mov	r3, r1
 801185e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	32ae      	adds	r2, #174	@ 0xae
 801186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d101      	bne.n	8011876 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011872:	2303      	movs	r3, #3
 8011874:	e01c      	b.n	80118b0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801187c:	b2db      	uxtb	r3, r3
 801187e:	2b03      	cmp	r3, #3
 8011880:	d115      	bne.n	80118ae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	32ae      	adds	r2, #174	@ 0xae
 801188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011892:	2b00      	cmp	r3, #0
 8011894:	d00b      	beq.n	80118ae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	32ae      	adds	r2, #174	@ 0xae
 80118a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118a6:	78fa      	ldrb	r2, [r7, #3]
 80118a8:	4611      	mov	r1, r2
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80118ae:	2300      	movs	r3, #0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80118c0:	2300      	movs	r3, #0
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	370c      	adds	r7, #12
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b084      	sub	sp, #16
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80118d6:	2300      	movs	r3, #0
 80118d8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2201      	movs	r2, #1
 80118de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d00e      	beq.n	801190a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	6852      	ldr	r2, [r2, #4]
 80118f8:	b2d2      	uxtb	r2, r2
 80118fa:	4611      	mov	r1, r2
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	4798      	blx	r3
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	d001      	beq.n	801190a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011906:	2303      	movs	r3, #3
 8011908:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801190a:	7bfb      	ldrb	r3, [r7, #15]
}
 801190c:	4618      	mov	r0, r3
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011920:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011922:	4618      	mov	r0, r3
 8011924:	370c      	adds	r7, #12
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr

0801192e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801192e:	b480      	push	{r7}
 8011930:	b083      	sub	sp, #12
 8011932:	af00      	add	r7, sp, #0
 8011934:	6078      	str	r0, [r7, #4]
 8011936:	460b      	mov	r3, r1
 8011938:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801193a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801193c:	4618      	mov	r0, r3
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	881b      	ldrh	r3, [r3, #0]
 801195a:	68fa      	ldr	r2, [r7, #12]
 801195c:	7812      	ldrb	r2, [r2, #0]
 801195e:	4413      	add	r3, r2
 8011960:	b29a      	uxth	r2, r3
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4413      	add	r3, r2
 8011970:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011972:	68fb      	ldr	r3, [r7, #12]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3714      	adds	r7, #20
 8011978:	46bd      	mov	sp, r7
 801197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197e:	4770      	bx	lr

08011980 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011980:	b480      	push	{r7}
 8011982:	b087      	sub	sp, #28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	3301      	adds	r3, #1
 8011996:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	781b      	ldrb	r3, [r3, #0]
 801199c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801199e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80119a2:	021b      	lsls	r3, r3, #8
 80119a4:	b21a      	sxth	r2, r3
 80119a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119aa:	4313      	orrs	r3, r2
 80119ac:	b21b      	sxth	r3, r3
 80119ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119b0:	89fb      	ldrh	r3, [r7, #14]
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	371c      	adds	r7, #28
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
	...

080119c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80119d6:	2b40      	cmp	r3, #64	@ 0x40
 80119d8:	d005      	beq.n	80119e6 <USBD_StdDevReq+0x26>
 80119da:	2b40      	cmp	r3, #64	@ 0x40
 80119dc:	d857      	bhi.n	8011a8e <USBD_StdDevReq+0xce>
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d00f      	beq.n	8011a02 <USBD_StdDevReq+0x42>
 80119e2:	2b20      	cmp	r3, #32
 80119e4:	d153      	bne.n	8011a8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	32ae      	adds	r2, #174	@ 0xae
 80119f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	6839      	ldr	r1, [r7, #0]
 80119f8:	6878      	ldr	r0, [r7, #4]
 80119fa:	4798      	blx	r3
 80119fc:	4603      	mov	r3, r0
 80119fe:	73fb      	strb	r3, [r7, #15]
      break;
 8011a00:	e04a      	b.n	8011a98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	785b      	ldrb	r3, [r3, #1]
 8011a06:	2b09      	cmp	r3, #9
 8011a08:	d83b      	bhi.n	8011a82 <USBD_StdDevReq+0xc2>
 8011a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011a10 <USBD_StdDevReq+0x50>)
 8011a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a10:	08011a65 	.word	0x08011a65
 8011a14:	08011a79 	.word	0x08011a79
 8011a18:	08011a83 	.word	0x08011a83
 8011a1c:	08011a6f 	.word	0x08011a6f
 8011a20:	08011a83 	.word	0x08011a83
 8011a24:	08011a43 	.word	0x08011a43
 8011a28:	08011a39 	.word	0x08011a39
 8011a2c:	08011a83 	.word	0x08011a83
 8011a30:	08011a5b 	.word	0x08011a5b
 8011a34:	08011a4d 	.word	0x08011a4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	6878      	ldr	r0, [r7, #4]
 8011a3c:	f000 fa3c 	bl	8011eb8 <USBD_GetDescriptor>
          break;
 8011a40:	e024      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f000 fbf1 	bl	801222c <USBD_SetAddress>
          break;
 8011a4a:	e01f      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a4c:	6839      	ldr	r1, [r7, #0]
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 fc30 	bl	80122b4 <USBD_SetConfig>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
          break;
 8011a58:	e018      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a5a:	6839      	ldr	r1, [r7, #0]
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f000 fcd3 	bl	8012408 <USBD_GetConfig>
          break;
 8011a62:	e013      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a64:	6839      	ldr	r1, [r7, #0]
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fd04 	bl	8012474 <USBD_GetStatus>
          break;
 8011a6c:	e00e      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a6e:	6839      	ldr	r1, [r7, #0]
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f000 fd33 	bl	80124dc <USBD_SetFeature>
          break;
 8011a76:	e009      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a78:	6839      	ldr	r1, [r7, #0]
 8011a7a:	6878      	ldr	r0, [r7, #4]
 8011a7c:	f000 fd57 	bl	801252e <USBD_ClrFeature>
          break;
 8011a80:	e004      	b.n	8011a8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011a82:	6839      	ldr	r1, [r7, #0]
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	f000 fdae 	bl	80125e6 <USBD_CtlError>
          break;
 8011a8a:	bf00      	nop
      }
      break;
 8011a8c:	e004      	b.n	8011a98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fda8 	bl	80125e6 <USBD_CtlError>
      break;
 8011a96:	bf00      	nop
  }

  return ret;
 8011a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3710      	adds	r7, #16
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	bd80      	pop	{r7, pc}
 8011aa2:	bf00      	nop

08011aa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011aba:	2b40      	cmp	r3, #64	@ 0x40
 8011abc:	d005      	beq.n	8011aca <USBD_StdItfReq+0x26>
 8011abe:	2b40      	cmp	r3, #64	@ 0x40
 8011ac0:	d852      	bhi.n	8011b68 <USBD_StdItfReq+0xc4>
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d001      	beq.n	8011aca <USBD_StdItfReq+0x26>
 8011ac6:	2b20      	cmp	r3, #32
 8011ac8:	d14e      	bne.n	8011b68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	2b02      	cmp	r3, #2
 8011ad6:	d840      	bhi.n	8011b5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	889b      	ldrh	r3, [r3, #4]
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	2b01      	cmp	r3, #1
 8011ae0:	d836      	bhi.n	8011b50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	889b      	ldrh	r3, [r3, #4]
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	4619      	mov	r1, r3
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f7ff ff12 	bl	8011914 <USBD_CoreFindIF>
 8011af0:	4603      	mov	r3, r0
 8011af2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011af4:	7bbb      	ldrb	r3, [r7, #14]
 8011af6:	2bff      	cmp	r3, #255	@ 0xff
 8011af8:	d01d      	beq.n	8011b36 <USBD_StdItfReq+0x92>
 8011afa:	7bbb      	ldrb	r3, [r7, #14]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d11a      	bne.n	8011b36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011b00:	7bba      	ldrb	r2, [r7, #14]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	32ae      	adds	r2, #174	@ 0xae
 8011b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b0a:	689b      	ldr	r3, [r3, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00f      	beq.n	8011b30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011b10:	7bba      	ldrb	r2, [r7, #14]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011b18:	7bba      	ldrb	r2, [r7, #14]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	32ae      	adds	r2, #174	@ 0xae
 8011b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	6839      	ldr	r1, [r7, #0]
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	4798      	blx	r3
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b2e:	e004      	b.n	8011b3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011b30:	2303      	movs	r3, #3
 8011b32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b34:	e001      	b.n	8011b3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011b36:	2303      	movs	r3, #3
 8011b38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	88db      	ldrh	r3, [r3, #6]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d110      	bne.n	8011b64 <USBD_StdItfReq+0xc0>
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10d      	bne.n	8011b64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 fe23 	bl	8012794 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b4e:	e009      	b.n	8011b64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011b50:	6839      	ldr	r1, [r7, #0]
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 fd47 	bl	80125e6 <USBD_CtlError>
          break;
 8011b58:	e004      	b.n	8011b64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011b5a:	6839      	ldr	r1, [r7, #0]
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f000 fd42 	bl	80125e6 <USBD_CtlError>
          break;
 8011b62:	e000      	b.n	8011b66 <USBD_StdItfReq+0xc2>
          break;
 8011b64:	bf00      	nop
      }
      break;
 8011b66:	e004      	b.n	8011b72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011b68:	6839      	ldr	r1, [r7, #0]
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f000 fd3b 	bl	80125e6 <USBD_CtlError>
      break;
 8011b70:	bf00      	nop
  }

  return ret;
 8011b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b86:	2300      	movs	r3, #0
 8011b88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	889b      	ldrh	r3, [r3, #4]
 8011b8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011b98:	2b40      	cmp	r3, #64	@ 0x40
 8011b9a:	d007      	beq.n	8011bac <USBD_StdEPReq+0x30>
 8011b9c:	2b40      	cmp	r3, #64	@ 0x40
 8011b9e:	f200 817f 	bhi.w	8011ea0 <USBD_StdEPReq+0x324>
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d02a      	beq.n	8011bfc <USBD_StdEPReq+0x80>
 8011ba6:	2b20      	cmp	r3, #32
 8011ba8:	f040 817a 	bne.w	8011ea0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011bac:	7bbb      	ldrb	r3, [r7, #14]
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7ff febc 	bl	801192e <USBD_CoreFindEP>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011bba:	7b7b      	ldrb	r3, [r7, #13]
 8011bbc:	2bff      	cmp	r3, #255	@ 0xff
 8011bbe:	f000 8174 	beq.w	8011eaa <USBD_StdEPReq+0x32e>
 8011bc2:	7b7b      	ldrb	r3, [r7, #13]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f040 8170 	bne.w	8011eaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011bca:	7b7a      	ldrb	r2, [r7, #13]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011bd2:	7b7a      	ldrb	r2, [r7, #13]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	32ae      	adds	r2, #174	@ 0xae
 8011bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f000 8163 	beq.w	8011eaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011be4:	7b7a      	ldrb	r2, [r7, #13]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	32ae      	adds	r2, #174	@ 0xae
 8011bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	6839      	ldr	r1, [r7, #0]
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	4798      	blx	r3
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011bfa:	e156      	b.n	8011eaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	785b      	ldrb	r3, [r3, #1]
 8011c00:	2b03      	cmp	r3, #3
 8011c02:	d008      	beq.n	8011c16 <USBD_StdEPReq+0x9a>
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	f300 8145 	bgt.w	8011e94 <USBD_StdEPReq+0x318>
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f000 809b 	beq.w	8011d46 <USBD_StdEPReq+0x1ca>
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	d03c      	beq.n	8011c8e <USBD_StdEPReq+0x112>
 8011c14:	e13e      	b.n	8011e94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c1c:	b2db      	uxtb	r3, r3
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d002      	beq.n	8011c28 <USBD_StdEPReq+0xac>
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d016      	beq.n	8011c54 <USBD_StdEPReq+0xd8>
 8011c26:	e02c      	b.n	8011c82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c28:	7bbb      	ldrb	r3, [r7, #14]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00d      	beq.n	8011c4a <USBD_StdEPReq+0xce>
 8011c2e:	7bbb      	ldrb	r3, [r7, #14]
 8011c30:	2b80      	cmp	r3, #128	@ 0x80
 8011c32:	d00a      	beq.n	8011c4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c34:	7bbb      	ldrb	r3, [r7, #14]
 8011c36:	4619      	mov	r1, r3
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f006 fb3f 	bl	80182bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c3e:	2180      	movs	r1, #128	@ 0x80
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f006 fb3b 	bl	80182bc <USBD_LL_StallEP>
 8011c46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c48:	e020      	b.n	8011c8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011c4a:	6839      	ldr	r1, [r7, #0]
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f000 fcca 	bl	80125e6 <USBD_CtlError>
              break;
 8011c52:	e01b      	b.n	8011c8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	885b      	ldrh	r3, [r3, #2]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d10e      	bne.n	8011c7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011c5c:	7bbb      	ldrb	r3, [r7, #14]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d00b      	beq.n	8011c7a <USBD_StdEPReq+0xfe>
 8011c62:	7bbb      	ldrb	r3, [r7, #14]
 8011c64:	2b80      	cmp	r3, #128	@ 0x80
 8011c66:	d008      	beq.n	8011c7a <USBD_StdEPReq+0xfe>
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	88db      	ldrh	r3, [r3, #6]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d104      	bne.n	8011c7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c70:	7bbb      	ldrb	r3, [r7, #14]
 8011c72:	4619      	mov	r1, r3
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f006 fb21 	bl	80182bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fd8a 	bl	8012794 <USBD_CtlSendStatus>

              break;
 8011c80:	e004      	b.n	8011c8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011c82:	6839      	ldr	r1, [r7, #0]
 8011c84:	6878      	ldr	r0, [r7, #4]
 8011c86:	f000 fcae 	bl	80125e6 <USBD_CtlError>
              break;
 8011c8a:	bf00      	nop
          }
          break;
 8011c8c:	e107      	b.n	8011e9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b02      	cmp	r3, #2
 8011c98:	d002      	beq.n	8011ca0 <USBD_StdEPReq+0x124>
 8011c9a:	2b03      	cmp	r3, #3
 8011c9c:	d016      	beq.n	8011ccc <USBD_StdEPReq+0x150>
 8011c9e:	e04b      	b.n	8011d38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ca0:	7bbb      	ldrb	r3, [r7, #14]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d00d      	beq.n	8011cc2 <USBD_StdEPReq+0x146>
 8011ca6:	7bbb      	ldrb	r3, [r7, #14]
 8011ca8:	2b80      	cmp	r3, #128	@ 0x80
 8011caa:	d00a      	beq.n	8011cc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011cac:	7bbb      	ldrb	r3, [r7, #14]
 8011cae:	4619      	mov	r1, r3
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f006 fb03 	bl	80182bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cb6:	2180      	movs	r1, #128	@ 0x80
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f006 faff 	bl	80182bc <USBD_LL_StallEP>
 8011cbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011cc0:	e040      	b.n	8011d44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f000 fc8e 	bl	80125e6 <USBD_CtlError>
              break;
 8011cca:	e03b      	b.n	8011d44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	885b      	ldrh	r3, [r3, #2]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d136      	bne.n	8011d42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011cd4:	7bbb      	ldrb	r3, [r7, #14]
 8011cd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d004      	beq.n	8011ce8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011cde:	7bbb      	ldrb	r3, [r7, #14]
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f006 fb09 	bl	80182fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 fd53 	bl	8012794 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011cee:	7bbb      	ldrb	r3, [r7, #14]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f7ff fe1b 	bl	801192e <USBD_CoreFindEP>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cfc:	7b7b      	ldrb	r3, [r7, #13]
 8011cfe:	2bff      	cmp	r3, #255	@ 0xff
 8011d00:	d01f      	beq.n	8011d42 <USBD_StdEPReq+0x1c6>
 8011d02:	7b7b      	ldrb	r3, [r7, #13]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d11c      	bne.n	8011d42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011d08:	7b7a      	ldrb	r2, [r7, #13]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011d10:	7b7a      	ldrb	r2, [r7, #13]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	32ae      	adds	r2, #174	@ 0xae
 8011d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d1a:	689b      	ldr	r3, [r3, #8]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d010      	beq.n	8011d42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d20:	7b7a      	ldrb	r2, [r7, #13]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	32ae      	adds	r2, #174	@ 0xae
 8011d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d2a:	689b      	ldr	r3, [r3, #8]
 8011d2c:	6839      	ldr	r1, [r7, #0]
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	4798      	blx	r3
 8011d32:	4603      	mov	r3, r0
 8011d34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011d36:	e004      	b.n	8011d42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011d38:	6839      	ldr	r1, [r7, #0]
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f000 fc53 	bl	80125e6 <USBD_CtlError>
              break;
 8011d40:	e000      	b.n	8011d44 <USBD_StdEPReq+0x1c8>
              break;
 8011d42:	bf00      	nop
          }
          break;
 8011d44:	e0ab      	b.n	8011e9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d002      	beq.n	8011d58 <USBD_StdEPReq+0x1dc>
 8011d52:	2b03      	cmp	r3, #3
 8011d54:	d032      	beq.n	8011dbc <USBD_StdEPReq+0x240>
 8011d56:	e097      	b.n	8011e88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d58:	7bbb      	ldrb	r3, [r7, #14]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d007      	beq.n	8011d6e <USBD_StdEPReq+0x1f2>
 8011d5e:	7bbb      	ldrb	r3, [r7, #14]
 8011d60:	2b80      	cmp	r3, #128	@ 0x80
 8011d62:	d004      	beq.n	8011d6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011d64:	6839      	ldr	r1, [r7, #0]
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f000 fc3d 	bl	80125e6 <USBD_CtlError>
                break;
 8011d6c:	e091      	b.n	8011e92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	da0b      	bge.n	8011d8e <USBD_StdEPReq+0x212>
 8011d76:	7bbb      	ldrb	r3, [r7, #14]
 8011d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d7c:	4613      	mov	r3, r2
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	4413      	add	r3, r2
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	3310      	adds	r3, #16
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	4413      	add	r3, r2
 8011d8a:	3304      	adds	r3, #4
 8011d8c:	e00b      	b.n	8011da6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d8e:	7bbb      	ldrb	r3, [r7, #14]
 8011d90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d94:	4613      	mov	r3, r2
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	4413      	add	r3, r2
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	4413      	add	r3, r2
 8011da4:	3304      	adds	r3, #4
 8011da6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	2200      	movs	r2, #0
 8011dac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	2202      	movs	r2, #2
 8011db2:	4619      	mov	r1, r3
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 fc93 	bl	80126e0 <USBD_CtlSendData>
              break;
 8011dba:	e06a      	b.n	8011e92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	da11      	bge.n	8011de8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011dc4:	7bbb      	ldrb	r3, [r7, #14]
 8011dc6:	f003 020f 	and.w	r2, r3, #15
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	4613      	mov	r3, r2
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	440b      	add	r3, r1
 8011dd6:	3324      	adds	r3, #36	@ 0x24
 8011dd8:	881b      	ldrh	r3, [r3, #0]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d117      	bne.n	8011e0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fc00 	bl	80125e6 <USBD_CtlError>
                  break;
 8011de6:	e054      	b.n	8011e92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011de8:	7bbb      	ldrb	r3, [r7, #14]
 8011dea:	f003 020f 	and.w	r2, r3, #15
 8011dee:	6879      	ldr	r1, [r7, #4]
 8011df0:	4613      	mov	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	440b      	add	r3, r1
 8011dfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d104      	bne.n	8011e0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011e04:	6839      	ldr	r1, [r7, #0]
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f000 fbed 	bl	80125e6 <USBD_CtlError>
                  break;
 8011e0c:	e041      	b.n	8011e92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	da0b      	bge.n	8011e2e <USBD_StdEPReq+0x2b2>
 8011e16:	7bbb      	ldrb	r3, [r7, #14]
 8011e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	4413      	add	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	3310      	adds	r3, #16
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	4413      	add	r3, r2
 8011e2a:	3304      	adds	r3, #4
 8011e2c:	e00b      	b.n	8011e46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011e2e:	7bbb      	ldrb	r3, [r7, #14]
 8011e30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e34:	4613      	mov	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	4413      	add	r3, r2
 8011e3a:	009b      	lsls	r3, r3, #2
 8011e3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	4413      	add	r3, r2
 8011e44:	3304      	adds	r3, #4
 8011e46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011e48:	7bbb      	ldrb	r3, [r7, #14]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d002      	beq.n	8011e54 <USBD_StdEPReq+0x2d8>
 8011e4e:	7bbb      	ldrb	r3, [r7, #14]
 8011e50:	2b80      	cmp	r3, #128	@ 0x80
 8011e52:	d103      	bne.n	8011e5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011e54:	68bb      	ldr	r3, [r7, #8]
 8011e56:	2200      	movs	r2, #0
 8011e58:	601a      	str	r2, [r3, #0]
 8011e5a:	e00e      	b.n	8011e7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011e5c:	7bbb      	ldrb	r3, [r7, #14]
 8011e5e:	4619      	mov	r1, r3
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f006 fa69 	bl	8018338 <USBD_LL_IsStallEP>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d003      	beq.n	8011e74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011e6c:	68bb      	ldr	r3, [r7, #8]
 8011e6e:	2201      	movs	r2, #1
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	e002      	b.n	8011e7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	2200      	movs	r2, #0
 8011e78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	2202      	movs	r2, #2
 8011e7e:	4619      	mov	r1, r3
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f000 fc2d 	bl	80126e0 <USBD_CtlSendData>
              break;
 8011e86:	e004      	b.n	8011e92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011e88:	6839      	ldr	r1, [r7, #0]
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fbab 	bl	80125e6 <USBD_CtlError>
              break;
 8011e90:	bf00      	nop
          }
          break;
 8011e92:	e004      	b.n	8011e9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011e94:	6839      	ldr	r1, [r7, #0]
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f000 fba5 	bl	80125e6 <USBD_CtlError>
          break;
 8011e9c:	bf00      	nop
      }
      break;
 8011e9e:	e005      	b.n	8011eac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011ea0:	6839      	ldr	r1, [r7, #0]
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 fb9f 	bl	80125e6 <USBD_CtlError>
      break;
 8011ea8:	e000      	b.n	8011eac <USBD_StdEPReq+0x330>
      break;
 8011eaa:	bf00      	nop
  }

  return ret;
 8011eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
	...

08011eb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b086      	sub	sp, #24
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	885b      	ldrh	r3, [r3, #2]
 8011ed2:	0a1b      	lsrs	r3, r3, #8
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	2b0e      	cmp	r3, #14
 8011eda:	f200 8179 	bhi.w	80121d0 <USBD_GetDescriptor+0x318>
 8011ede:	a201      	add	r2, pc, #4	@ (adr r2, 8011ee4 <USBD_GetDescriptor+0x2c>)
 8011ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee4:	08011f55 	.word	0x08011f55
 8011ee8:	08011f6d 	.word	0x08011f6d
 8011eec:	08011fad 	.word	0x08011fad
 8011ef0:	080121d1 	.word	0x080121d1
 8011ef4:	080121d1 	.word	0x080121d1
 8011ef8:	08012171 	.word	0x08012171
 8011efc:	0801219d 	.word	0x0801219d
 8011f00:	080121d1 	.word	0x080121d1
 8011f04:	080121d1 	.word	0x080121d1
 8011f08:	080121d1 	.word	0x080121d1
 8011f0c:	080121d1 	.word	0x080121d1
 8011f10:	080121d1 	.word	0x080121d1
 8011f14:	080121d1 	.word	0x080121d1
 8011f18:	080121d1 	.word	0x080121d1
 8011f1c:	08011f21 	.word	0x08011f21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d00b      	beq.n	8011f44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f32:	69db      	ldr	r3, [r3, #28]
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	7c12      	ldrb	r2, [r2, #16]
 8011f38:	f107 010a 	add.w	r1, r7, #10
 8011f3c:	4610      	mov	r0, r2
 8011f3e:	4798      	blx	r3
 8011f40:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f42:	e14d      	b.n	80121e0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	6878      	ldr	r0, [r7, #4]
 8011f48:	f000 fb4d 	bl	80125e6 <USBD_CtlError>
        err++;
 8011f4c:	7cfb      	ldrb	r3, [r7, #19]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	74fb      	strb	r3, [r7, #19]
      break;
 8011f52:	e145      	b.n	80121e0 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	7c12      	ldrb	r2, [r2, #16]
 8011f60:	f107 010a 	add.w	r1, r7, #10
 8011f64:	4610      	mov	r0, r2
 8011f66:	4798      	blx	r3
 8011f68:	6178      	str	r0, [r7, #20]
      break;
 8011f6a:	e139      	b.n	80121e0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	7c1b      	ldrb	r3, [r3, #16]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d10d      	bne.n	8011f90 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f7c:	f107 020a 	add.w	r2, r7, #10
 8011f80:	4610      	mov	r0, r2
 8011f82:	4798      	blx	r3
 8011f84:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	3301      	adds	r3, #1
 8011f8a:	2202      	movs	r2, #2
 8011f8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011f8e:	e127      	b.n	80121e0 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f98:	f107 020a 	add.w	r2, r7, #10
 8011f9c:	4610      	mov	r0, r2
 8011f9e:	4798      	blx	r3
 8011fa0:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	3301      	adds	r3, #1
 8011fa6:	2202      	movs	r2, #2
 8011fa8:	701a      	strb	r2, [r3, #0]
      break;
 8011faa:	e119      	b.n	80121e0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	885b      	ldrh	r3, [r3, #2]
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b05      	cmp	r3, #5
 8011fb4:	f200 80ac 	bhi.w	8012110 <USBD_GetDescriptor+0x258>
 8011fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8011fc0 <USBD_GetDescriptor+0x108>)
 8011fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbe:	bf00      	nop
 8011fc0:	08011fd9 	.word	0x08011fd9
 8011fc4:	0801200d 	.word	0x0801200d
 8011fc8:	08012041 	.word	0x08012041
 8011fcc:	08012075 	.word	0x08012075
 8011fd0:	080120a9 	.word	0x080120a9
 8011fd4:	080120dd 	.word	0x080120dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d00b      	beq.n	8011ffc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fea:	685b      	ldr	r3, [r3, #4]
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	7c12      	ldrb	r2, [r2, #16]
 8011ff0:	f107 010a 	add.w	r1, r7, #10
 8011ff4:	4610      	mov	r0, r2
 8011ff6:	4798      	blx	r3
 8011ff8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ffa:	e0b8      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8011ffc:	6839      	ldr	r1, [r7, #0]
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f000 faf1 	bl	80125e6 <USBD_CtlError>
            err++;
 8012004:	7cfb      	ldrb	r3, [r7, #19]
 8012006:	3301      	adds	r3, #1
 8012008:	74fb      	strb	r3, [r7, #19]
          break;
 801200a:	e0b0      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00b      	beq.n	8012030 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801201e:	689b      	ldr	r3, [r3, #8]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	7c12      	ldrb	r2, [r2, #16]
 8012024:	f107 010a 	add.w	r1, r7, #10
 8012028:	4610      	mov	r0, r2
 801202a:	4798      	blx	r3
 801202c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801202e:	e09e      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8012030:	6839      	ldr	r1, [r7, #0]
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f000 fad7 	bl	80125e6 <USBD_CtlError>
            err++;
 8012038:	7cfb      	ldrb	r3, [r7, #19]
 801203a:	3301      	adds	r3, #1
 801203c:	74fb      	strb	r3, [r7, #19]
          break;
 801203e:	e096      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00b      	beq.n	8012064 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012052:	68db      	ldr	r3, [r3, #12]
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	7c12      	ldrb	r2, [r2, #16]
 8012058:	f107 010a 	add.w	r1, r7, #10
 801205c:	4610      	mov	r0, r2
 801205e:	4798      	blx	r3
 8012060:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012062:	e084      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8012064:	6839      	ldr	r1, [r7, #0]
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f000 fabd 	bl	80125e6 <USBD_CtlError>
            err++;
 801206c:	7cfb      	ldrb	r3, [r7, #19]
 801206e:	3301      	adds	r3, #1
 8012070:	74fb      	strb	r3, [r7, #19]
          break;
 8012072:	e07c      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00b      	beq.n	8012098 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012086:	691b      	ldr	r3, [r3, #16]
 8012088:	687a      	ldr	r2, [r7, #4]
 801208a:	7c12      	ldrb	r2, [r2, #16]
 801208c:	f107 010a 	add.w	r1, r7, #10
 8012090:	4610      	mov	r0, r2
 8012092:	4798      	blx	r3
 8012094:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012096:	e06a      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8012098:	6839      	ldr	r1, [r7, #0]
 801209a:	6878      	ldr	r0, [r7, #4]
 801209c:	f000 faa3 	bl	80125e6 <USBD_CtlError>
            err++;
 80120a0:	7cfb      	ldrb	r3, [r7, #19]
 80120a2:	3301      	adds	r3, #1
 80120a4:	74fb      	strb	r3, [r7, #19]
          break;
 80120a6:	e062      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ae:	695b      	ldr	r3, [r3, #20]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d00b      	beq.n	80120cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ba:	695b      	ldr	r3, [r3, #20]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	7c12      	ldrb	r2, [r2, #16]
 80120c0:	f107 010a 	add.w	r1, r7, #10
 80120c4:	4610      	mov	r0, r2
 80120c6:	4798      	blx	r3
 80120c8:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120ca:	e050      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80120cc:	6839      	ldr	r1, [r7, #0]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fa89 	bl	80125e6 <USBD_CtlError>
            err++;
 80120d4:	7cfb      	ldrb	r3, [r7, #19]
 80120d6:	3301      	adds	r3, #1
 80120d8:	74fb      	strb	r3, [r7, #19]
          break;
 80120da:	e048      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00b      	beq.n	8012100 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	687a      	ldr	r2, [r7, #4]
 80120f2:	7c12      	ldrb	r2, [r2, #16]
 80120f4:	f107 010a 	add.w	r1, r7, #10
 80120f8:	4610      	mov	r0, r2
 80120fa:	4798      	blx	r3
 80120fc:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120fe:	e036      	b.n	801216e <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 fa6f 	bl	80125e6 <USBD_CtlError>
            err++;
 8012108:	7cfb      	ldrb	r3, [r7, #19]
 801210a:	3301      	adds	r3, #1
 801210c:	74fb      	strb	r3, [r7, #19]
          break;
 801210e:	e02e      	b.n	801216e <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8012110:	2300      	movs	r3, #0
 8012112:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8012114:	2300      	movs	r3, #0
 8012116:	60fb      	str	r3, [r7, #12]
 8012118:	e020      	b.n	801215c <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	32ae      	adds	r2, #174	@ 0xae
 8012120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012126:	2b00      	cmp	r3, #0
 8012128:	d015      	beq.n	8012156 <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	68fa      	ldr	r2, [r7, #12]
 801212e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	32ae      	adds	r2, #174	@ 0xae
 8012138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801213e:	683a      	ldr	r2, [r7, #0]
 8012140:	8852      	ldrh	r2, [r2, #2]
 8012142:	b2d1      	uxtb	r1, r2
 8012144:	f107 020a 	add.w	r2, r7, #10
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	4798      	blx	r3
 801214c:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 801214e:	697b      	ldr	r3, [r7, #20]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d10a      	bne.n	801216a <USBD_GetDescriptor+0x2b2>
              {
                continue;
 8012154:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	3301      	adds	r3, #1
 801215a:	60fb      	str	r3, [r7, #12]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	429a      	cmp	r2, r3
 8012166:	d3d8      	bcc.n	801211a <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012168:	e000      	b.n	801216c <USBD_GetDescriptor+0x2b4>
                break;
 801216a:	bf00      	nop
          break;
 801216c:	bf00      	nop
      }
      break;
 801216e:	e037      	b.n	80121e0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	7c1b      	ldrb	r3, [r3, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d109      	bne.n	801218c <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801217e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012180:	f107 020a 	add.w	r2, r7, #10
 8012184:	4610      	mov	r0, r2
 8012186:	4798      	blx	r3
 8012188:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801218a:	e029      	b.n	80121e0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 fa29 	bl	80125e6 <USBD_CtlError>
        err++;
 8012194:	7cfb      	ldrb	r3, [r7, #19]
 8012196:	3301      	adds	r3, #1
 8012198:	74fb      	strb	r3, [r7, #19]
      break;
 801219a:	e021      	b.n	80121e0 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	7c1b      	ldrb	r3, [r3, #16]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10d      	bne.n	80121c0 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80121aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121ac:	f107 020a 	add.w	r2, r7, #10
 80121b0:	4610      	mov	r0, r2
 80121b2:	4798      	blx	r3
 80121b4:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	3301      	adds	r3, #1
 80121ba:	2207      	movs	r2, #7
 80121bc:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121be:	e00f      	b.n	80121e0 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 fa0f 	bl	80125e6 <USBD_CtlError>
        err++;
 80121c8:	7cfb      	ldrb	r3, [r7, #19]
 80121ca:	3301      	adds	r3, #1
 80121cc:	74fb      	strb	r3, [r7, #19]
      break;
 80121ce:	e007      	b.n	80121e0 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 80121d0:	6839      	ldr	r1, [r7, #0]
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f000 fa07 	bl	80125e6 <USBD_CtlError>
      err++;
 80121d8:	7cfb      	ldrb	r3, [r7, #19]
 80121da:	3301      	adds	r3, #1
 80121dc:	74fb      	strb	r3, [r7, #19]
      break;
 80121de:	bf00      	nop
  }

  if (err != 0U)
 80121e0:	7cfb      	ldrb	r3, [r7, #19]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d11e      	bne.n	8012224 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	88db      	ldrh	r3, [r3, #6]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d016      	beq.n	801221c <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 80121ee:	897b      	ldrh	r3, [r7, #10]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d00e      	beq.n	8012212 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	88da      	ldrh	r2, [r3, #6]
 80121f8:	897b      	ldrh	r3, [r7, #10]
 80121fa:	4293      	cmp	r3, r2
 80121fc:	bf28      	it	cs
 80121fe:	4613      	movcs	r3, r2
 8012200:	b29b      	uxth	r3, r3
 8012202:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012204:	897b      	ldrh	r3, [r7, #10]
 8012206:	461a      	mov	r2, r3
 8012208:	6979      	ldr	r1, [r7, #20]
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 fa68 	bl	80126e0 <USBD_CtlSendData>
 8012210:	e009      	b.n	8012226 <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012212:	6839      	ldr	r1, [r7, #0]
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f000 f9e6 	bl	80125e6 <USBD_CtlError>
 801221a:	e004      	b.n	8012226 <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f000 fab9 	bl	8012794 <USBD_CtlSendStatus>
 8012222:	e000      	b.n	8012226 <USBD_GetDescriptor+0x36e>
    return;
 8012224:	bf00      	nop
  }
}
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	889b      	ldrh	r3, [r3, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d131      	bne.n	80122a2 <USBD_SetAddress+0x76>
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	88db      	ldrh	r3, [r3, #6]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d12d      	bne.n	80122a2 <USBD_SetAddress+0x76>
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	2b7f      	cmp	r3, #127	@ 0x7f
 801224c:	d829      	bhi.n	80122a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	885b      	ldrh	r3, [r3, #2]
 8012252:	b2db      	uxtb	r3, r3
 8012254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012258:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012260:	b2db      	uxtb	r3, r3
 8012262:	2b03      	cmp	r3, #3
 8012264:	d104      	bne.n	8012270 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012266:	6839      	ldr	r1, [r7, #0]
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f000 f9bc 	bl	80125e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801226e:	e01d      	b.n	80122ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	7bfa      	ldrb	r2, [r7, #15]
 8012274:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012278:	7bfb      	ldrb	r3, [r7, #15]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f006 f887 	bl	8018390 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fa86 	bl	8012794 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012288:	7bfb      	ldrb	r3, [r7, #15]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d004      	beq.n	8012298 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	2202      	movs	r2, #2
 8012292:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012296:	e009      	b.n	80122ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	2201      	movs	r2, #1
 801229c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122a0:	e004      	b.n	80122ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80122a2:	6839      	ldr	r1, [r7, #0]
 80122a4:	6878      	ldr	r0, [r7, #4]
 80122a6:	f000 f99e 	bl	80125e6 <USBD_CtlError>
  }
}
 80122aa:	bf00      	nop
 80122ac:	bf00      	nop
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	885b      	ldrh	r3, [r3, #2]
 80122c6:	b2da      	uxtb	r2, r3
 80122c8:	4b4e      	ldr	r3, [pc, #312]	@ (8012404 <USBD_SetConfig+0x150>)
 80122ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80122cc:	4b4d      	ldr	r3, [pc, #308]	@ (8012404 <USBD_SetConfig+0x150>)
 80122ce:	781b      	ldrb	r3, [r3, #0]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d905      	bls.n	80122e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80122d4:	6839      	ldr	r1, [r7, #0]
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 f985 	bl	80125e6 <USBD_CtlError>
    return USBD_FAIL;
 80122dc:	2303      	movs	r3, #3
 80122de:	e08c      	b.n	80123fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	2b02      	cmp	r3, #2
 80122ea:	d002      	beq.n	80122f2 <USBD_SetConfig+0x3e>
 80122ec:	2b03      	cmp	r3, #3
 80122ee:	d029      	beq.n	8012344 <USBD_SetConfig+0x90>
 80122f0:	e075      	b.n	80123de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80122f2:	4b44      	ldr	r3, [pc, #272]	@ (8012404 <USBD_SetConfig+0x150>)
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d020      	beq.n	801233c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80122fa:	4b42      	ldr	r3, [pc, #264]	@ (8012404 <USBD_SetConfig+0x150>)
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	461a      	mov	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012304:	4b3f      	ldr	r3, [pc, #252]	@ (8012404 <USBD_SetConfig+0x150>)
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	4619      	mov	r1, r3
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f7fe ffca 	bl	80112a4 <USBD_SetClassConfig>
 8012310:	4603      	mov	r3, r0
 8012312:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d008      	beq.n	801232c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801231a:	6839      	ldr	r1, [r7, #0]
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f962 	bl	80125e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2202      	movs	r2, #2
 8012326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801232a:	e065      	b.n	80123f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f000 fa31 	bl	8012794 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2203      	movs	r2, #3
 8012336:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801233a:	e05d      	b.n	80123f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 fa29 	bl	8012794 <USBD_CtlSendStatus>
      break;
 8012342:	e059      	b.n	80123f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012344:	4b2f      	ldr	r3, [pc, #188]	@ (8012404 <USBD_SetConfig+0x150>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d112      	bne.n	8012372 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2202      	movs	r2, #2
 8012350:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012354:	4b2b      	ldr	r3, [pc, #172]	@ (8012404 <USBD_SetConfig+0x150>)
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	461a      	mov	r2, r3
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801235e:	4b29      	ldr	r3, [pc, #164]	@ (8012404 <USBD_SetConfig+0x150>)
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	4619      	mov	r1, r3
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7fe ffb9 	bl	80112dc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	f000 fa12 	bl	8012794 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012370:	e042      	b.n	80123f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012372:	4b24      	ldr	r3, [pc, #144]	@ (8012404 <USBD_SetConfig+0x150>)
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	461a      	mov	r2, r3
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	429a      	cmp	r2, r3
 801237e:	d02a      	beq.n	80123d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	b2db      	uxtb	r3, r3
 8012386:	4619      	mov	r1, r3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7fe ffa7 	bl	80112dc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801238e:	4b1d      	ldr	r3, [pc, #116]	@ (8012404 <USBD_SetConfig+0x150>)
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	461a      	mov	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012398:	4b1a      	ldr	r3, [pc, #104]	@ (8012404 <USBD_SetConfig+0x150>)
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	4619      	mov	r1, r3
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f7fe ff80 	bl	80112a4 <USBD_SetClassConfig>
 80123a4:	4603      	mov	r3, r0
 80123a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80123a8:	7bfb      	ldrb	r3, [r7, #15]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00f      	beq.n	80123ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80123ae:	6839      	ldr	r1, [r7, #0]
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f000 f918 	bl	80125e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f7fe ff8c 	bl	80112dc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2202      	movs	r2, #2
 80123c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80123cc:	e014      	b.n	80123f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f9e0 	bl	8012794 <USBD_CtlSendStatus>
      break;
 80123d4:	e010      	b.n	80123f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 f9dc 	bl	8012794 <USBD_CtlSendStatus>
      break;
 80123dc:	e00c      	b.n	80123f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80123de:	6839      	ldr	r1, [r7, #0]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 f900 	bl	80125e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80123e6:	4b07      	ldr	r3, [pc, #28]	@ (8012404 <USBD_SetConfig+0x150>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	4619      	mov	r1, r3
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f7fe ff75 	bl	80112dc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80123f2:	2303      	movs	r3, #3
 80123f4:	73fb      	strb	r3, [r7, #15]
      break;
 80123f6:	bf00      	nop
  }

  return ret;
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
 8012402:	bf00      	nop
 8012404:	24000a53 	.word	0x24000a53

08012408 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	88db      	ldrh	r3, [r3, #6]
 8012416:	2b01      	cmp	r3, #1
 8012418:	d004      	beq.n	8012424 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801241a:	6839      	ldr	r1, [r7, #0]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f8e2 	bl	80125e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012422:	e023      	b.n	801246c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801242a:	b2db      	uxtb	r3, r3
 801242c:	2b02      	cmp	r3, #2
 801242e:	dc02      	bgt.n	8012436 <USBD_GetConfig+0x2e>
 8012430:	2b00      	cmp	r3, #0
 8012432:	dc03      	bgt.n	801243c <USBD_GetConfig+0x34>
 8012434:	e015      	b.n	8012462 <USBD_GetConfig+0x5a>
 8012436:	2b03      	cmp	r3, #3
 8012438:	d00b      	beq.n	8012452 <USBD_GetConfig+0x4a>
 801243a:	e012      	b.n	8012462 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2200      	movs	r2, #0
 8012440:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	3308      	adds	r3, #8
 8012446:	2201      	movs	r2, #1
 8012448:	4619      	mov	r1, r3
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 f948 	bl	80126e0 <USBD_CtlSendData>
        break;
 8012450:	e00c      	b.n	801246c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	3304      	adds	r3, #4
 8012456:	2201      	movs	r2, #1
 8012458:	4619      	mov	r1, r3
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 f940 	bl	80126e0 <USBD_CtlSendData>
        break;
 8012460:	e004      	b.n	801246c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012462:	6839      	ldr	r1, [r7, #0]
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 f8be 	bl	80125e6 <USBD_CtlError>
        break;
 801246a:	bf00      	nop
}
 801246c:	bf00      	nop
 801246e:	3708      	adds	r7, #8
 8012470:	46bd      	mov	sp, r7
 8012472:	bd80      	pop	{r7, pc}

08012474 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012484:	b2db      	uxtb	r3, r3
 8012486:	3b01      	subs	r3, #1
 8012488:	2b02      	cmp	r3, #2
 801248a:	d81e      	bhi.n	80124ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	88db      	ldrh	r3, [r3, #6]
 8012490:	2b02      	cmp	r3, #2
 8012492:	d004      	beq.n	801249e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012494:	6839      	ldr	r1, [r7, #0]
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 f8a5 	bl	80125e6 <USBD_CtlError>
        break;
 801249c:	e01a      	b.n	80124d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2201      	movs	r2, #1
 80124a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d005      	beq.n	80124ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	f043 0202 	orr.w	r2, r3, #2
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	330c      	adds	r3, #12
 80124be:	2202      	movs	r2, #2
 80124c0:	4619      	mov	r1, r3
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f90c 	bl	80126e0 <USBD_CtlSendData>
      break;
 80124c8:	e004      	b.n	80124d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80124ca:	6839      	ldr	r1, [r7, #0]
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 f88a 	bl	80125e6 <USBD_CtlError>
      break;
 80124d2:	bf00      	nop
  }
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	885b      	ldrh	r3, [r3, #2]
 80124ea:	2b01      	cmp	r3, #1
 80124ec:	d107      	bne.n	80124fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	2201      	movs	r2, #1
 80124f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 f94c 	bl	8012794 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80124fc:	e013      	b.n	8012526 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	885b      	ldrh	r3, [r3, #2]
 8012502:	2b02      	cmp	r3, #2
 8012504:	d10b      	bne.n	801251e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	889b      	ldrh	r3, [r3, #4]
 801250a:	0a1b      	lsrs	r3, r3, #8
 801250c:	b29b      	uxth	r3, r3
 801250e:	b2da      	uxtb	r2, r3
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 f93c 	bl	8012794 <USBD_CtlSendStatus>
}
 801251c:	e003      	b.n	8012526 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801251e:	6839      	ldr	r1, [r7, #0]
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 f860 	bl	80125e6 <USBD_CtlError>
}
 8012526:	bf00      	nop
 8012528:	3708      	adds	r7, #8
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b082      	sub	sp, #8
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801253e:	b2db      	uxtb	r3, r3
 8012540:	3b01      	subs	r3, #1
 8012542:	2b02      	cmp	r3, #2
 8012544:	d80b      	bhi.n	801255e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	885b      	ldrh	r3, [r3, #2]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d10c      	bne.n	8012568 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f000 f91c 	bl	8012794 <USBD_CtlSendStatus>
      }
      break;
 801255c:	e004      	b.n	8012568 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f840 	bl	80125e6 <USBD_CtlError>
      break;
 8012566:	e000      	b.n	801256a <USBD_ClrFeature+0x3c>
      break;
 8012568:	bf00      	nop
  }
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}

08012572 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	6078      	str	r0, [r7, #4]
 801257a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	781a      	ldrb	r2, [r3, #0]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	3301      	adds	r3, #1
 801258c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	781a      	ldrb	r2, [r3, #0]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	3301      	adds	r3, #1
 801259a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	f7ff f9ef 	bl	8011980 <SWAPBYTE>
 80125a2:	4603      	mov	r3, r0
 80125a4:	461a      	mov	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	3301      	adds	r3, #1
 80125ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	3301      	adds	r3, #1
 80125b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80125b6:	68f8      	ldr	r0, [r7, #12]
 80125b8:	f7ff f9e2 	bl	8011980 <SWAPBYTE>
 80125bc:	4603      	mov	r3, r0
 80125be:	461a      	mov	r2, r3
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	3301      	adds	r3, #1
 80125c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	3301      	adds	r3, #1
 80125ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f7ff f9d5 	bl	8011980 <SWAPBYTE>
 80125d6:	4603      	mov	r3, r0
 80125d8:	461a      	mov	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	80da      	strh	r2, [r3, #6]
}
 80125de:	bf00      	nop
 80125e0:	3710      	adds	r7, #16
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}

080125e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125e6:	b580      	push	{r7, lr}
 80125e8:	b082      	sub	sp, #8
 80125ea:	af00      	add	r7, sp, #0
 80125ec:	6078      	str	r0, [r7, #4]
 80125ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80125f0:	2180      	movs	r1, #128	@ 0x80
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f005 fe62 	bl	80182bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80125f8:	2100      	movs	r1, #0
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f005 fe5e 	bl	80182bc <USBD_LL_StallEP>
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012614:	2300      	movs	r3, #0
 8012616:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d042      	beq.n	80126a4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012622:	6938      	ldr	r0, [r7, #16]
 8012624:	f000 f842 	bl	80126ac <USBD_GetLen>
 8012628:	4603      	mov	r3, r0
 801262a:	3301      	adds	r3, #1
 801262c:	005b      	lsls	r3, r3, #1
 801262e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012632:	d808      	bhi.n	8012646 <USBD_GetString+0x3e>
 8012634:	6938      	ldr	r0, [r7, #16]
 8012636:	f000 f839 	bl	80126ac <USBD_GetLen>
 801263a:	4603      	mov	r3, r0
 801263c:	3301      	adds	r3, #1
 801263e:	b29b      	uxth	r3, r3
 8012640:	005b      	lsls	r3, r3, #1
 8012642:	b29a      	uxth	r2, r3
 8012644:	e001      	b.n	801264a <USBD_GetString+0x42>
 8012646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801264e:	7dfb      	ldrb	r3, [r7, #23]
 8012650:	68ba      	ldr	r2, [r7, #8]
 8012652:	4413      	add	r3, r2
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	7812      	ldrb	r2, [r2, #0]
 8012658:	701a      	strb	r2, [r3, #0]
  idx++;
 801265a:	7dfb      	ldrb	r3, [r7, #23]
 801265c:	3301      	adds	r3, #1
 801265e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012660:	7dfb      	ldrb	r3, [r7, #23]
 8012662:	68ba      	ldr	r2, [r7, #8]
 8012664:	4413      	add	r3, r2
 8012666:	2203      	movs	r2, #3
 8012668:	701a      	strb	r2, [r3, #0]
  idx++;
 801266a:	7dfb      	ldrb	r3, [r7, #23]
 801266c:	3301      	adds	r3, #1
 801266e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012670:	e013      	b.n	801269a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	4413      	add	r3, r2
 8012678:	693a      	ldr	r2, [r7, #16]
 801267a:	7812      	ldrb	r2, [r2, #0]
 801267c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	3301      	adds	r3, #1
 8012682:	613b      	str	r3, [r7, #16]
    idx++;
 8012684:	7dfb      	ldrb	r3, [r7, #23]
 8012686:	3301      	adds	r3, #1
 8012688:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801268a:	7dfb      	ldrb	r3, [r7, #23]
 801268c:	68ba      	ldr	r2, [r7, #8]
 801268e:	4413      	add	r3, r2
 8012690:	2200      	movs	r2, #0
 8012692:	701a      	strb	r2, [r3, #0]
    idx++;
 8012694:	7dfb      	ldrb	r3, [r7, #23]
 8012696:	3301      	adds	r3, #1
 8012698:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	781b      	ldrb	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d1e7      	bne.n	8012672 <USBD_GetString+0x6a>
 80126a2:	e000      	b.n	80126a6 <USBD_GetString+0x9e>
    return;
 80126a4:	bf00      	nop
  }
}
 80126a6:	3718      	adds	r7, #24
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80126ac:	b480      	push	{r7}
 80126ae:	b085      	sub	sp, #20
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80126b4:	2300      	movs	r3, #0
 80126b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80126bc:	e005      	b.n	80126ca <USBD_GetLen+0x1e>
  {
    len++;
 80126be:	7bfb      	ldrb	r3, [r7, #15]
 80126c0:	3301      	adds	r3, #1
 80126c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	3301      	adds	r3, #1
 80126c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d1f5      	bne.n	80126be <USBD_GetLen+0x12>
  }

  return len;
 80126d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3714      	adds	r7, #20
 80126d8:	46bd      	mov	sp, r7
 80126da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126de:	4770      	bx	lr

080126e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2202      	movs	r2, #2
 80126f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	687a      	ldr	r2, [r7, #4]
 80126fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	2100      	movs	r1, #0
 8012706:	68f8      	ldr	r0, [r7, #12]
 8012708:	f005 fe61 	bl	80183ce <USBD_LL_Transmit>

  return USBD_OK;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3710      	adds	r7, #16
 8012712:	46bd      	mov	sp, r7
 8012714:	bd80      	pop	{r7, pc}

08012716 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012716:	b580      	push	{r7, lr}
 8012718:	b084      	sub	sp, #16
 801271a:	af00      	add	r7, sp, #0
 801271c:	60f8      	str	r0, [r7, #12]
 801271e:	60b9      	str	r1, [r7, #8]
 8012720:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68ba      	ldr	r2, [r7, #8]
 8012726:	2100      	movs	r1, #0
 8012728:	68f8      	ldr	r0, [r7, #12]
 801272a:	f005 fe50 	bl	80183ce <USBD_LL_Transmit>

  return USBD_OK;
 801272e:	2300      	movs	r3, #0
}
 8012730:	4618      	mov	r0, r3
 8012732:	3710      	adds	r7, #16
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	2203      	movs	r2, #3
 8012748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	687a      	ldr	r2, [r7, #4]
 8012758:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	2100      	movs	r1, #0
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f005 fe54 	bl	8018410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3710      	adds	r7, #16
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b084      	sub	sp, #16
 8012776:	af00      	add	r7, sp, #0
 8012778:	60f8      	str	r0, [r7, #12]
 801277a:	60b9      	str	r1, [r7, #8]
 801277c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	2100      	movs	r1, #0
 8012784:	68f8      	ldr	r0, [r7, #12]
 8012786:	f005 fe43 	bl	8018410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801278a:	2300      	movs	r3, #0
}
 801278c:	4618      	mov	r0, r3
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2204      	movs	r2, #4
 80127a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80127a4:	2300      	movs	r3, #0
 80127a6:	2200      	movs	r2, #0
 80127a8:	2100      	movs	r1, #0
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f005 fe0f 	bl	80183ce <USBD_LL_Transmit>

  return USBD_OK;
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b082      	sub	sp, #8
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2205      	movs	r2, #5
 80127c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127ca:	2300      	movs	r3, #0
 80127cc:	2200      	movs	r2, #0
 80127ce:	2100      	movs	r1, #0
 80127d0:	6878      	ldr	r0, [r7, #4]
 80127d2:	f005 fe1d 	bl	8018410 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80127d6:	2300      	movs	r3, #0
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b089      	sub	sp, #36	@ 0x24
 80127e4:	af04      	add	r7, sp, #16
 80127e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80127e8:	2301      	movs	r3, #1
 80127ea:	2202      	movs	r2, #2
 80127ec:	2102      	movs	r1, #2
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f000 fcb7 	bl	8013162 <USBH_FindInterface>
 80127f4:	4603      	mov	r3, r0
 80127f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80127f8:	7bfb      	ldrb	r3, [r7, #15]
 80127fa:	2bff      	cmp	r3, #255	@ 0xff
 80127fc:	d002      	beq.n	8012804 <USBH_CDC_InterfaceInit+0x24>
 80127fe:	7bfb      	ldrb	r3, [r7, #15]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d901      	bls.n	8012808 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012804:	2302      	movs	r3, #2
 8012806:	e13d      	b.n	8012a84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8012808:	7bfb      	ldrb	r3, [r7, #15]
 801280a:	4619      	mov	r1, r3
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 fc8c 	bl	801312a <USBH_SelectInterface>
 8012812:	4603      	mov	r3, r0
 8012814:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8012816:	7bbb      	ldrb	r3, [r7, #14]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d001      	beq.n	8012820 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 801281c:	2302      	movs	r3, #2
 801281e:	e131      	b.n	8012a84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8012826:	2050      	movs	r0, #80	@ 0x50
 8012828:	f006 f960 	bl	8018aec <malloc>
 801282c:	4603      	mov	r3, r0
 801282e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012836:	69db      	ldr	r3, [r3, #28]
 8012838:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d101      	bne.n	8012844 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8012840:	2302      	movs	r3, #2
 8012842:	e11f      	b.n	8012a84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8012844:	2250      	movs	r2, #80	@ 0x50
 8012846:	2100      	movs	r1, #0
 8012848:	68b8      	ldr	r0, [r7, #8]
 801284a:	f006 fa0d 	bl	8018c68 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 801284e:	7bfb      	ldrb	r3, [r7, #15]
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	211a      	movs	r1, #26
 8012854:	fb01 f303 	mul.w	r3, r1, r3
 8012858:	4413      	add	r3, r2
 801285a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801285e:	781b      	ldrb	r3, [r3, #0]
 8012860:	b25b      	sxtb	r3, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	da15      	bge.n	8012892 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012866:	7bfb      	ldrb	r3, [r7, #15]
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	211a      	movs	r1, #26
 801286c:	fb01 f303 	mul.w	r3, r1, r3
 8012870:	4413      	add	r3, r2
 8012872:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012876:	781a      	ldrb	r2, [r3, #0]
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801287c:	7bfb      	ldrb	r3, [r7, #15]
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	211a      	movs	r1, #26
 8012882:	fb01 f303 	mul.w	r3, r1, r3
 8012886:	4413      	add	r3, r2
 8012888:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 801288c:	881a      	ldrh	r2, [r3, #0]
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	785b      	ldrb	r3, [r3, #1]
 8012896:	4619      	mov	r1, r3
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f002 f904 	bl	8014aa6 <USBH_AllocPipe>
 801289e:	4603      	mov	r3, r0
 80128a0:	461a      	mov	r2, r3
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	7819      	ldrb	r1, [r3, #0]
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	7858      	ldrb	r0, [r3, #1]
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80128ba:	68ba      	ldr	r2, [r7, #8]
 80128bc:	8952      	ldrh	r2, [r2, #10]
 80128be:	9202      	str	r2, [sp, #8]
 80128c0:	2203      	movs	r2, #3
 80128c2:	9201      	str	r2, [sp, #4]
 80128c4:	9300      	str	r3, [sp, #0]
 80128c6:	4623      	mov	r3, r4
 80128c8:	4602      	mov	r2, r0
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f002 f8bc 	bl	8014a48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2200      	movs	r2, #0
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f006 f89c 	bl	8018a16 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80128de:	2300      	movs	r3, #0
 80128e0:	2200      	movs	r2, #0
 80128e2:	210a      	movs	r1, #10
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f000 fc3c 	bl	8013162 <USBH_FindInterface>
 80128ea:	4603      	mov	r3, r0
 80128ec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80128ee:	7bfb      	ldrb	r3, [r7, #15]
 80128f0:	2bff      	cmp	r3, #255	@ 0xff
 80128f2:	d002      	beq.n	80128fa <USBH_CDC_InterfaceInit+0x11a>
 80128f4:	7bfb      	ldrb	r3, [r7, #15]
 80128f6:	2b01      	cmp	r3, #1
 80128f8:	d901      	bls.n	80128fe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80128fa:	2302      	movs	r3, #2
 80128fc:	e0c2      	b.n	8012a84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80128fe:	7bfb      	ldrb	r3, [r7, #15]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	211a      	movs	r1, #26
 8012904:	fb01 f303 	mul.w	r3, r1, r3
 8012908:	4413      	add	r3, r2
 801290a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	b25b      	sxtb	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	da16      	bge.n	8012944 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012916:	7bfb      	ldrb	r3, [r7, #15]
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	211a      	movs	r1, #26
 801291c:	fb01 f303 	mul.w	r3, r1, r3
 8012920:	4413      	add	r3, r2
 8012922:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012926:	781a      	ldrb	r2, [r3, #0]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801292c:	7bfb      	ldrb	r3, [r7, #15]
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	211a      	movs	r1, #26
 8012932:	fb01 f303 	mul.w	r3, r1, r3
 8012936:	4413      	add	r3, r2
 8012938:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 801293c:	881a      	ldrh	r2, [r3, #0]
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	835a      	strh	r2, [r3, #26]
 8012942:	e015      	b.n	8012970 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8012944:	7bfb      	ldrb	r3, [r7, #15]
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	211a      	movs	r1, #26
 801294a:	fb01 f303 	mul.w	r3, r1, r3
 801294e:	4413      	add	r3, r2
 8012950:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012954:	781a      	ldrb	r2, [r3, #0]
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801295a:	7bfb      	ldrb	r3, [r7, #15]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	211a      	movs	r1, #26
 8012960:	fb01 f303 	mul.w	r3, r1, r3
 8012964:	4413      	add	r3, r2
 8012966:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 801296a:	881a      	ldrh	r2, [r3, #0]
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8012970:	7bfb      	ldrb	r3, [r7, #15]
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	211a      	movs	r1, #26
 8012976:	fb01 f303 	mul.w	r3, r1, r3
 801297a:	4413      	add	r3, r2
 801297c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012980:	781b      	ldrb	r3, [r3, #0]
 8012982:	b25b      	sxtb	r3, r3
 8012984:	2b00      	cmp	r3, #0
 8012986:	da16      	bge.n	80129b6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8012988:	7bfb      	ldrb	r3, [r7, #15]
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	211a      	movs	r1, #26
 801298e:	fb01 f303 	mul.w	r3, r1, r3
 8012992:	4413      	add	r3, r2
 8012994:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012998:	781a      	ldrb	r2, [r3, #0]
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801299e:	7bfb      	ldrb	r3, [r7, #15]
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	211a      	movs	r1, #26
 80129a4:	fb01 f303 	mul.w	r3, r1, r3
 80129a8:	4413      	add	r3, r2
 80129aa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80129ae:	881a      	ldrh	r2, [r3, #0]
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	835a      	strh	r2, [r3, #26]
 80129b4:	e015      	b.n	80129e2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	211a      	movs	r1, #26
 80129bc:	fb01 f303 	mul.w	r3, r1, r3
 80129c0:	4413      	add	r3, r2
 80129c2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80129c6:	781a      	ldrb	r2, [r3, #0]
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80129cc:	7bfb      	ldrb	r3, [r7, #15]
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	211a      	movs	r1, #26
 80129d2:	fb01 f303 	mul.w	r3, r1, r3
 80129d6:	4413      	add	r3, r2
 80129d8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80129dc:	881a      	ldrh	r2, [r3, #0]
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	7b9b      	ldrb	r3, [r3, #14]
 80129e6:	4619      	mov	r1, r3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f002 f85c 	bl	8014aa6 <USBH_AllocPipe>
 80129ee:	4603      	mov	r3, r0
 80129f0:	461a      	mov	r2, r3
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80129f6:	68bb      	ldr	r3, [r7, #8]
 80129f8:	7bdb      	ldrb	r3, [r3, #15]
 80129fa:	4619      	mov	r1, r3
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f002 f852 	bl	8014aa6 <USBH_AllocPipe>
 8012a02:	4603      	mov	r3, r0
 8012a04:	461a      	mov	r2, r3
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	7b59      	ldrb	r1, [r3, #13]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	7b98      	ldrb	r0, [r3, #14]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012a1e:	68ba      	ldr	r2, [r7, #8]
 8012a20:	8b12      	ldrh	r2, [r2, #24]
 8012a22:	9202      	str	r2, [sp, #8]
 8012a24:	2202      	movs	r2, #2
 8012a26:	9201      	str	r2, [sp, #4]
 8012a28:	9300      	str	r3, [sp, #0]
 8012a2a:	4623      	mov	r3, r4
 8012a2c:	4602      	mov	r2, r0
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f002 f80a 	bl	8014a48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	7b19      	ldrb	r1, [r3, #12]
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	7bd8      	ldrb	r0, [r3, #15]
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	8b52      	ldrh	r2, [r2, #26]
 8012a4c:	9202      	str	r2, [sp, #8]
 8012a4e:	2202      	movs	r2, #2
 8012a50:	9201      	str	r2, [sp, #4]
 8012a52:	9300      	str	r3, [sp, #0]
 8012a54:	4623      	mov	r3, r4
 8012a56:	4602      	mov	r2, r0
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f001 fff5 	bl	8014a48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	2200      	movs	r2, #0
 8012a62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	7b5b      	ldrb	r3, [r3, #13]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f005 ffd1 	bl	8018a16 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	7b1b      	ldrb	r3, [r3, #12]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f005 ffca 	bl	8018a16 <USBH_LL_SetToggle>

  return USBH_OK;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3714      	adds	r7, #20
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd90      	pop	{r4, r7, pc}

08012a8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b084      	sub	sp, #16
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012a9a:	69db      	ldr	r3, [r3, #28]
 8012a9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d00e      	beq.n	8012ac4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	4619      	mov	r1, r3
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f001 ffea 	bl	8014a86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f002 f815 	bl	8014ae8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	7b1b      	ldrb	r3, [r3, #12]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d00e      	beq.n	8012aea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	7b1b      	ldrb	r3, [r3, #12]
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f001 ffd7 	bl	8014a86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	7b1b      	ldrb	r3, [r3, #12]
 8012adc:	4619      	mov	r1, r3
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f002 f802 	bl	8014ae8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	7b5b      	ldrb	r3, [r3, #13]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00e      	beq.n	8012b10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	7b5b      	ldrb	r3, [r3, #13]
 8012af6:	4619      	mov	r1, r3
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f001 ffc4 	bl	8014a86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	7b5b      	ldrb	r3, [r3, #13]
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f001 ffef 	bl	8014ae8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012b16:	69db      	ldr	r3, [r3, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d00b      	beq.n	8012b34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012b22:	69db      	ldr	r3, [r3, #28]
 8012b24:	4618      	mov	r0, r3
 8012b26:	f005 ffe9 	bl	8018afc <free>
    phost->pActiveClass->pData = 0U;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012b30:	2200      	movs	r2, #0
 8012b32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8012b34:	2300      	movs	r3, #0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3710      	adds	r7, #16
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}

08012b3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8012b3e:	b580      	push	{r7, lr}
 8012b40:	b084      	sub	sp, #16
 8012b42:	af00      	add	r7, sp, #0
 8012b44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012b4c:	69db      	ldr	r3, [r3, #28]
 8012b4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	3340      	adds	r3, #64	@ 0x40
 8012b54:	4619      	mov	r1, r3
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f8b1 	bl	8012cbe <GetLineCoding>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8012b60:	7afb      	ldrb	r3, [r7, #11]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d105      	bne.n	8012b72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012b6c:	2102      	movs	r1, #2
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8012b72:	7afb      	ldrb	r3, [r7, #11]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3710      	adds	r7, #16
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8012b84:	2301      	movs	r3, #1
 8012b86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012b92:	69db      	ldr	r3, [r3, #28]
 8012b94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012b9c:	2b04      	cmp	r3, #4
 8012b9e:	d877      	bhi.n	8012c90 <USBH_CDC_Process+0x114>
 8012ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8012ba8 <USBH_CDC_Process+0x2c>)
 8012ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ba6:	bf00      	nop
 8012ba8:	08012bbd 	.word	0x08012bbd
 8012bac:	08012bc3 	.word	0x08012bc3
 8012bb0:	08012bf3 	.word	0x08012bf3
 8012bb4:	08012c67 	.word	0x08012c67
 8012bb8:	08012c75 	.word	0x08012c75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8012bc0:	e06d      	b.n	8012c9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 f897 	bl	8012cfc <SetLineCoding>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012bd2:	7bbb      	ldrb	r3, [r7, #14]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d104      	bne.n	8012be2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	2202      	movs	r2, #2
 8012bdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012be0:	e058      	b.n	8012c94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8012be2:	7bbb      	ldrb	r3, [r7, #14]
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d055      	beq.n	8012c94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012be8:	68bb      	ldr	r3, [r7, #8]
 8012bea:	2204      	movs	r2, #4
 8012bec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012bf0:	e050      	b.n	8012c94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	3340      	adds	r3, #64	@ 0x40
 8012bf6:	4619      	mov	r1, r3
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f000 f860 	bl	8012cbe <GetLineCoding>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012c02:	7bbb      	ldrb	r3, [r7, #14]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d126      	bne.n	8012c56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c1a:	791b      	ldrb	r3, [r3, #4]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d13b      	bne.n	8012c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d133      	bne.n	8012c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012c3c:	429a      	cmp	r2, r3
 8012c3e:	d12b      	bne.n	8012c98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	d124      	bne.n	8012c98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f000 f96a 	bl	8012f28 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012c54:	e020      	b.n	8012c98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8012c56:	7bbb      	ldrb	r3, [r7, #14]
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d01d      	beq.n	8012c98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	2204      	movs	r2, #4
 8012c60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012c64:	e018      	b.n	8012c98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f000 f867 	bl	8012d3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 f8e6 	bl	8012e3e <CDC_ProcessReception>
      break;
 8012c72:	e014      	b.n	8012c9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8012c74:	2100      	movs	r1, #0
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f001 f8f8 	bl	8013e6c <USBH_ClrFeature>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8012c80:	7bbb      	ldrb	r3, [r7, #14]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d10a      	bne.n	8012c9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8012c8e:	e005      	b.n	8012c9c <USBH_CDC_Process+0x120>

    default:
      break;
 8012c90:	bf00      	nop
 8012c92:	e004      	b.n	8012c9e <USBH_CDC_Process+0x122>
      break;
 8012c94:	bf00      	nop
 8012c96:	e002      	b.n	8012c9e <USBH_CDC_Process+0x122>
      break;
 8012c98:	bf00      	nop
 8012c9a:	e000      	b.n	8012c9e <USBH_CDC_Process+0x122>
      break;
 8012c9c:	bf00      	nop

  }

  return status;
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3710      	adds	r7, #16
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012cb0:	2300      	movs	r3, #0
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b082      	sub	sp, #8
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	22a1      	movs	r2, #161	@ 0xa1
 8012ccc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2221      	movs	r2, #33	@ 0x21
 8012cd2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2207      	movs	r2, #7
 8012ce4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2207      	movs	r2, #7
 8012cea:	4619      	mov	r1, r3
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f001 fbf1 	bl	80144d4 <USBH_CtlReq>
 8012cf2:	4603      	mov	r3, r0
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}

08012cfc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2221      	movs	r2, #33	@ 0x21
 8012d0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	2220      	movs	r2, #32
 8012d10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2200      	movs	r2, #0
 8012d16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2207      	movs	r2, #7
 8012d22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	2207      	movs	r2, #7
 8012d28:	4619      	mov	r1, r3
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f001 fbd2 	bl	80144d4 <USBH_CtlReq>
 8012d30:	4603      	mov	r3, r0
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}

08012d3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8012d3a:	b580      	push	{r7, lr}
 8012d3c:	b086      	sub	sp, #24
 8012d3e:	af02      	add	r7, sp, #8
 8012d40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d48:	69db      	ldr	r3, [r3, #28]
 8012d4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8012d56:	2b01      	cmp	r3, #1
 8012d58:	d002      	beq.n	8012d60 <CDC_ProcessTransmission+0x26>
 8012d5a:	2b02      	cmp	r3, #2
 8012d5c:	d023      	beq.n	8012da6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8012d5e:	e06a      	b.n	8012e36 <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d64:	68fa      	ldr	r2, [r7, #12]
 8012d66:	8b12      	ldrh	r2, [r2, #24]
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d90b      	bls.n	8012d84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	69d9      	ldr	r1, [r3, #28]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	8b1a      	ldrh	r2, [r3, #24]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	7b5b      	ldrb	r3, [r3, #13]
 8012d78:	2001      	movs	r0, #1
 8012d7a:	9000      	str	r0, [sp, #0]
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f001 fe20 	bl	80149c2 <USBH_BulkSendData>
 8012d82:	e00b      	b.n	8012d9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	7b5b      	ldrb	r3, [r3, #13]
 8012d92:	2001      	movs	r0, #1
 8012d94:	9000      	str	r0, [sp, #0]
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f001 fe13 	bl	80149c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2202      	movs	r2, #2
 8012da0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8012da4:	e047      	b.n	8012e36 <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	7b5b      	ldrb	r3, [r3, #13]
 8012daa:	4619      	mov	r1, r3
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f005 fe11 	bl	80189d4 <USBH_LL_GetURBState>
 8012db2:	4603      	mov	r3, r0
 8012db4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8012db6:	7afb      	ldrb	r3, [r7, #11]
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d12e      	bne.n	8012e1a <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dc0:	68fa      	ldr	r2, [r7, #12]
 8012dc2:	8b12      	ldrh	r2, [r2, #24]
 8012dc4:	4293      	cmp	r3, r2
 8012dc6:	d90e      	bls.n	8012de6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012dcc:	68fa      	ldr	r2, [r7, #12]
 8012dce:	8b12      	ldrh	r2, [r2, #24]
 8012dd0:	1a9a      	subs	r2, r3, r2
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	69db      	ldr	r3, [r3, #28]
 8012dda:	68fa      	ldr	r2, [r7, #12]
 8012ddc:	8b12      	ldrh	r2, [r2, #24]
 8012dde:	441a      	add	r2, r3
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	61da      	str	r2, [r3, #28]
 8012de4:	e002      	b.n	8012dec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2200      	movs	r2, #0
 8012dea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d004      	beq.n	8012dfe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2201      	movs	r2, #1
 8012df8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012dfc:	e006      	b.n	8012e0c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	2200      	movs	r2, #0
 8012e02:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8012e06:	6878      	ldr	r0, [r7, #4]
 8012e08:	f000 f87a 	bl	8012f00 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	2200      	movs	r2, #0
 8012e10:	2104      	movs	r1, #4
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f000 feb6 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8012e18:	e00c      	b.n	8012e34 <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012e1a:	7afb      	ldrb	r3, [r7, #11]
 8012e1c:	2b02      	cmp	r3, #2
 8012e1e:	d109      	bne.n	8012e34 <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	2201      	movs	r2, #1
 8012e24:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012e28:	2300      	movs	r3, #0
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	2104      	movs	r1, #4
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f000 fea8 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8012e34:	bf00      	nop
  }
}
 8012e36:	bf00      	nop
 8012e38:	3710      	adds	r7, #16
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8012e3e:	b580      	push	{r7, lr}
 8012e40:	b086      	sub	sp, #24
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012e4c:	69db      	ldr	r3, [r3, #28]
 8012e4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8012e50:	2300      	movs	r3, #0
 8012e52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8012e5a:	2b03      	cmp	r3, #3
 8012e5c:	d002      	beq.n	8012e64 <CDC_ProcessReception+0x26>
 8012e5e:	2b04      	cmp	r3, #4
 8012e60:	d00e      	beq.n	8012e80 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8012e62:	e049      	b.n	8012ef8 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	6a19      	ldr	r1, [r3, #32]
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	8b5a      	ldrh	r2, [r3, #26]
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	7b1b      	ldrb	r3, [r3, #12]
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f001 fdcb 	bl	8014a0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	2204      	movs	r2, #4
 8012e7a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8012e7e:	e03b      	b.n	8012ef8 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	7b1b      	ldrb	r3, [r3, #12]
 8012e84:	4619      	mov	r1, r3
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f005 fda4 	bl	80189d4 <USBH_LL_GetURBState>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8012e90:	7cfb      	ldrb	r3, [r7, #19]
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d12f      	bne.n	8012ef6 <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8012e96:	697b      	ldr	r3, [r7, #20]
 8012e98:	7b1b      	ldrb	r3, [r3, #12]
 8012e9a:	4619      	mov	r1, r3
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f005 fd07 	bl	80188b0 <USBH_LL_GetLastXferSize>
 8012ea2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ea8:	68fa      	ldr	r2, [r7, #12]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d016      	beq.n	8012edc <CDC_ProcessReception+0x9e>
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	8b5b      	ldrh	r3, [r3, #26]
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d110      	bne.n	8012edc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	1ad2      	subs	r2, r2, r3
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	6a1a      	ldr	r2, [r3, #32]
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	441a      	add	r2, r3
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8012eda:	e006      	b.n	8012eea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f000 f815 	bl	8012f14 <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012eea:	2300      	movs	r3, #0
 8012eec:	2200      	movs	r2, #0
 8012eee:	2104      	movs	r1, #4
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f000 fe47 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8012ef6:	bf00      	nop
  }
}
 8012ef8:	bf00      	nop
 8012efa:	3718      	adds	r7, #24
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b083      	sub	sp, #12
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012f08:	bf00      	nop
 8012f0a:	370c      	adds	r7, #12
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr

08012f14 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8012f14:	b480      	push	{r7}
 8012f16:	b083      	sub	sp, #12
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012f1c:	bf00      	nop
 8012f1e:	370c      	adds	r7, #12
 8012f20:	46bd      	mov	sp, r7
 8012f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f26:	4770      	bx	lr

08012f28 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012f30:	bf00      	nop
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr

08012f3c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	60f8      	str	r0, [r7, #12]
 8012f44:	60b9      	str	r1, [r7, #8]
 8012f46:	4613      	mov	r3, r2
 8012f48:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d101      	bne.n	8012f54 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8012f50:	2302      	movs	r3, #2
 8012f52:	e044      	b.n	8012fde <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	79fa      	ldrb	r2, [r7, #7]
 8012f58:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2200      	movs	r2, #0
 8012f68:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8012f6c:	68f8      	ldr	r0, [r7, #12]
 8012f6e:	f000 f841 	bl	8012ff4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	2200      	movs	r2, #0
 8012f86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8012f92:	68bb      	ldr	r3, [r7, #8]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d003      	beq.n	8012fa0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	68ba      	ldr	r2, [r7, #8]
 8012f9c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	2104      	movs	r1, #4
 8012fa4:	2010      	movs	r0, #16
 8012fa6:	f001 ff0c 	bl	8014dc2 <osMessageQueueNew>
 8012faa:	4602      	mov	r2, r0
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8012fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8012fe8 <USBH_Init+0xac>)
 8012fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8012fec <USBH_Init+0xb0>)
 8012fb6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8012fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8012fe8 <USBH_Init+0xac>)
 8012fba:	2280      	movs	r2, #128	@ 0x80
 8012fbc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8012fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8012fe8 <USBH_Init+0xac>)
 8012fc0:	2218      	movs	r2, #24
 8012fc2:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8012fc4:	4a08      	ldr	r2, [pc, #32]	@ (8012fe8 <USBH_Init+0xac>)
 8012fc6:	68f9      	ldr	r1, [r7, #12]
 8012fc8:	4809      	ldr	r0, [pc, #36]	@ (8012ff0 <USBH_Init+0xb4>)
 8012fca:	f001 fe4d 	bl	8014c68 <osThreadNew>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012fd6:	68f8      	ldr	r0, [r7, #12]
 8012fd8:	f005 fbb0 	bl	801873c <USBH_LL_Init>

  return USBH_OK;
 8012fdc:	2300      	movs	r3, #0
}
 8012fde:	4618      	mov	r0, r3
 8012fe0:	3710      	adds	r7, #16
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	24000a54 	.word	0x24000a54
 8012fec:	08018dc8 	.word	0x08018dc8
 8012ff0:	08013bcd 	.word	0x08013bcd

08012ff4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	60fb      	str	r3, [r7, #12]
 8013000:	e009      	b.n	8013016 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	33e0      	adds	r3, #224	@ 0xe0
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	4413      	add	r3, r2
 801300c:	2200      	movs	r2, #0
 801300e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	3301      	adds	r3, #1
 8013014:	60fb      	str	r3, [r7, #12]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2b0f      	cmp	r3, #15
 801301a:	d9f2      	bls.n	8013002 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	e009      	b.n	8013036 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	4413      	add	r3, r2
 8013028:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801302c:	2200      	movs	r2, #0
 801302e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	3301      	adds	r3, #1
 8013034:	60fb      	str	r3, [r7, #12]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801303c:	d3f1      	bcc.n	8013022 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2200      	movs	r2, #0
 8013042:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2200      	movs	r2, #0
 8013048:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2201      	movs	r2, #1
 801304e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2200      	movs	r2, #0
 8013054:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2201      	movs	r2, #1
 801305c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2240      	movs	r2, #64	@ 0x40
 8013062:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2200      	movs	r2, #0
 801306e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2201      	movs	r2, #1
 8013076:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2200      	movs	r2, #0
 801307e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2200      	movs	r2, #0
 8013086:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	331c      	adds	r3, #28
 801308e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013092:	2100      	movs	r1, #0
 8013094:	4618      	mov	r0, r3
 8013096:	f005 fde7 	bl	8018c68 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80130a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130a4:	2100      	movs	r1, #0
 80130a6:	4618      	mov	r0, r3
 80130a8:	f005 fdde 	bl	8018c68 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80130b2:	2212      	movs	r2, #18
 80130b4:	2100      	movs	r1, #0
 80130b6:	4618      	mov	r0, r3
 80130b8:	f005 fdd6 	bl	8018c68 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80130c2:	223e      	movs	r2, #62	@ 0x3e
 80130c4:	2100      	movs	r1, #0
 80130c6:	4618      	mov	r0, r3
 80130c8:	f005 fdce 	bl	8018c68 <memset>

  return USBH_OK;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80130d6:	b480      	push	{r7}
 80130d8:	b085      	sub	sp, #20
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80130e0:	2300      	movs	r3, #0
 80130e2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d016      	beq.n	8013118 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d10e      	bne.n	8013112 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80130fa:	1c59      	adds	r1, r3, #1
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	33de      	adds	r3, #222	@ 0xde
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 801310c:	2300      	movs	r3, #0
 801310e:	73fb      	strb	r3, [r7, #15]
 8013110:	e004      	b.n	801311c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8013112:	2302      	movs	r3, #2
 8013114:	73fb      	strb	r3, [r7, #15]
 8013116:	e001      	b.n	801311c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8013118:	2302      	movs	r3, #2
 801311a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801311c:	7bfb      	ldrb	r3, [r7, #15]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3714      	adds	r7, #20
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801312a:	b480      	push	{r7}
 801312c:	b085      	sub	sp, #20
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
 8013132:	460b      	mov	r3, r1
 8013134:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8013136:	2300      	movs	r3, #0
 8013138:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8013140:	78fa      	ldrb	r2, [r7, #3]
 8013142:	429a      	cmp	r2, r3
 8013144:	d204      	bcs.n	8013150 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	78fa      	ldrb	r2, [r7, #3]
 801314a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 801314e:	e001      	b.n	8013154 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8013150:	2302      	movs	r3, #2
 8013152:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013154:	7bfb      	ldrb	r3, [r7, #15]
}
 8013156:	4618      	mov	r0, r3
 8013158:	3714      	adds	r7, #20
 801315a:	46bd      	mov	sp, r7
 801315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013160:	4770      	bx	lr

08013162 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8013162:	b480      	push	{r7}
 8013164:	b087      	sub	sp, #28
 8013166:	af00      	add	r7, sp, #0
 8013168:	6078      	str	r0, [r7, #4]
 801316a:	4608      	mov	r0, r1
 801316c:	4611      	mov	r1, r2
 801316e:	461a      	mov	r2, r3
 8013170:	4603      	mov	r3, r0
 8013172:	70fb      	strb	r3, [r7, #3]
 8013174:	460b      	mov	r3, r1
 8013176:	70bb      	strb	r3, [r7, #2]
 8013178:	4613      	mov	r3, r2
 801317a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 801317c:	2300      	movs	r3, #0
 801317e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8013180:	2300      	movs	r3, #0
 8013182:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 801318a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801318c:	e025      	b.n	80131da <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801318e:	7dfb      	ldrb	r3, [r7, #23]
 8013190:	221a      	movs	r2, #26
 8013192:	fb02 f303 	mul.w	r3, r2, r3
 8013196:	3308      	adds	r3, #8
 8013198:	68fa      	ldr	r2, [r7, #12]
 801319a:	4413      	add	r3, r2
 801319c:	3302      	adds	r3, #2
 801319e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80131a0:	693b      	ldr	r3, [r7, #16]
 80131a2:	795b      	ldrb	r3, [r3, #5]
 80131a4:	78fa      	ldrb	r2, [r7, #3]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d002      	beq.n	80131b0 <USBH_FindInterface+0x4e>
 80131aa:	78fb      	ldrb	r3, [r7, #3]
 80131ac:	2bff      	cmp	r3, #255	@ 0xff
 80131ae:	d111      	bne.n	80131d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80131b4:	78ba      	ldrb	r2, [r7, #2]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d002      	beq.n	80131c0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131ba:	78bb      	ldrb	r3, [r7, #2]
 80131bc:	2bff      	cmp	r3, #255	@ 0xff
 80131be:	d109      	bne.n	80131d4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80131c4:	787a      	ldrb	r2, [r7, #1]
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d002      	beq.n	80131d0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80131ca:	787b      	ldrb	r3, [r7, #1]
 80131cc:	2bff      	cmp	r3, #255	@ 0xff
 80131ce:	d101      	bne.n	80131d4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80131d0:	7dfb      	ldrb	r3, [r7, #23]
 80131d2:	e006      	b.n	80131e2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80131d4:	7dfb      	ldrb	r3, [r7, #23]
 80131d6:	3301      	adds	r3, #1
 80131d8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80131da:	7dfb      	ldrb	r3, [r7, #23]
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d9d6      	bls.n	801318e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80131e0:	23ff      	movs	r3, #255	@ 0xff
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	371c      	adds	r7, #28
 80131e6:	46bd      	mov	sp, r7
 80131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ec:	4770      	bx	lr

080131ee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80131ee:	b580      	push	{r7, lr}
 80131f0:	b082      	sub	sp, #8
 80131f2:	af00      	add	r7, sp, #0
 80131f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f005 fae2 	bl	80187c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80131fc:	2101      	movs	r1, #1
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f005 fbfb 	bl	80189fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8013204:	2300      	movs	r3, #0
}
 8013206:	4618      	mov	r0, r3
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
	...

08013210 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b088      	sub	sp, #32
 8013214:	af04      	add	r7, sp, #16
 8013216:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8013218:	2302      	movs	r3, #2
 801321a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 801321c:	2300      	movs	r3, #0
 801321e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8013226:	b2db      	uxtb	r3, r3
 8013228:	2b01      	cmp	r3, #1
 801322a:	d102      	bne.n	8013232 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2203      	movs	r2, #3
 8013230:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	b2db      	uxtb	r3, r3
 8013238:	2b0b      	cmp	r3, #11
 801323a:	f200 81f5 	bhi.w	8013628 <USBH_Process+0x418>
 801323e:	a201      	add	r2, pc, #4	@ (adr r2, 8013244 <USBH_Process+0x34>)
 8013240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013244:	08013275 	.word	0x08013275
 8013248:	080132b3 	.word	0x080132b3
 801324c:	08013329 	.word	0x08013329
 8013250:	080135b7 	.word	0x080135b7
 8013254:	08013629 	.word	0x08013629
 8013258:	080133d5 	.word	0x080133d5
 801325c:	08013551 	.word	0x08013551
 8013260:	08013417 	.word	0x08013417
 8013264:	08013443 	.word	0x08013443
 8013268:	0801346b 	.word	0x0801346b
 801326c:	080134b9 	.word	0x080134b9
 8013270:	0801359f 	.word	0x0801359f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 801327a:	b2db      	uxtb	r3, r3
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 81d5 	beq.w	801362c <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2201      	movs	r2, #1
 8013286:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8013288:	20c8      	movs	r0, #200	@ 0xc8
 801328a:	f005 fbf7 	bl	8018a7c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f005 faf3 	bl	801887a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2200      	movs	r2, #0
 8013298:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80132a4:	2300      	movs	r3, #0
 80132a6:	2200      	movs	r2, #0
 80132a8:	2101      	movs	r1, #1
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f000 fc6a 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80132b0:	e1bc      	b.n	801362c <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	2b01      	cmp	r3, #1
 80132bc:	d107      	bne.n	80132ce <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2200      	movs	r2, #0
 80132c2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2202      	movs	r2, #2
 80132ca:	701a      	strb	r2, [r3, #0]
 80132cc:	e025      	b.n	801331a <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80132d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80132d8:	d914      	bls.n	8013304 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80132e0:	3301      	adds	r3, #1
 80132e2:	b2da      	uxtb	r2, r3
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80132f0:	2b03      	cmp	r3, #3
 80132f2:	d903      	bls.n	80132fc <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	220d      	movs	r2, #13
 80132f8:	701a      	strb	r2, [r3, #0]
 80132fa:	e00e      	b.n	801331a <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	701a      	strb	r2, [r3, #0]
 8013302:	e00a      	b.n	801331a <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 801330a:	f103 020a 	add.w	r2, r3, #10
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8013314:	200a      	movs	r0, #10
 8013316:	f005 fbb1 	bl	8018a7c <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801331a:	2300      	movs	r3, #0
 801331c:	2200      	movs	r2, #0
 801331e:	2101      	movs	r1, #1
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f000 fc2f 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013326:	e188      	b.n	801363a <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801332e:	2b00      	cmp	r3, #0
 8013330:	d005      	beq.n	801333e <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013338:	2104      	movs	r1, #4
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 801333e:	2064      	movs	r0, #100	@ 0x64
 8013340:	f005 fb9c 	bl	8018a7c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f005 fa71 	bl	801882c <USBH_LL_GetSpeed>
 801334a:	4603      	mov	r3, r0
 801334c:	461a      	mov	r2, r3
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2205      	movs	r2, #5
 8013358:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 801335a:	2100      	movs	r1, #0
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f001 fba2 	bl	8014aa6 <USBH_AllocPipe>
 8013362:	4603      	mov	r3, r0
 8013364:	461a      	mov	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 801336a:	2180      	movs	r1, #128	@ 0x80
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f001 fb9a 	bl	8014aa6 <USBH_AllocPipe>
 8013372:	4603      	mov	r3, r0
 8013374:	461a      	mov	r2, r3
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	7919      	ldrb	r1, [r3, #4]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801338a:	687a      	ldr	r2, [r7, #4]
 801338c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801338e:	9202      	str	r2, [sp, #8]
 8013390:	2200      	movs	r2, #0
 8013392:	9201      	str	r2, [sp, #4]
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	4603      	mov	r3, r0
 8013398:	2280      	movs	r2, #128	@ 0x80
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f001 fb54 	bl	8014a48 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	7959      	ldrb	r1, [r3, #5]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80133b4:	9202      	str	r2, [sp, #8]
 80133b6:	2200      	movs	r2, #0
 80133b8:	9201      	str	r2, [sp, #4]
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	4603      	mov	r3, r0
 80133be:	2200      	movs	r2, #0
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f001 fb41 	bl	8014a48 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80133c6:	2300      	movs	r3, #0
 80133c8:	2200      	movs	r2, #0
 80133ca:	2101      	movs	r1, #1
 80133cc:	6878      	ldr	r0, [r7, #4]
 80133ce:	f000 fbd9 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80133d2:	e132      	b.n	801363a <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80133d4:	6878      	ldr	r0, [r7, #4]
 80133d6:	f000 f935 	bl	8013644 <USBH_HandleEnum>
 80133da:	4603      	mov	r3, r0
 80133dc:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80133de:	7bbb      	ldrb	r3, [r7, #14]
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	f040 8124 	bne.w	8013630 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d103      	bne.n	8013402 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2208      	movs	r2, #8
 80133fe:	701a      	strb	r2, [r3, #0]
 8013400:	e002      	b.n	8013408 <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2207      	movs	r2, #7
 8013406:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013408:	2300      	movs	r3, #0
 801340a:	2200      	movs	r2, #0
 801340c:	2105      	movs	r1, #5
 801340e:	6878      	ldr	r0, [r7, #4]
 8013410:	f000 fbb8 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013414:	e10c      	b.n	8013630 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801341c:	2b00      	cmp	r3, #0
 801341e:	f000 8109 	beq.w	8013634 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8013428:	2101      	movs	r1, #1
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2208      	movs	r2, #8
 8013432:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013434:	2300      	movs	r3, #0
 8013436:	2200      	movs	r2, #0
 8013438:	2105      	movs	r1, #5
 801343a:	6878      	ldr	r0, [r7, #4]
 801343c:	f000 fba2 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8013440:	e0f8      	b.n	8013634 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 fcc7 	bl	8013dde <USBH_SetCfg>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d102      	bne.n	801345c <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2209      	movs	r2, #9
 801345a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801345c:	2300      	movs	r3, #0
 801345e:	2200      	movs	r2, #0
 8013460:	2101      	movs	r1, #1
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	f000 fb8e 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013468:	e0e7      	b.n	801363a <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8013470:	f003 0320 	and.w	r3, r3, #32
 8013474:	2b00      	cmp	r3, #0
 8013476:	d015      	beq.n	80134a4 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8013478:	2101      	movs	r1, #1
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fcd2 	bl	8013e24 <USBH_SetFeature>
 8013480:	4603      	mov	r3, r0
 8013482:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8013484:	7bbb      	ldrb	r3, [r7, #14]
 8013486:	b2db      	uxtb	r3, r3
 8013488:	2b00      	cmp	r3, #0
 801348a:	d103      	bne.n	8013494 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	220a      	movs	r2, #10
 8013490:	701a      	strb	r2, [r3, #0]
 8013492:	e00a      	b.n	80134aa <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8013494:	7bbb      	ldrb	r3, [r7, #14]
 8013496:	b2db      	uxtb	r3, r3
 8013498:	2b03      	cmp	r3, #3
 801349a:	d106      	bne.n	80134aa <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	220a      	movs	r2, #10
 80134a0:	701a      	strb	r2, [r3, #0]
 80134a2:	e002      	b.n	80134aa <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	220a      	movs	r2, #10
 80134a8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80134aa:	2300      	movs	r3, #0
 80134ac:	2200      	movs	r2, #0
 80134ae:	2101      	movs	r1, #1
 80134b0:	6878      	ldr	r0, [r7, #4]
 80134b2:	f000 fb67 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 80134b6:	e0c0      	b.n	801363a <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d03f      	beq.n	8013542 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	2200      	movs	r2, #0
 80134c6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80134ca:	2300      	movs	r3, #0
 80134cc:	73fb      	strb	r3, [r7, #15]
 80134ce:	e016      	b.n	80134fe <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80134d0:	7bfa      	ldrb	r2, [r7, #15]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	32de      	adds	r2, #222	@ 0xde
 80134d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134da:	791a      	ldrb	r2, [r3, #4]
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d108      	bne.n	80134f8 <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 80134e6:	7bfa      	ldrb	r2, [r7, #15]
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	32de      	adds	r2, #222	@ 0xde
 80134ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80134f6:	e005      	b.n	8013504 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80134f8:	7bfb      	ldrb	r3, [r7, #15]
 80134fa:	3301      	adds	r3, #1
 80134fc:	73fb      	strb	r3, [r7, #15]
 80134fe:	7bfb      	ldrb	r3, [r7, #15]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d0e5      	beq.n	80134d0 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801350a:	2b00      	cmp	r3, #0
 801350c:	d016      	beq.n	801353c <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013514:	689b      	ldr	r3, [r3, #8]
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	4798      	blx	r3
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d109      	bne.n	8013534 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2206      	movs	r2, #6
 8013524:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801352c:	2103      	movs	r1, #3
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	4798      	blx	r3
 8013532:	e006      	b.n	8013542 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	220d      	movs	r2, #13
 8013538:	701a      	strb	r2, [r3, #0]
 801353a:	e002      	b.n	8013542 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	220d      	movs	r2, #13
 8013540:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013542:	2300      	movs	r3, #0
 8013544:	2200      	movs	r2, #0
 8013546:	2105      	movs	r1, #5
 8013548:	6878      	ldr	r0, [r7, #4]
 801354a:	f000 fb1b 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801354e:	e074      	b.n	801363a <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013556:	2b00      	cmp	r3, #0
 8013558:	d017      	beq.n	801358a <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	4798      	blx	r3
 8013566:	4603      	mov	r3, r0
 8013568:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 801356a:	7bbb      	ldrb	r3, [r7, #14]
 801356c:	b2db      	uxtb	r3, r3
 801356e:	2b00      	cmp	r3, #0
 8013570:	d103      	bne.n	801357a <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	220b      	movs	r2, #11
 8013576:	701a      	strb	r2, [r3, #0]
 8013578:	e00a      	b.n	8013590 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 801357a:	7bbb      	ldrb	r3, [r7, #14]
 801357c:	b2db      	uxtb	r3, r3
 801357e:	2b02      	cmp	r3, #2
 8013580:	d106      	bne.n	8013590 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	220d      	movs	r2, #13
 8013586:	701a      	strb	r2, [r3, #0]
 8013588:	e002      	b.n	8013590 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	220d      	movs	r2, #13
 801358e:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013590:	2300      	movs	r3, #0
 8013592:	2200      	movs	r2, #0
 8013594:	2105      	movs	r1, #5
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f000 faf4 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 801359c:	e04d      	b.n	801363a <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d047      	beq.n	8013638 <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80135ae:	695b      	ldr	r3, [r3, #20]
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	4798      	blx	r3
      }
      break;
 80135b4:	e040      	b.n	8013638 <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	2200      	movs	r2, #0
 80135ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7ff fd18 	bl	8012ff4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d009      	beq.n	80135e2 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80135d4:	68db      	ldr	r3, [r3, #12]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2200      	movs	r2, #0
 80135de:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80135f2:	2105      	movs	r1, #5
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80135fe:	b2db      	uxtb	r3, r3
 8013600:	2b01      	cmp	r3, #1
 8013602:	d107      	bne.n	8013614 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2200      	movs	r2, #0
 8013608:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7ff fdee 	bl	80131ee <USBH_Start>
 8013612:	e002      	b.n	801361a <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f005 f8d3 	bl	80187c0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801361a:	2300      	movs	r3, #0
 801361c:	2200      	movs	r2, #0
 801361e:	2101      	movs	r1, #1
 8013620:	6878      	ldr	r0, [r7, #4]
 8013622:	f000 faaf 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8013626:	e008      	b.n	801363a <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8013628:	bf00      	nop
 801362a:	e006      	b.n	801363a <USBH_Process+0x42a>
      break;
 801362c:	bf00      	nop
 801362e:	e004      	b.n	801363a <USBH_Process+0x42a>
      break;
 8013630:	bf00      	nop
 8013632:	e002      	b.n	801363a <USBH_Process+0x42a>
    break;
 8013634:	bf00      	nop
 8013636:	e000      	b.n	801363a <USBH_Process+0x42a>
      break;
 8013638:	bf00      	nop
  }
  return USBH_OK;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3710      	adds	r7, #16
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b088      	sub	sp, #32
 8013648:	af04      	add	r7, sp, #16
 801364a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801364c:	2301      	movs	r3, #1
 801364e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8013650:	2301      	movs	r3, #1
 8013652:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	785b      	ldrb	r3, [r3, #1]
 8013658:	2b07      	cmp	r3, #7
 801365a:	f200 81db 	bhi.w	8013a14 <USBH_HandleEnum+0x3d0>
 801365e:	a201      	add	r2, pc, #4	@ (adr r2, 8013664 <USBH_HandleEnum+0x20>)
 8013660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013664:	08013685 	.word	0x08013685
 8013668:	0801373f 	.word	0x0801373f
 801366c:	080137a9 	.word	0x080137a9
 8013670:	08013833 	.word	0x08013833
 8013674:	0801389d 	.word	0x0801389d
 8013678:	0801390d 	.word	0x0801390d
 801367c:	08013977 	.word	0x08013977
 8013680:	080139d5 	.word	0x080139d5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8013684:	2108      	movs	r1, #8
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f000 fac6 	bl	8013c18 <USBH_Get_DevDesc>
 801368c:	4603      	mov	r3, r0
 801368e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013690:	7bbb      	ldrb	r3, [r7, #14]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d12e      	bne.n	80136f4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	7919      	ldrb	r1, [r3, #4]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80136ba:	9202      	str	r2, [sp, #8]
 80136bc:	2200      	movs	r2, #0
 80136be:	9201      	str	r2, [sp, #4]
 80136c0:	9300      	str	r3, [sp, #0]
 80136c2:	4603      	mov	r3, r0
 80136c4:	2280      	movs	r2, #128	@ 0x80
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f001 f9be 	bl	8014a48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7959      	ldrb	r1, [r3, #5]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80136e0:	9202      	str	r2, [sp, #8]
 80136e2:	2200      	movs	r2, #0
 80136e4:	9201      	str	r2, [sp, #4]
 80136e6:	9300      	str	r3, [sp, #0]
 80136e8:	4603      	mov	r3, r0
 80136ea:	2200      	movs	r2, #0
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f001 f9ab 	bl	8014a48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80136f2:	e191      	b.n	8013a18 <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80136f4:	7bbb      	ldrb	r3, [r7, #14]
 80136f6:	2b03      	cmp	r3, #3
 80136f8:	f040 818e 	bne.w	8013a18 <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013702:	3301      	adds	r3, #1
 8013704:	b2da      	uxtb	r2, r3
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013712:	2b03      	cmp	r3, #3
 8013714:	d903      	bls.n	801371e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	220d      	movs	r2, #13
 801371a:	701a      	strb	r2, [r3, #0]
      break;
 801371c:	e17c      	b.n	8013a18 <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	795b      	ldrb	r3, [r3, #5]
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f001 f9df 	bl	8014ae8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	791b      	ldrb	r3, [r3, #4]
 801372e:	4619      	mov	r1, r3
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f001 f9d9 	bl	8014ae8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2200      	movs	r2, #0
 801373a:	701a      	strb	r2, [r3, #0]
      break;
 801373c:	e16c      	b.n	8013a18 <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801373e:	2112      	movs	r1, #18
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f000 fa69 	bl	8013c18 <USBH_Get_DevDesc>
 8013746:	4603      	mov	r3, r0
 8013748:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801374a:	7bbb      	ldrb	r3, [r7, #14]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d103      	bne.n	8013758 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2202      	movs	r2, #2
 8013754:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8013756:	e161      	b.n	8013a1c <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013758:	7bbb      	ldrb	r3, [r7, #14]
 801375a:	2b03      	cmp	r3, #3
 801375c:	f040 815e 	bne.w	8013a1c <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013766:	3301      	adds	r3, #1
 8013768:	b2da      	uxtb	r2, r3
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8013776:	2b03      	cmp	r3, #3
 8013778:	d903      	bls.n	8013782 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	220d      	movs	r2, #13
 801377e:	701a      	strb	r2, [r3, #0]
      break;
 8013780:	e14c      	b.n	8013a1c <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	795b      	ldrb	r3, [r3, #5]
 8013786:	4619      	mov	r1, r3
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f001 f9ad 	bl	8014ae8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	791b      	ldrb	r3, [r3, #4]
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f001 f9a7 	bl	8014ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2200      	movs	r2, #0
 80137a4:	701a      	strb	r2, [r3, #0]
      break;
 80137a6:	e139      	b.n	8013a1c <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80137a8:	2101      	movs	r1, #1
 80137aa:	6878      	ldr	r0, [r7, #4]
 80137ac:	f000 faf3 	bl	8013d96 <USBH_SetAddress>
 80137b0:	4603      	mov	r3, r0
 80137b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80137b4:	7bbb      	ldrb	r3, [r7, #14]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d130      	bne.n	801381c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80137ba:	2002      	movs	r0, #2
 80137bc:	f005 f95e 	bl	8018a7c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2201      	movs	r2, #1
 80137c4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2203      	movs	r2, #3
 80137cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	7919      	ldrb	r1, [r3, #4]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80137e2:	9202      	str	r2, [sp, #8]
 80137e4:	2200      	movs	r2, #0
 80137e6:	9201      	str	r2, [sp, #4]
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	4603      	mov	r3, r0
 80137ec:	2280      	movs	r2, #128	@ 0x80
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f001 f92a 	bl	8014a48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	7959      	ldrb	r1, [r3, #5]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8013804:	687a      	ldr	r2, [r7, #4]
 8013806:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8013808:	9202      	str	r2, [sp, #8]
 801380a:	2200      	movs	r2, #0
 801380c:	9201      	str	r2, [sp, #4]
 801380e:	9300      	str	r3, [sp, #0]
 8013810:	4603      	mov	r3, r0
 8013812:	2200      	movs	r2, #0
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f001 f917 	bl	8014a48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801381a:	e101      	b.n	8013a20 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801381c:	7bbb      	ldrb	r3, [r7, #14]
 801381e:	2b03      	cmp	r3, #3
 8013820:	f040 80fe 	bne.w	8013a20 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	220d      	movs	r2, #13
 8013828:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2200      	movs	r2, #0
 801382e:	705a      	strb	r2, [r3, #1]
      break;
 8013830:	e0f6      	b.n	8013a20 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8013832:	2109      	movs	r1, #9
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f000 fa1b 	bl	8013c70 <USBH_Get_CfgDesc>
 801383a:	4603      	mov	r3, r0
 801383c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801383e:	7bbb      	ldrb	r3, [r7, #14]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d103      	bne.n	801384c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2204      	movs	r2, #4
 8013848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801384a:	e0eb      	b.n	8013a24 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801384c:	7bbb      	ldrb	r3, [r7, #14]
 801384e:	2b03      	cmp	r3, #3
 8013850:	f040 80e8 	bne.w	8013a24 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801385a:	3301      	adds	r3, #1
 801385c:	b2da      	uxtb	r2, r3
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801386a:	2b03      	cmp	r3, #3
 801386c:	d903      	bls.n	8013876 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	220d      	movs	r2, #13
 8013872:	701a      	strb	r2, [r3, #0]
      break;
 8013874:	e0d6      	b.n	8013a24 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	795b      	ldrb	r3, [r3, #5]
 801387a:	4619      	mov	r1, r3
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f001 f933 	bl	8014ae8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	791b      	ldrb	r3, [r3, #4]
 8013886:	4619      	mov	r1, r3
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f001 f92d 	bl	8014ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	2200      	movs	r2, #0
 8013892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2200      	movs	r2, #0
 8013898:	701a      	strb	r2, [r3, #0]
      break;
 801389a:	e0c3      	b.n	8013a24 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80138a2:	4619      	mov	r1, r3
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f000 f9e3 	bl	8013c70 <USBH_Get_CfgDesc>
 80138aa:	4603      	mov	r3, r0
 80138ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80138ae:	7bbb      	ldrb	r3, [r7, #14]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d103      	bne.n	80138bc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2205      	movs	r2, #5
 80138b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80138ba:	e0b5      	b.n	8013a28 <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80138bc:	7bbb      	ldrb	r3, [r7, #14]
 80138be:	2b03      	cmp	r3, #3
 80138c0:	f040 80b2 	bne.w	8013a28 <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138ca:	3301      	adds	r3, #1
 80138cc:	b2da      	uxtb	r2, r3
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80138da:	2b03      	cmp	r3, #3
 80138dc:	d903      	bls.n	80138e6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	220d      	movs	r2, #13
 80138e2:	701a      	strb	r2, [r3, #0]
      break;
 80138e4:	e0a0      	b.n	8013a28 <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	795b      	ldrb	r3, [r3, #5]
 80138ea:	4619      	mov	r1, r3
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f001 f8fb 	bl	8014ae8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	791b      	ldrb	r3, [r3, #4]
 80138f6:	4619      	mov	r1, r3
 80138f8:	6878      	ldr	r0, [r7, #4]
 80138fa:	f001 f8f5 	bl	8014ae8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2200      	movs	r2, #0
 8013902:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	701a      	strb	r2, [r3, #0]
      break;
 801390a:	e08d      	b.n	8013a28 <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8013912:	2b00      	cmp	r3, #0
 8013914:	d025      	beq.n	8013962 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013922:	23ff      	movs	r3, #255	@ 0xff
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 f9cd 	bl	8013cc4 <USBH_Get_StringDesc>
 801392a:	4603      	mov	r3, r0
 801392c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801392e:	7bbb      	ldrb	r3, [r7, #14]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d109      	bne.n	8013948 <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2206      	movs	r2, #6
 8013938:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801393a:	2300      	movs	r3, #0
 801393c:	2200      	movs	r2, #0
 801393e:	2105      	movs	r1, #5
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f000 f91f 	bl	8013b84 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013946:	e071      	b.n	8013a2c <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013948:	7bbb      	ldrb	r3, [r7, #14]
 801394a:	2b03      	cmp	r3, #3
 801394c:	d16e      	bne.n	8013a2c <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	2206      	movs	r2, #6
 8013952:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013954:	2300      	movs	r3, #0
 8013956:	2200      	movs	r2, #0
 8013958:	2105      	movs	r1, #5
 801395a:	6878      	ldr	r0, [r7, #4]
 801395c:	f000 f912 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8013960:	e064      	b.n	8013a2c <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	2206      	movs	r2, #6
 8013966:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013968:	2300      	movs	r3, #0
 801396a:	2200      	movs	r2, #0
 801396c:	2105      	movs	r1, #5
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f000 f908 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8013974:	e05a      	b.n	8013a2c <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 801397c:	2b00      	cmp	r3, #0
 801397e:	d01f      	beq.n	80139c0 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 801398c:	23ff      	movs	r3, #255	@ 0xff
 801398e:	6878      	ldr	r0, [r7, #4]
 8013990:	f000 f998 	bl	8013cc4 <USBH_Get_StringDesc>
 8013994:	4603      	mov	r3, r0
 8013996:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8013998:	7bbb      	ldrb	r3, [r7, #14]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d103      	bne.n	80139a6 <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2207      	movs	r2, #7
 80139a2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80139a4:	e044      	b.n	8013a30 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80139a6:	7bbb      	ldrb	r3, [r7, #14]
 80139a8:	2b03      	cmp	r3, #3
 80139aa:	d141      	bne.n	8013a30 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2207      	movs	r2, #7
 80139b0:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80139b2:	2300      	movs	r3, #0
 80139b4:	2200      	movs	r2, #0
 80139b6:	2105      	movs	r1, #5
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f000 f8e3 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 80139be:	e037      	b.n	8013a30 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2207      	movs	r2, #7
 80139c4:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80139c6:	2300      	movs	r3, #0
 80139c8:	2200      	movs	r2, #0
 80139ca:	2105      	movs	r1, #5
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f000 f8d9 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 80139d2:	e02d      	b.n	8013a30 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d017      	beq.n	8013a0e <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80139ea:	23ff      	movs	r3, #255	@ 0xff
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f969 	bl	8013cc4 <USBH_Get_StringDesc>
 80139f2:	4603      	mov	r3, r0
 80139f4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80139f6:	7bbb      	ldrb	r3, [r7, #14]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d102      	bne.n	8013a02 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80139fc:	2300      	movs	r3, #0
 80139fe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013a00:	e018      	b.n	8013a34 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
 8013a04:	2b03      	cmp	r3, #3
 8013a06:	d115      	bne.n	8013a34 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a0c:	e012      	b.n	8013a34 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	73fb      	strb	r3, [r7, #15]
      break;
 8013a12:	e00f      	b.n	8013a34 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8013a14:	bf00      	nop
 8013a16:	e00e      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a18:	bf00      	nop
 8013a1a:	e00c      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a1c:	bf00      	nop
 8013a1e:	e00a      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a20:	bf00      	nop
 8013a22:	e008      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a24:	bf00      	nop
 8013a26:	e006      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a28:	bf00      	nop
 8013a2a:	e004      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a2c:	bf00      	nop
 8013a2e:	e002      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a30:	bf00      	nop
 8013a32:	e000      	b.n	8013a36 <USBH_HandleEnum+0x3f2>
      break;
 8013a34:	bf00      	nop
  }
  return Status;
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3710      	adds	r7, #16
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8013a52:	bf00      	nop
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b082      	sub	sp, #8
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 f804 	bl	8013a82 <USBH_HandleSof>
}
 8013a7a:	bf00      	nop
 8013a7c:	3708      	adds	r7, #8
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b082      	sub	sp, #8
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	781b      	ldrb	r3, [r3, #0]
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	2b0b      	cmp	r3, #11
 8013a92:	d10a      	bne.n	8013aaa <USBH_HandleSof+0x28>
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d005      	beq.n	8013aaa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013aa4:	699b      	ldr	r3, [r3, #24]
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	4798      	blx	r3
  }
}
 8013aaa:	bf00      	nop
 8013aac:	3708      	adds	r7, #8
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b082      	sub	sp, #8
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2201      	movs	r2, #1
 8013abe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	2101      	movs	r1, #1
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 f85b 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8013ace:	bf00      	nop
}
 8013ad0:	3708      	adds	r7, #8
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	bd80      	pop	{r7, pc}

08013ad6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8013ad6:	b480      	push	{r7}
 8013ad8:	b083      	sub	sp, #12
 8013ada:	af00      	add	r7, sp, #0
 8013adc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2201      	movs	r2, #1
 8013aea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8013aee:	bf00      	nop
}
 8013af0:	370c      	adds	r7, #12
 8013af2:	46bd      	mov	sp, r7
 8013af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013af8:	4770      	bx	lr

08013afa <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8013afa:	b580      	push	{r7, lr}
 8013afc:	b082      	sub	sp, #8
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2200      	movs	r2, #0
 8013b16:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	2101      	movs	r1, #1
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f000 f82f 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3708      	adds	r7, #8
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2200      	movs	r2, #0
 8013b44:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f004 fe50 	bl	80187f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	791b      	ldrb	r3, [r3, #4]
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f000 ffc3 	bl	8014ae8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	795b      	ldrb	r3, [r3, #5]
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 ffbd 	bl	8014ae8 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013b6e:	2300      	movs	r3, #0
 8013b70:	2200      	movs	r2, #0
 8013b72:	2101      	movs	r1, #1
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f000 f805 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013b7a:	2300      	movs	r3, #0
}
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	3708      	adds	r7, #8
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	60f8      	str	r0, [r7, #12]
 8013b8c:	607a      	str	r2, [r7, #4]
 8013b8e:	603b      	str	r3, [r7, #0]
 8013b90:	460b      	mov	r3, r1
 8013b92:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8013b94:	7afa      	ldrb	r2, [r7, #11]
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
  if (available_spaces != 0U)
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
  }
#else
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f001 fa3e 	bl	8015024 <osMessageQueueGetSpace>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d00a      	beq.n	8013bc4 <USBH_OS_PutMessage+0x40>
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	b2da      	uxtb	r2, r3
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f001 f972 	bl	8014ea8 <osMessageQueuePut>
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8013bc4:	bf00      	nop
 8013bc6:	3710      	adds	r7, #16
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8013be0:	f04f 33ff 	mov.w	r3, #4294967295
 8013be4:	2200      	movs	r2, #0
 8013be6:	f001 f9bf 	bl	8014f68 <osMessageQueueGet>
 8013bea:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d1f0      	bne.n	8013bd4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff fb0c 	bl	8013210 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8013bf8:	e7ec      	b.n	8013bd4 <USBH_Process_OS+0x8>

08013bfa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b082      	sub	sp, #8
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013c02:	2300      	movs	r3, #0
 8013c04:	2200      	movs	r2, #0
 8013c06:	2101      	movs	r1, #1
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f7ff ffbb 	bl	8013b84 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013c0e:	2300      	movs	r3, #0
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af02      	add	r7, sp, #8
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	460b      	mov	r3, r1
 8013c22:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8013c24:	887b      	ldrh	r3, [r7, #2]
 8013c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c2a:	d901      	bls.n	8013c30 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013c2c:	2303      	movs	r3, #3
 8013c2e:	e01b      	b.n	8013c68 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013c36:	887b      	ldrh	r3, [r7, #2]
 8013c38:	9300      	str	r3, [sp, #0]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c40:	2100      	movs	r1, #0
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 f872 	bl	8013d2c <USBH_GetDescriptor>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8013c4c:	7bfb      	ldrb	r3, [r7, #15]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d109      	bne.n	8013c66 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013c58:	887a      	ldrh	r2, [r7, #2]
 8013c5a:	4619      	mov	r1, r3
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f000 f929 	bl	8013eb4 <USBH_ParseDevDesc>
 8013c62:	4603      	mov	r3, r0
 8013c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	3710      	adds	r7, #16
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bd80      	pop	{r7, pc}

08013c70 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b086      	sub	sp, #24
 8013c74:	af02      	add	r7, sp, #8
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	460b      	mov	r3, r1
 8013c7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	331c      	adds	r3, #28
 8013c80:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8013c82:	887b      	ldrh	r3, [r7, #2]
 8013c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c88:	d901      	bls.n	8013c8e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013c8a:	2303      	movs	r3, #3
 8013c8c:	e016      	b.n	8013cbc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013c8e:	887b      	ldrh	r3, [r7, #2]
 8013c90:	9300      	str	r3, [sp, #0]
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c98:	2100      	movs	r1, #0
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 f846 	bl	8013d2c <USBH_GetDescriptor>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8013ca4:	7bfb      	ldrb	r3, [r7, #15]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d107      	bne.n	8013cba <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013caa:	887b      	ldrh	r3, [r7, #2]
 8013cac:	461a      	mov	r2, r3
 8013cae:	68b9      	ldr	r1, [r7, #8]
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 f9af 	bl	8014014 <USBH_ParseCfgDesc>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3710      	adds	r7, #16
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b088      	sub	sp, #32
 8013cc8:	af02      	add	r7, sp, #8
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	607a      	str	r2, [r7, #4]
 8013cce:	461a      	mov	r2, r3
 8013cd0:	460b      	mov	r3, r1
 8013cd2:	72fb      	strb	r3, [r7, #11]
 8013cd4:	4613      	mov	r3, r2
 8013cd6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8013cd8:	893b      	ldrh	r3, [r7, #8]
 8013cda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013cde:	d802      	bhi.n	8013ce6 <USBH_Get_StringDesc+0x22>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d101      	bne.n	8013cea <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013ce6:	2303      	movs	r3, #3
 8013ce8:	e01c      	b.n	8013d24 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013cea:	7afb      	ldrb	r3, [r7, #11]
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013cf2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013cfa:	893b      	ldrh	r3, [r7, #8]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	460b      	mov	r3, r1
 8013d00:	2100      	movs	r1, #0
 8013d02:	68f8      	ldr	r0, [r7, #12]
 8013d04:	f000 f812 	bl	8013d2c <USBH_GetDescriptor>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013d0c:	7dfb      	ldrb	r3, [r7, #23]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d107      	bne.n	8013d22 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8013d18:	893a      	ldrh	r2, [r7, #8]
 8013d1a:	6879      	ldr	r1, [r7, #4]
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f000 fb8c 	bl	801443a <USBH_ParseStringDesc>
  }

  return status;
 8013d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3718      	adds	r7, #24
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	607b      	str	r3, [r7, #4]
 8013d36:	460b      	mov	r3, r1
 8013d38:	72fb      	strb	r3, [r7, #11]
 8013d3a:	4613      	mov	r3, r2
 8013d3c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	789b      	ldrb	r3, [r3, #2]
 8013d42:	2b01      	cmp	r3, #1
 8013d44:	d11c      	bne.n	8013d80 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8013d46:	7afb      	ldrb	r3, [r7, #11]
 8013d48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013d4c:	b2da      	uxtb	r2, r3
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	2206      	movs	r2, #6
 8013d56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	893a      	ldrh	r2, [r7, #8]
 8013d5c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8013d5e:	893b      	ldrh	r3, [r7, #8]
 8013d60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013d64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013d68:	d104      	bne.n	8013d74 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f240 4209 	movw	r2, #1033	@ 0x409
 8013d70:	829a      	strh	r2, [r3, #20]
 8013d72:	e002      	b.n	8013d7a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2200      	movs	r2, #0
 8013d78:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	8b3a      	ldrh	r2, [r7, #24]
 8013d7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8013d80:	8b3b      	ldrh	r3, [r7, #24]
 8013d82:	461a      	mov	r2, r3
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	68f8      	ldr	r0, [r7, #12]
 8013d88:	f000 fba4 	bl	80144d4 <USBH_CtlReq>
 8013d8c:	4603      	mov	r3, r0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3710      	adds	r7, #16
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}

08013d96 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8013d96:	b580      	push	{r7, lr}
 8013d98:	b082      	sub	sp, #8
 8013d9a:	af00      	add	r7, sp, #0
 8013d9c:	6078      	str	r0, [r7, #4]
 8013d9e:	460b      	mov	r3, r1
 8013da0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	789b      	ldrb	r3, [r3, #2]
 8013da6:	2b01      	cmp	r3, #1
 8013da8:	d10f      	bne.n	8013dca <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2200      	movs	r2, #0
 8013dae:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	2205      	movs	r2, #5
 8013db4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8013db6:	78fb      	ldrb	r3, [r7, #3]
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013dca:	2200      	movs	r2, #0
 8013dcc:	2100      	movs	r1, #0
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f000 fb80 	bl	80144d4 <USBH_CtlReq>
 8013dd4:	4603      	mov	r3, r0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b082      	sub	sp, #8
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
 8013de6:	460b      	mov	r3, r1
 8013de8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	789b      	ldrb	r3, [r3, #2]
 8013dee:	2b01      	cmp	r3, #1
 8013df0:	d10e      	bne.n	8013e10 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2200      	movs	r2, #0
 8013df6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2209      	movs	r2, #9
 8013dfc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	887a      	ldrh	r2, [r7, #2]
 8013e02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013e10:	2200      	movs	r2, #0
 8013e12:	2100      	movs	r1, #0
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f000 fb5d 	bl	80144d4 <USBH_CtlReq>
 8013e1a:	4603      	mov	r3, r0
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3708      	adds	r7, #8
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	789b      	ldrb	r3, [r3, #2]
 8013e34:	2b01      	cmp	r3, #1
 8013e36:	d10f      	bne.n	8013e58 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2203      	movs	r2, #3
 8013e42:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8013e44:	78fb      	ldrb	r3, [r7, #3]
 8013e46:	b29a      	uxth	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2200      	movs	r2, #0
 8013e56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013e58:	2200      	movs	r2, #0
 8013e5a:	2100      	movs	r1, #0
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 fb39 	bl	80144d4 <USBH_CtlReq>
 8013e62:	4603      	mov	r3, r0
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	789b      	ldrb	r3, [r3, #2]
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	d10f      	bne.n	8013ea0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2202      	movs	r2, #2
 8013e84:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2201      	movs	r2, #1
 8013e8a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013e92:	78fb      	ldrb	r3, [r7, #3]
 8013e94:	b29a      	uxth	r2, r3
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	2100      	movs	r1, #0
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 fb15 	bl	80144d4 <USBH_CtlReq>
 8013eaa:	4603      	mov	r3, r0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8013eb4:	b480      	push	{r7}
 8013eb6:	b087      	sub	sp, #28
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013ec8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8013eca:	2300      	movs	r3, #0
 8013ecc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d101      	bne.n	8013ed8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8013ed4:	2302      	movs	r3, #2
 8013ed6:	e094      	b.n	8014002 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	781a      	ldrb	r2, [r3, #0]
 8013edc:	693b      	ldr	r3, [r7, #16]
 8013ede:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	785a      	ldrb	r2, [r3, #1]
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8013ee8:	68bb      	ldr	r3, [r7, #8]
 8013eea:	3302      	adds	r3, #2
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	68bb      	ldr	r3, [r7, #8]
 8013ef2:	3303      	adds	r3, #3
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	021b      	lsls	r3, r3, #8
 8013ef8:	b29b      	uxth	r3, r3
 8013efa:	4313      	orrs	r3, r2
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	791a      	ldrb	r2, [r3, #4]
 8013f06:	693b      	ldr	r3, [r7, #16]
 8013f08:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	795a      	ldrb	r2, [r3, #5]
 8013f0e:	693b      	ldr	r3, [r7, #16]
 8013f10:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	799a      	ldrb	r2, [r3, #6]
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	79da      	ldrb	r2, [r3, #7]
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d004      	beq.n	8013f36 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8013f32:	2b01      	cmp	r3, #1
 8013f34:	d11b      	bne.n	8013f6e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	79db      	ldrb	r3, [r3, #7]
 8013f3a:	2b20      	cmp	r3, #32
 8013f3c:	dc0f      	bgt.n	8013f5e <USBH_ParseDevDesc+0xaa>
 8013f3e:	2b08      	cmp	r3, #8
 8013f40:	db0f      	blt.n	8013f62 <USBH_ParseDevDesc+0xae>
 8013f42:	3b08      	subs	r3, #8
 8013f44:	4a32      	ldr	r2, [pc, #200]	@ (8014010 <USBH_ParseDevDesc+0x15c>)
 8013f46:	fa22 f303 	lsr.w	r3, r2, r3
 8013f4a:	f003 0301 	and.w	r3, r3, #1
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	bf14      	ite	ne
 8013f52:	2301      	movne	r3, #1
 8013f54:	2300      	moveq	r3, #0
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d106      	bne.n	8013f6a <USBH_ParseDevDesc+0xb6>
 8013f5c:	e001      	b.n	8013f62 <USBH_ParseDevDesc+0xae>
 8013f5e:	2b40      	cmp	r3, #64	@ 0x40
 8013f60:	d003      	beq.n	8013f6a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	2208      	movs	r2, #8
 8013f66:	71da      	strb	r2, [r3, #7]
        break;
 8013f68:	e000      	b.n	8013f6c <USBH_ParseDevDesc+0xb8>
        break;
 8013f6a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8013f6c:	e00e      	b.n	8013f8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013f74:	2b02      	cmp	r3, #2
 8013f76:	d107      	bne.n	8013f88 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	79db      	ldrb	r3, [r3, #7]
 8013f7c:	2b08      	cmp	r3, #8
 8013f7e:	d005      	beq.n	8013f8c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	2208      	movs	r2, #8
 8013f84:	71da      	strb	r2, [r3, #7]
 8013f86:	e001      	b.n	8013f8c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013f88:	2303      	movs	r3, #3
 8013f8a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8013f8c:	88fb      	ldrh	r3, [r7, #6]
 8013f8e:	2b08      	cmp	r3, #8
 8013f90:	d936      	bls.n	8014000 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	3308      	adds	r3, #8
 8013f96:	781b      	ldrb	r3, [r3, #0]
 8013f98:	461a      	mov	r2, r3
 8013f9a:	68bb      	ldr	r3, [r7, #8]
 8013f9c:	3309      	adds	r3, #9
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	021b      	lsls	r3, r3, #8
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8013fac:	68bb      	ldr	r3, [r7, #8]
 8013fae:	330a      	adds	r3, #10
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	330b      	adds	r3, #11
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	021b      	lsls	r3, r3, #8
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	4313      	orrs	r3, r2
 8013fc0:	b29a      	uxth	r2, r3
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	330c      	adds	r3, #12
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	461a      	mov	r2, r3
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	330d      	adds	r3, #13
 8013fd2:	781b      	ldrb	r3, [r3, #0]
 8013fd4:	021b      	lsls	r3, r3, #8
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	4313      	orrs	r3, r2
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013fe0:	68bb      	ldr	r3, [r7, #8]
 8013fe2:	7b9a      	ldrb	r2, [r3, #14]
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	7bda      	ldrb	r2, [r3, #15]
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	7c1a      	ldrb	r2, [r3, #16]
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	7c5a      	ldrb	r2, [r3, #17]
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8014000:	7dfb      	ldrb	r3, [r7, #23]
}
 8014002:	4618      	mov	r0, r3
 8014004:	371c      	adds	r7, #28
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr
 801400e:	bf00      	nop
 8014010:	01000101 	.word	0x01000101

08014014 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b08c      	sub	sp, #48	@ 0x30
 8014018:	af00      	add	r7, sp, #0
 801401a:	60f8      	str	r0, [r7, #12]
 801401c:	60b9      	str	r1, [r7, #8]
 801401e:	4613      	mov	r3, r2
 8014020:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8014028:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801402a:	2300      	movs	r3, #0
 801402c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8014030:	2300      	movs	r3, #0
 8014032:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8014036:	2300      	movs	r3, #0
 8014038:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d101      	bne.n	8014046 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8014042:	2302      	movs	r3, #2
 8014044:	e0de      	b.n	8014204 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 801404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b09      	cmp	r3, #9
 8014050:	d002      	beq.n	8014058 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8014052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014054:	2209      	movs	r2, #9
 8014056:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	781a      	ldrb	r2, [r3, #0]
 801405c:	6a3b      	ldr	r3, [r7, #32]
 801405e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	785a      	ldrb	r2, [r3, #1]
 8014064:	6a3b      	ldr	r3, [r7, #32]
 8014066:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	3302      	adds	r3, #2
 801406c:	781b      	ldrb	r3, [r3, #0]
 801406e:	461a      	mov	r2, r3
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	3303      	adds	r3, #3
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	021b      	lsls	r3, r3, #8
 8014078:	b29b      	uxth	r3, r3
 801407a:	4313      	orrs	r3, r2
 801407c:	b29b      	uxth	r3, r3
 801407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014082:	bf28      	it	cs
 8014084:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8014088:	b29a      	uxth	r2, r3
 801408a:	6a3b      	ldr	r3, [r7, #32]
 801408c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	791a      	ldrb	r2, [r3, #4]
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	795a      	ldrb	r2, [r3, #5]
 801409a:	6a3b      	ldr	r3, [r7, #32]
 801409c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	799a      	ldrb	r2, [r3, #6]
 80140a2:	6a3b      	ldr	r3, [r7, #32]
 80140a4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	79da      	ldrb	r2, [r3, #7]
 80140aa:	6a3b      	ldr	r3, [r7, #32]
 80140ac:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	7a1a      	ldrb	r2, [r3, #8]
 80140b2:	6a3b      	ldr	r3, [r7, #32]
 80140b4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80140b6:	88fb      	ldrh	r3, [r7, #6]
 80140b8:	2b09      	cmp	r3, #9
 80140ba:	f240 80a1 	bls.w	8014200 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 80140be:	2309      	movs	r3, #9
 80140c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80140c2:	2300      	movs	r3, #0
 80140c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80140c6:	e085      	b.n	80141d4 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80140c8:	f107 0316 	add.w	r3, r7, #22
 80140cc:	4619      	mov	r1, r3
 80140ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80140d0:	f000 f9e6 	bl	80144a0 <USBH_GetNextDesc>
 80140d4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80140d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140d8:	785b      	ldrb	r3, [r3, #1]
 80140da:	2b04      	cmp	r3, #4
 80140dc:	d17a      	bne.n	80141d4 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80140de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	2b09      	cmp	r3, #9
 80140e4:	d002      	beq.n	80140ec <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80140e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140e8:	2209      	movs	r2, #9
 80140ea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80140ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80140f0:	221a      	movs	r2, #26
 80140f2:	fb02 f303 	mul.w	r3, r2, r3
 80140f6:	3308      	adds	r3, #8
 80140f8:	6a3a      	ldr	r2, [r7, #32]
 80140fa:	4413      	add	r3, r2
 80140fc:	3302      	adds	r3, #2
 80140fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8014100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014102:	69f8      	ldr	r0, [r7, #28]
 8014104:	f000 f882 	bl	801420c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8014108:	2300      	movs	r3, #0
 801410a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8014112:	e043      	b.n	801419c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8014114:	f107 0316 	add.w	r3, r7, #22
 8014118:	4619      	mov	r1, r3
 801411a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801411c:	f000 f9c0 	bl	80144a0 <USBH_GetNextDesc>
 8014120:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014124:	785b      	ldrb	r3, [r3, #1]
 8014126:	2b05      	cmp	r3, #5
 8014128:	d138      	bne.n	801419c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	795b      	ldrb	r3, [r3, #5]
 801412e:	2b01      	cmp	r3, #1
 8014130:	d113      	bne.n	801415a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8014136:	2b02      	cmp	r3, #2
 8014138:	d003      	beq.n	8014142 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	799b      	ldrb	r3, [r3, #6]
 801413e:	2b03      	cmp	r3, #3
 8014140:	d10b      	bne.n	801415a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	79db      	ldrb	r3, [r3, #7]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d10b      	bne.n	8014162 <USBH_ParseCfgDesc+0x14e>
 801414a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b09      	cmp	r3, #9
 8014150:	d007      	beq.n	8014162 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8014152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014154:	2209      	movs	r2, #9
 8014156:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014158:	e003      	b.n	8014162 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801415c:	2207      	movs	r2, #7
 801415e:	701a      	strb	r2, [r3, #0]
 8014160:	e000      	b.n	8014164 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8014162:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8014164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014168:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801416c:	3201      	adds	r2, #1
 801416e:	00d2      	lsls	r2, r2, #3
 8014170:	211a      	movs	r1, #26
 8014172:	fb01 f303 	mul.w	r3, r1, r3
 8014176:	4413      	add	r3, r2
 8014178:	3308      	adds	r3, #8
 801417a:	6a3a      	ldr	r2, [r7, #32]
 801417c:	4413      	add	r3, r2
 801417e:	3304      	adds	r3, #4
 8014180:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8014182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014184:	69b9      	ldr	r1, [r7, #24]
 8014186:	68f8      	ldr	r0, [r7, #12]
 8014188:	f000 f86f 	bl	801426a <USBH_ParseEPDesc>
 801418c:	4603      	mov	r3, r0
 801418e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8014192:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014196:	3301      	adds	r3, #1
 8014198:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801419c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d80a      	bhi.n	80141ba <USBH_ParseCfgDesc+0x1a6>
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	791b      	ldrb	r3, [r3, #4]
 80141a8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d204      	bcs.n	80141ba <USBH_ParseCfgDesc+0x1a6>
 80141b0:	6a3b      	ldr	r3, [r7, #32]
 80141b2:	885a      	ldrh	r2, [r3, #2]
 80141b4:	8afb      	ldrh	r3, [r7, #22]
 80141b6:	429a      	cmp	r2, r3
 80141b8:	d8ac      	bhi.n	8014114 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	791b      	ldrb	r3, [r3, #4]
 80141be:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d201      	bcs.n	80141ca <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 80141c6:	2303      	movs	r3, #3
 80141c8:	e01c      	b.n	8014204 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 80141ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141ce:	3301      	adds	r3, #1
 80141d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80141d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d805      	bhi.n	80141e8 <USBH_ParseCfgDesc+0x1d4>
 80141dc:	6a3b      	ldr	r3, [r7, #32]
 80141de:	885a      	ldrh	r2, [r3, #2]
 80141e0:	8afb      	ldrh	r3, [r7, #22]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	f63f af70 	bhi.w	80140c8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80141e8:	6a3b      	ldr	r3, [r7, #32]
 80141ea:	791b      	ldrb	r3, [r3, #4]
 80141ec:	2b02      	cmp	r3, #2
 80141ee:	bf28      	it	cs
 80141f0:	2302      	movcs	r3, #2
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d201      	bcs.n	8014200 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 80141fc:	2303      	movs	r3, #3
 80141fe:	e001      	b.n	8014204 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8014200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8014204:	4618      	mov	r0, r3
 8014206:	3730      	adds	r7, #48	@ 0x30
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8014216:	683b      	ldr	r3, [r7, #0]
 8014218:	781a      	ldrb	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	785a      	ldrb	r2, [r3, #1]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8014226:	683b      	ldr	r3, [r7, #0]
 8014228:	789a      	ldrb	r2, [r3, #2]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	78da      	ldrb	r2, [r3, #3]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	791a      	ldrb	r2, [r3, #4]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	795a      	ldrb	r2, [r3, #5]
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	799a      	ldrb	r2, [r3, #6]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801424e:	683b      	ldr	r3, [r7, #0]
 8014250:	79da      	ldrb	r2, [r3, #7]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	7a1a      	ldrb	r2, [r3, #8]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	721a      	strb	r2, [r3, #8]
}
 801425e:	bf00      	nop
 8014260:	370c      	adds	r7, #12
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr

0801426a <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 801426a:	b480      	push	{r7}
 801426c:	b087      	sub	sp, #28
 801426e:	af00      	add	r7, sp, #0
 8014270:	60f8      	str	r0, [r7, #12]
 8014272:	60b9      	str	r1, [r7, #8]
 8014274:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	781a      	ldrb	r2, [r3, #0]
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	785a      	ldrb	r2, [r3, #1]
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	789a      	ldrb	r2, [r3, #2]
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	78da      	ldrb	r2, [r3, #3]
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	3304      	adds	r3, #4
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	461a      	mov	r2, r3
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	3305      	adds	r3, #5
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	021b      	lsls	r3, r3, #8
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	4313      	orrs	r3, r2
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	799a      	ldrb	r2, [r3, #6]
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	889b      	ldrh	r3, [r3, #4]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d009      	beq.n	80142d8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80142c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80142cc:	d804      	bhi.n	80142d8 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80142d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80142d6:	d901      	bls.n	80142dc <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80142d8:	2303      	movs	r3, #3
 80142da:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d136      	bne.n	8014354 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	78db      	ldrb	r3, [r3, #3]
 80142ea:	f003 0303 	and.w	r3, r3, #3
 80142ee:	2b02      	cmp	r3, #2
 80142f0:	d108      	bne.n	8014304 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80142f2:	68bb      	ldr	r3, [r7, #8]
 80142f4:	889b      	ldrh	r3, [r3, #4]
 80142f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80142fa:	f240 8097 	bls.w	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80142fe:	2303      	movs	r3, #3
 8014300:	75fb      	strb	r3, [r7, #23]
 8014302:	e093      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	78db      	ldrb	r3, [r3, #3]
 8014308:	f003 0303 	and.w	r3, r3, #3
 801430c:	2b00      	cmp	r3, #0
 801430e:	d107      	bne.n	8014320 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	889b      	ldrh	r3, [r3, #4]
 8014314:	2b40      	cmp	r3, #64	@ 0x40
 8014316:	f240 8089 	bls.w	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801431a:	2303      	movs	r3, #3
 801431c:	75fb      	strb	r3, [r7, #23]
 801431e:	e085      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	78db      	ldrb	r3, [r3, #3]
 8014324:	f003 0303 	and.w	r3, r3, #3
 8014328:	2b01      	cmp	r3, #1
 801432a:	d005      	beq.n	8014338 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	78db      	ldrb	r3, [r3, #3]
 8014330:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8014334:	2b03      	cmp	r3, #3
 8014336:	d10a      	bne.n	801434e <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	799b      	ldrb	r3, [r3, #6]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d003      	beq.n	8014348 <USBH_ParseEPDesc+0xde>
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	799b      	ldrb	r3, [r3, #6]
 8014344:	2b10      	cmp	r3, #16
 8014346:	d970      	bls.n	801442a <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8014348:	2303      	movs	r3, #3
 801434a:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801434c:	e06d      	b.n	801442a <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801434e:	2303      	movs	r3, #3
 8014350:	75fb      	strb	r3, [r7, #23]
 8014352:	e06b      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801435a:	2b01      	cmp	r3, #1
 801435c:	d13c      	bne.n	80143d8 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	78db      	ldrb	r3, [r3, #3]
 8014362:	f003 0303 	and.w	r3, r3, #3
 8014366:	2b02      	cmp	r3, #2
 8014368:	d005      	beq.n	8014376 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	78db      	ldrb	r3, [r3, #3]
 801436e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8014372:	2b00      	cmp	r3, #0
 8014374:	d106      	bne.n	8014384 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	889b      	ldrh	r3, [r3, #4]
 801437a:	2b40      	cmp	r3, #64	@ 0x40
 801437c:	d956      	bls.n	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801437e:	2303      	movs	r3, #3
 8014380:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8014382:	e053      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	78db      	ldrb	r3, [r3, #3]
 8014388:	f003 0303 	and.w	r3, r3, #3
 801438c:	2b01      	cmp	r3, #1
 801438e:	d10e      	bne.n	80143ae <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	799b      	ldrb	r3, [r3, #6]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d007      	beq.n	80143a8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801439c:	2b10      	cmp	r3, #16
 801439e:	d803      	bhi.n	80143a8 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80143a4:	2b40      	cmp	r3, #64	@ 0x40
 80143a6:	d941      	bls.n	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80143a8:	2303      	movs	r3, #3
 80143aa:	75fb      	strb	r3, [r7, #23]
 80143ac:	e03e      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	78db      	ldrb	r3, [r3, #3]
 80143b2:	f003 0303 	and.w	r3, r3, #3
 80143b6:	2b03      	cmp	r3, #3
 80143b8:	d10b      	bne.n	80143d2 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	799b      	ldrb	r3, [r3, #6]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d004      	beq.n	80143cc <USBH_ParseEPDesc+0x162>
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	889b      	ldrh	r3, [r3, #4]
 80143c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80143ca:	d32f      	bcc.n	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80143cc:	2303      	movs	r3, #3
 80143ce:	75fb      	strb	r3, [r7, #23]
 80143d0:	e02c      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80143d2:	2303      	movs	r3, #3
 80143d4:	75fb      	strb	r3, [r7, #23]
 80143d6:	e029      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80143de:	2b02      	cmp	r3, #2
 80143e0:	d120      	bne.n	8014424 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	78db      	ldrb	r3, [r3, #3]
 80143e6:	f003 0303 	and.w	r3, r3, #3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d106      	bne.n	80143fc <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	889b      	ldrh	r3, [r3, #4]
 80143f2:	2b08      	cmp	r3, #8
 80143f4:	d01a      	beq.n	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80143f6:	2303      	movs	r3, #3
 80143f8:	75fb      	strb	r3, [r7, #23]
 80143fa:	e017      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	78db      	ldrb	r3, [r3, #3]
 8014400:	f003 0303 	and.w	r3, r3, #3
 8014404:	2b03      	cmp	r3, #3
 8014406:	d10a      	bne.n	801441e <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8014408:	68bb      	ldr	r3, [r7, #8]
 801440a:	799b      	ldrb	r3, [r3, #6]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d003      	beq.n	8014418 <USBH_ParseEPDesc+0x1ae>
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	889b      	ldrh	r3, [r3, #4]
 8014414:	2b08      	cmp	r3, #8
 8014416:	d909      	bls.n	801442c <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8014418:	2303      	movs	r3, #3
 801441a:	75fb      	strb	r3, [r7, #23]
 801441c:	e006      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801441e:	2303      	movs	r3, #3
 8014420:	75fb      	strb	r3, [r7, #23]
 8014422:	e003      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8014424:	2303      	movs	r3, #3
 8014426:	75fb      	strb	r3, [r7, #23]
 8014428:	e000      	b.n	801442c <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801442a:	bf00      	nop
  }

  return status;
 801442c:	7dfb      	ldrb	r3, [r7, #23]
}
 801442e:	4618      	mov	r0, r3
 8014430:	371c      	adds	r7, #28
 8014432:	46bd      	mov	sp, r7
 8014434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014438:	4770      	bx	lr

0801443a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801443a:	b480      	push	{r7}
 801443c:	b087      	sub	sp, #28
 801443e:	af00      	add	r7, sp, #0
 8014440:	60f8      	str	r0, [r7, #12]
 8014442:	60b9      	str	r1, [r7, #8]
 8014444:	4613      	mov	r3, r2
 8014446:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	3301      	adds	r3, #1
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	2b03      	cmp	r3, #3
 8014450:	d120      	bne.n	8014494 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	781b      	ldrb	r3, [r3, #0]
 8014456:	1e9a      	subs	r2, r3, #2
 8014458:	88fb      	ldrh	r3, [r7, #6]
 801445a:	4293      	cmp	r3, r2
 801445c:	bf28      	it	cs
 801445e:	4613      	movcs	r3, r2
 8014460:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	3302      	adds	r3, #2
 8014466:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8014468:	2300      	movs	r3, #0
 801446a:	82fb      	strh	r3, [r7, #22]
 801446c:	e00b      	b.n	8014486 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801446e:	8afb      	ldrh	r3, [r7, #22]
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	4413      	add	r3, r2
 8014474:	781a      	ldrb	r2, [r3, #0]
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	701a      	strb	r2, [r3, #0]
      pdest++;
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	3301      	adds	r3, #1
 801447e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8014480:	8afb      	ldrh	r3, [r7, #22]
 8014482:	3302      	adds	r3, #2
 8014484:	82fb      	strh	r3, [r7, #22]
 8014486:	8afa      	ldrh	r2, [r7, #22]
 8014488:	8abb      	ldrh	r3, [r7, #20]
 801448a:	429a      	cmp	r2, r3
 801448c:	d3ef      	bcc.n	801446e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	2200      	movs	r2, #0
 8014492:	701a      	strb	r2, [r3, #0]
  }
}
 8014494:	bf00      	nop
 8014496:	371c      	adds	r7, #28
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b085      	sub	sp, #20
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	7812      	ldrb	r2, [r2, #0]
 80144b2:	4413      	add	r3, r2
 80144b4:	b29a      	uxth	r2, r3
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	781b      	ldrb	r3, [r3, #0]
 80144be:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	4413      	add	r3, r2
 80144c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80144c6:	68fb      	ldr	r3, [r7, #12]
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3714      	adds	r7, #20
 80144cc:	46bd      	mov	sp, r7
 80144ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d2:	4770      	bx	lr

080144d4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	4613      	mov	r3, r2
 80144e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80144e2:	2301      	movs	r3, #1
 80144e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	789b      	ldrb	r3, [r3, #2]
 80144ea:	2b01      	cmp	r3, #1
 80144ec:	d002      	beq.n	80144f4 <USBH_CtlReq+0x20>
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d015      	beq.n	801451e <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 80144f2:	e033      	b.n	801455c <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	68ba      	ldr	r2, [r7, #8]
 80144f8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	88fa      	ldrh	r2, [r7, #6]
 80144fe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	2201      	movs	r2, #1
 8014504:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2202      	movs	r2, #2
 801450a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801450c:	2301      	movs	r3, #1
 801450e:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014510:	2300      	movs	r3, #0
 8014512:	2200      	movs	r2, #0
 8014514:	2103      	movs	r1, #3
 8014516:	68f8      	ldr	r0, [r7, #12]
 8014518:	f7ff fb34 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 801451c:	e01e      	b.n	801455c <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	f000 f822 	bl	8014568 <USBH_HandleControl>
 8014524:	4603      	mov	r3, r0
 8014526:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8014528:	7dfb      	ldrb	r3, [r7, #23]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d002      	beq.n	8014534 <USBH_CtlReq+0x60>
 801452e:	7dfb      	ldrb	r3, [r7, #23]
 8014530:	2b03      	cmp	r3, #3
 8014532:	d106      	bne.n	8014542 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2201      	movs	r2, #1
 8014538:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	2200      	movs	r2, #0
 801453e:	761a      	strb	r2, [r3, #24]
 8014540:	e005      	b.n	801454e <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8014542:	7dfb      	ldrb	r3, [r7, #23]
 8014544:	2b02      	cmp	r3, #2
 8014546:	d102      	bne.n	801454e <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	2201      	movs	r2, #1
 801454c:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801454e:	2300      	movs	r3, #0
 8014550:	2200      	movs	r2, #0
 8014552:	2103      	movs	r1, #3
 8014554:	68f8      	ldr	r0, [r7, #12]
 8014556:	f7ff fb15 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 801455a:	bf00      	nop
  }
  return status;
 801455c:	7dfb      	ldrb	r3, [r7, #23]
}
 801455e:	4618      	mov	r0, r3
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b086      	sub	sp, #24
 801456c:	af02      	add	r7, sp, #8
 801456e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8014570:	2301      	movs	r3, #1
 8014572:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8014574:	2300      	movs	r3, #0
 8014576:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	7e1b      	ldrb	r3, [r3, #24]
 801457c:	3b01      	subs	r3, #1
 801457e:	2b0a      	cmp	r3, #10
 8014580:	f200 81b2 	bhi.w	80148e8 <USBH_HandleControl+0x380>
 8014584:	a201      	add	r2, pc, #4	@ (adr r2, 801458c <USBH_HandleControl+0x24>)
 8014586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801458a:	bf00      	nop
 801458c:	080145b9 	.word	0x080145b9
 8014590:	080145d3 	.word	0x080145d3
 8014594:	08014655 	.word	0x08014655
 8014598:	0801467b 	.word	0x0801467b
 801459c:	080146d9 	.word	0x080146d9
 80145a0:	08014703 	.word	0x08014703
 80145a4:	08014785 	.word	0x08014785
 80145a8:	080147a7 	.word	0x080147a7
 80145ac:	08014809 	.word	0x08014809
 80145b0:	0801482f 	.word	0x0801482f
 80145b4:	08014891 	.word	0x08014891
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f103 0110 	add.w	r1, r3, #16
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	795b      	ldrb	r3, [r3, #5]
 80145c2:	461a      	mov	r2, r3
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f000 f99f 	bl	8014908 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2202      	movs	r2, #2
 80145ce:	761a      	strb	r2, [r3, #24]
      break;
 80145d0:	e195      	b.n	80148fe <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	795b      	ldrb	r3, [r3, #5]
 80145d6:	4619      	mov	r1, r3
 80145d8:	6878      	ldr	r0, [r7, #4]
 80145da:	f004 f9fb 	bl	80189d4 <USBH_LL_GetURBState>
 80145de:	4603      	mov	r3, r0
 80145e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80145e2:	7bbb      	ldrb	r3, [r7, #14]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d124      	bne.n	8014632 <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	7c1b      	ldrb	r3, [r3, #16]
 80145ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80145f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	8adb      	ldrh	r3, [r3, #22]
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00a      	beq.n	8014610 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80145fa:	7b7b      	ldrb	r3, [r7, #13]
 80145fc:	2b80      	cmp	r3, #128	@ 0x80
 80145fe:	d103      	bne.n	8014608 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	2203      	movs	r2, #3
 8014604:	761a      	strb	r2, [r3, #24]
 8014606:	e00d      	b.n	8014624 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2205      	movs	r2, #5
 801460c:	761a      	strb	r2, [r3, #24]
 801460e:	e009      	b.n	8014624 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8014610:	7b7b      	ldrb	r3, [r7, #13]
 8014612:	2b80      	cmp	r3, #128	@ 0x80
 8014614:	d103      	bne.n	801461e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	2209      	movs	r2, #9
 801461a:	761a      	strb	r2, [r3, #24]
 801461c:	e002      	b.n	8014624 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2207      	movs	r2, #7
 8014622:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014624:	2300      	movs	r3, #0
 8014626:	2200      	movs	r2, #0
 8014628:	2103      	movs	r1, #3
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7ff faaa 	bl	8013b84 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8014630:	e15c      	b.n	80148ec <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8014632:	7bbb      	ldrb	r3, [r7, #14]
 8014634:	2b04      	cmp	r3, #4
 8014636:	d003      	beq.n	8014640 <USBH_HandleControl+0xd8>
 8014638:	7bbb      	ldrb	r3, [r7, #14]
 801463a:	2b02      	cmp	r3, #2
 801463c:	f040 8156 	bne.w	80148ec <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	220b      	movs	r2, #11
 8014644:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014646:	2300      	movs	r3, #0
 8014648:	2200      	movs	r2, #0
 801464a:	2103      	movs	r1, #3
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7ff fa99 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014652:	e14b      	b.n	80148ec <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801465a:	b29a      	uxth	r2, r3
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	6899      	ldr	r1, [r3, #8]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	899a      	ldrh	r2, [r3, #12]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	791b      	ldrb	r3, [r3, #4]
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f000 f98a 	bl	8014986 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2204      	movs	r2, #4
 8014676:	761a      	strb	r2, [r3, #24]
      break;
 8014678:	e141      	b.n	80148fe <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	791b      	ldrb	r3, [r3, #4]
 801467e:	4619      	mov	r1, r3
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f004 f9a7 	bl	80189d4 <USBH_LL_GetURBState>
 8014686:	4603      	mov	r3, r0
 8014688:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801468a:	7bbb      	ldrb	r3, [r7, #14]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d109      	bne.n	80146a4 <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2209      	movs	r2, #9
 8014694:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014696:	2300      	movs	r3, #0
 8014698:	2200      	movs	r2, #0
 801469a:	2103      	movs	r1, #3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff fa71 	bl	8013b84 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80146a2:	e125      	b.n	80148f0 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 80146a4:	7bbb      	ldrb	r3, [r7, #14]
 80146a6:	2b05      	cmp	r3, #5
 80146a8:	d108      	bne.n	80146bc <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 80146aa:	2303      	movs	r3, #3
 80146ac:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80146ae:	2300      	movs	r3, #0
 80146b0:	2200      	movs	r2, #0
 80146b2:	2103      	movs	r1, #3
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7ff fa65 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 80146ba:	e119      	b.n	80148f0 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 80146bc:	7bbb      	ldrb	r3, [r7, #14]
 80146be:	2b04      	cmp	r3, #4
 80146c0:	f040 8116 	bne.w	80148f0 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	220b      	movs	r2, #11
 80146c8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80146ca:	2300      	movs	r3, #0
 80146cc:	2200      	movs	r2, #0
 80146ce:	2103      	movs	r1, #3
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f7ff fa57 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 80146d6:	e10b      	b.n	80148f0 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6899      	ldr	r1, [r3, #8]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	899a      	ldrh	r2, [r3, #12]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	795b      	ldrb	r3, [r3, #5]
 80146e4:	2001      	movs	r0, #1
 80146e6:	9000      	str	r0, [sp, #0]
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 f927 	bl	801493c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2206      	movs	r2, #6
 80146fe:	761a      	strb	r2, [r3, #24]
      break;
 8014700:	e0fd      	b.n	80148fe <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	795b      	ldrb	r3, [r3, #5]
 8014706:	4619      	mov	r1, r3
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f004 f963 	bl	80189d4 <USBH_LL_GetURBState>
 801470e:	4603      	mov	r3, r0
 8014710:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8014712:	7bbb      	ldrb	r3, [r7, #14]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d109      	bne.n	801472c <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	2207      	movs	r2, #7
 801471c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801471e:	2300      	movs	r3, #0
 8014720:	2200      	movs	r2, #0
 8014722:	2103      	movs	r1, #3
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f7ff fa2d 	bl	8013b84 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801472a:	e0e3      	b.n	80148f4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 801472c:	7bbb      	ldrb	r3, [r7, #14]
 801472e:	2b05      	cmp	r3, #5
 8014730:	d10b      	bne.n	801474a <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	220c      	movs	r2, #12
 8014736:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8014738:	2303      	movs	r3, #3
 801473a:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801473c:	2300      	movs	r3, #0
 801473e:	2200      	movs	r2, #0
 8014740:	2103      	movs	r1, #3
 8014742:	6878      	ldr	r0, [r7, #4]
 8014744:	f7ff fa1e 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014748:	e0d4      	b.n	80148f4 <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 801474a:	7bbb      	ldrb	r3, [r7, #14]
 801474c:	2b02      	cmp	r3, #2
 801474e:	d109      	bne.n	8014764 <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2205      	movs	r2, #5
 8014754:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014756:	2300      	movs	r3, #0
 8014758:	2200      	movs	r2, #0
 801475a:	2103      	movs	r1, #3
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7ff fa11 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014762:	e0c7      	b.n	80148f4 <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8014764:	7bbb      	ldrb	r3, [r7, #14]
 8014766:	2b04      	cmp	r3, #4
 8014768:	f040 80c4 	bne.w	80148f4 <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	220b      	movs	r2, #11
 8014770:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8014772:	2302      	movs	r3, #2
 8014774:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014776:	2300      	movs	r3, #0
 8014778:	2200      	movs	r2, #0
 801477a:	2103      	movs	r1, #3
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f7ff fa01 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014782:	e0b7      	b.n	80148f4 <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	791b      	ldrb	r3, [r3, #4]
 8014788:	2200      	movs	r2, #0
 801478a:	2100      	movs	r1, #0
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f000 f8fa 	bl	8014986 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014798:	b29a      	uxth	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2208      	movs	r2, #8
 80147a2:	761a      	strb	r2, [r3, #24]

      break;
 80147a4:	e0ab      	b.n	80148fe <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	791b      	ldrb	r3, [r3, #4]
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f004 f911 	bl	80189d4 <USBH_LL_GetURBState>
 80147b2:	4603      	mov	r3, r0
 80147b4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80147b6:	7bbb      	ldrb	r3, [r7, #14]
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d10b      	bne.n	80147d4 <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	220d      	movs	r2, #13
 80147c0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80147c2:	2300      	movs	r3, #0
 80147c4:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80147c6:	2300      	movs	r3, #0
 80147c8:	2200      	movs	r2, #0
 80147ca:	2103      	movs	r1, #3
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7ff f9d9 	bl	8013b84 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80147d2:	e091      	b.n	80148f8 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 80147d4:	7bbb      	ldrb	r3, [r7, #14]
 80147d6:	2b04      	cmp	r3, #4
 80147d8:	d109      	bne.n	80147ee <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	220b      	movs	r2, #11
 80147de:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80147e0:	2300      	movs	r3, #0
 80147e2:	2200      	movs	r2, #0
 80147e4:	2103      	movs	r1, #3
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7ff f9cc 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 80147ec:	e084      	b.n	80148f8 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 80147ee:	7bbb      	ldrb	r3, [r7, #14]
 80147f0:	2b05      	cmp	r3, #5
 80147f2:	f040 8081 	bne.w	80148f8 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 80147f6:	2303      	movs	r3, #3
 80147f8:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 80147fa:	2300      	movs	r3, #0
 80147fc:	2200      	movs	r2, #0
 80147fe:	2103      	movs	r1, #3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f7ff f9bf 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014806:	e077      	b.n	80148f8 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	795b      	ldrb	r3, [r3, #5]
 801480c:	2201      	movs	r2, #1
 801480e:	9200      	str	r2, [sp, #0]
 8014810:	2200      	movs	r2, #0
 8014812:	2100      	movs	r1, #0
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 f891 	bl	801493c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8014820:	b29a      	uxth	r2, r3
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	220a      	movs	r2, #10
 801482a:	761a      	strb	r2, [r3, #24]
      break;
 801482c:	e067      	b.n	80148fe <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	795b      	ldrb	r3, [r3, #5]
 8014832:	4619      	mov	r1, r3
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f004 f8cd 	bl	80189d4 <USBH_LL_GetURBState>
 801483a:	4603      	mov	r3, r0
 801483c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801483e:	7bbb      	ldrb	r3, [r7, #14]
 8014840:	2b01      	cmp	r3, #1
 8014842:	d10b      	bne.n	801485c <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8014844:	2300      	movs	r3, #0
 8014846:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	220d      	movs	r2, #13
 801484c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 801484e:	2300      	movs	r3, #0
 8014850:	2200      	movs	r2, #0
 8014852:	2103      	movs	r1, #3
 8014854:	6878      	ldr	r0, [r7, #4]
 8014856:	f7ff f995 	bl	8013b84 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 801485a:	e04f      	b.n	80148fc <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 801485c:	7bbb      	ldrb	r3, [r7, #14]
 801485e:	2b02      	cmp	r3, #2
 8014860:	d109      	bne.n	8014876 <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2209      	movs	r2, #9
 8014866:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014868:	2300      	movs	r3, #0
 801486a:	2200      	movs	r2, #0
 801486c:	2103      	movs	r1, #3
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7ff f988 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 8014874:	e042      	b.n	80148fc <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8014876:	7bbb      	ldrb	r3, [r7, #14]
 8014878:	2b04      	cmp	r3, #4
 801487a:	d13f      	bne.n	80148fc <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	220b      	movs	r2, #11
 8014880:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8014882:	2300      	movs	r3, #0
 8014884:	2200      	movs	r2, #0
 8014886:	2103      	movs	r1, #3
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7ff f97b 	bl	8013b84 <USBH_OS_PutMessage>
      break;
 801488e:	e035      	b.n	80148fc <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	7e5b      	ldrb	r3, [r3, #25]
 8014894:	3301      	adds	r3, #1
 8014896:	b2da      	uxtb	r2, r3
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	765a      	strb	r2, [r3, #25]
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	7e5b      	ldrb	r3, [r3, #25]
 80148a0:	2b02      	cmp	r3, #2
 80148a2:	d806      	bhi.n	80148b2 <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2201      	movs	r2, #1
 80148a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2201      	movs	r2, #1
 80148ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80148b0:	e025      	b.n	80148fe <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80148b8:	2106      	movs	r1, #6
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	2200      	movs	r2, #0
 80148c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	795b      	ldrb	r3, [r3, #5]
 80148c8:	4619      	mov	r1, r3
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	f000 f90c 	bl	8014ae8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	791b      	ldrb	r3, [r3, #4]
 80148d4:	4619      	mov	r1, r3
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 f906 	bl	8014ae8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2200      	movs	r2, #0
 80148e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80148e2:	2302      	movs	r3, #2
 80148e4:	73fb      	strb	r3, [r7, #15]
      break;
 80148e6:	e00a      	b.n	80148fe <USBH_HandleControl+0x396>

    default:
      break;
 80148e8:	bf00      	nop
 80148ea:	e008      	b.n	80148fe <USBH_HandleControl+0x396>
      break;
 80148ec:	bf00      	nop
 80148ee:	e006      	b.n	80148fe <USBH_HandleControl+0x396>
      break;
 80148f0:	bf00      	nop
 80148f2:	e004      	b.n	80148fe <USBH_HandleControl+0x396>
      break;
 80148f4:	bf00      	nop
 80148f6:	e002      	b.n	80148fe <USBH_HandleControl+0x396>
      break;
 80148f8:	bf00      	nop
 80148fa:	e000      	b.n	80148fe <USBH_HandleControl+0x396>
      break;
 80148fc:	bf00      	nop
  }

  return status;
 80148fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8014900:	4618      	mov	r0, r3
 8014902:	3710      	adds	r7, #16
 8014904:	46bd      	mov	sp, r7
 8014906:	bd80      	pop	{r7, pc}

08014908 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b088      	sub	sp, #32
 801490c:	af04      	add	r7, sp, #16
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	4613      	mov	r3, r2
 8014914:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014916:	79f9      	ldrb	r1, [r7, #7]
 8014918:	2300      	movs	r3, #0
 801491a:	9303      	str	r3, [sp, #12]
 801491c:	2308      	movs	r3, #8
 801491e:	9302      	str	r3, [sp, #8]
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	9301      	str	r3, [sp, #4]
 8014924:	2300      	movs	r3, #0
 8014926:	9300      	str	r3, [sp, #0]
 8014928:	2300      	movs	r3, #0
 801492a:	2200      	movs	r2, #0
 801492c:	68f8      	ldr	r0, [r7, #12]
 801492e:	f004 f820 	bl	8018972 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8014932:	2300      	movs	r3, #0
}
 8014934:	4618      	mov	r0, r3
 8014936:	3710      	adds	r7, #16
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}

0801493c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b088      	sub	sp, #32
 8014940:	af04      	add	r7, sp, #16
 8014942:	60f8      	str	r0, [r7, #12]
 8014944:	60b9      	str	r1, [r7, #8]
 8014946:	4611      	mov	r1, r2
 8014948:	461a      	mov	r2, r3
 801494a:	460b      	mov	r3, r1
 801494c:	80fb      	strh	r3, [r7, #6]
 801494e:	4613      	mov	r3, r2
 8014950:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014958:	2b00      	cmp	r3, #0
 801495a:	d001      	beq.n	8014960 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801495c:	2300      	movs	r3, #0
 801495e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014960:	7979      	ldrb	r1, [r7, #5]
 8014962:	7e3b      	ldrb	r3, [r7, #24]
 8014964:	9303      	str	r3, [sp, #12]
 8014966:	88fb      	ldrh	r3, [r7, #6]
 8014968:	9302      	str	r3, [sp, #8]
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	9301      	str	r3, [sp, #4]
 801496e:	2301      	movs	r3, #1
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	2300      	movs	r3, #0
 8014974:	2200      	movs	r2, #0
 8014976:	68f8      	ldr	r0, [r7, #12]
 8014978:	f003 fffb 	bl	8018972 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801497c:	2300      	movs	r3, #0
}
 801497e:	4618      	mov	r0, r3
 8014980:	3710      	adds	r7, #16
 8014982:	46bd      	mov	sp, r7
 8014984:	bd80      	pop	{r7, pc}

08014986 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8014986:	b580      	push	{r7, lr}
 8014988:	b088      	sub	sp, #32
 801498a:	af04      	add	r7, sp, #16
 801498c:	60f8      	str	r0, [r7, #12]
 801498e:	60b9      	str	r1, [r7, #8]
 8014990:	4611      	mov	r1, r2
 8014992:	461a      	mov	r2, r3
 8014994:	460b      	mov	r3, r1
 8014996:	80fb      	strh	r3, [r7, #6]
 8014998:	4613      	mov	r3, r2
 801499a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801499c:	7979      	ldrb	r1, [r7, #5]
 801499e:	2300      	movs	r3, #0
 80149a0:	9303      	str	r3, [sp, #12]
 80149a2:	88fb      	ldrh	r3, [r7, #6]
 80149a4:	9302      	str	r3, [sp, #8]
 80149a6:	68bb      	ldr	r3, [r7, #8]
 80149a8:	9301      	str	r3, [sp, #4]
 80149aa:	2301      	movs	r3, #1
 80149ac:	9300      	str	r3, [sp, #0]
 80149ae:	2300      	movs	r3, #0
 80149b0:	2201      	movs	r2, #1
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f003 ffdd 	bl	8018972 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80149b8:	2300      	movs	r3, #0

}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3710      	adds	r7, #16
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}

080149c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80149c2:	b580      	push	{r7, lr}
 80149c4:	b088      	sub	sp, #32
 80149c6:	af04      	add	r7, sp, #16
 80149c8:	60f8      	str	r0, [r7, #12]
 80149ca:	60b9      	str	r1, [r7, #8]
 80149cc:	4611      	mov	r1, r2
 80149ce:	461a      	mov	r2, r3
 80149d0:	460b      	mov	r3, r1
 80149d2:	80fb      	strh	r3, [r7, #6]
 80149d4:	4613      	mov	r3, r2
 80149d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d001      	beq.n	80149e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80149e2:	2300      	movs	r3, #0
 80149e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80149e6:	7979      	ldrb	r1, [r7, #5]
 80149e8:	7e3b      	ldrb	r3, [r7, #24]
 80149ea:	9303      	str	r3, [sp, #12]
 80149ec:	88fb      	ldrh	r3, [r7, #6]
 80149ee:	9302      	str	r3, [sp, #8]
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	9301      	str	r3, [sp, #4]
 80149f4:	2301      	movs	r3, #1
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	2302      	movs	r3, #2
 80149fa:	2200      	movs	r2, #0
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f003 ffb8 	bl	8018972 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8014a02:	2300      	movs	r3, #0
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	3710      	adds	r7, #16
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	bd80      	pop	{r7, pc}

08014a0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b088      	sub	sp, #32
 8014a10:	af04      	add	r7, sp, #16
 8014a12:	60f8      	str	r0, [r7, #12]
 8014a14:	60b9      	str	r1, [r7, #8]
 8014a16:	4611      	mov	r1, r2
 8014a18:	461a      	mov	r2, r3
 8014a1a:	460b      	mov	r3, r1
 8014a1c:	80fb      	strh	r3, [r7, #6]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014a22:	7979      	ldrb	r1, [r7, #5]
 8014a24:	2300      	movs	r3, #0
 8014a26:	9303      	str	r3, [sp, #12]
 8014a28:	88fb      	ldrh	r3, [r7, #6]
 8014a2a:	9302      	str	r3, [sp, #8]
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	9301      	str	r3, [sp, #4]
 8014a30:	2301      	movs	r3, #1
 8014a32:	9300      	str	r3, [sp, #0]
 8014a34:	2302      	movs	r3, #2
 8014a36:	2201      	movs	r2, #1
 8014a38:	68f8      	ldr	r0, [r7, #12]
 8014a3a:	f003 ff9a 	bl	8018972 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014a3e:	2300      	movs	r3, #0
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	3710      	adds	r7, #16
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b086      	sub	sp, #24
 8014a4c:	af04      	add	r7, sp, #16
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	4608      	mov	r0, r1
 8014a52:	4611      	mov	r1, r2
 8014a54:	461a      	mov	r2, r3
 8014a56:	4603      	mov	r3, r0
 8014a58:	70fb      	strb	r3, [r7, #3]
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	70bb      	strb	r3, [r7, #2]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8014a62:	7878      	ldrb	r0, [r7, #1]
 8014a64:	78ba      	ldrb	r2, [r7, #2]
 8014a66:	78f9      	ldrb	r1, [r7, #3]
 8014a68:	8b3b      	ldrh	r3, [r7, #24]
 8014a6a:	9302      	str	r3, [sp, #8]
 8014a6c:	7d3b      	ldrb	r3, [r7, #20]
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	7c3b      	ldrb	r3, [r7, #16]
 8014a72:	9300      	str	r3, [sp, #0]
 8014a74:	4603      	mov	r3, r0
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f003 ff2d 	bl	80188d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3708      	adds	r7, #8
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b082      	sub	sp, #8
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	6078      	str	r0, [r7, #4]
 8014a8e:	460b      	mov	r3, r1
 8014a90:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	4619      	mov	r1, r3
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f003 ff4c 	bl	8018934 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014a9c:	2300      	movs	r3, #0
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3708      	adds	r7, #8
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd80      	pop	{r7, pc}

08014aa6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8014aa6:	b580      	push	{r7, lr}
 8014aa8:	b084      	sub	sp, #16
 8014aaa:	af00      	add	r7, sp, #0
 8014aac:	6078      	str	r0, [r7, #4]
 8014aae:	460b      	mov	r3, r1
 8014ab0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f000 f836 	bl	8014b24 <USBH_GetFreePipe>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014abc:	89fb      	ldrh	r3, [r7, #14]
 8014abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d00a      	beq.n	8014adc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8014ac6:	78fa      	ldrb	r2, [r7, #3]
 8014ac8:	89fb      	ldrh	r3, [r7, #14]
 8014aca:	f003 030f 	and.w	r3, r3, #15
 8014ace:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8014ad2:	6879      	ldr	r1, [r7, #4]
 8014ad4:	33e0      	adds	r3, #224	@ 0xe0
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	440b      	add	r3, r1
 8014ada:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014adc:	89fb      	ldrh	r3, [r7, #14]
 8014ade:	b2db      	uxtb	r3, r3
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
 8014af0:	460b      	mov	r3, r1
 8014af2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8014af4:	78fb      	ldrb	r3, [r7, #3]
 8014af6:	2b0f      	cmp	r3, #15
 8014af8:	d80d      	bhi.n	8014b16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014afa:	78fb      	ldrb	r3, [r7, #3]
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	33e0      	adds	r3, #224	@ 0xe0
 8014b00:	009b      	lsls	r3, r3, #2
 8014b02:	4413      	add	r3, r2
 8014b04:	685a      	ldr	r2, [r3, #4]
 8014b06:	78fb      	ldrb	r3, [r7, #3]
 8014b08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014b0c:	6879      	ldr	r1, [r7, #4]
 8014b0e:	33e0      	adds	r3, #224	@ 0xe0
 8014b10:	009b      	lsls	r3, r3, #2
 8014b12:	440b      	add	r3, r1
 8014b14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8014b16:	2300      	movs	r3, #0
}
 8014b18:	4618      	mov	r0, r3
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8014b24:	b480      	push	{r7}
 8014b26:	b085      	sub	sp, #20
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014b30:	2300      	movs	r3, #0
 8014b32:	73fb      	strb	r3, [r7, #15]
 8014b34:	e00f      	b.n	8014b56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8014b36:	7bfb      	ldrb	r3, [r7, #15]
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	33e0      	adds	r3, #224	@ 0xe0
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	4413      	add	r3, r2
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d102      	bne.n	8014b50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8014b4a:	7bfb      	ldrb	r3, [r7, #15]
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	e007      	b.n	8014b60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8014b50:	7bfb      	ldrb	r3, [r7, #15]
 8014b52:	3301      	adds	r3, #1
 8014b54:	73fb      	strb	r3, [r7, #15]
 8014b56:	7bfb      	ldrb	r3, [r7, #15]
 8014b58:	2b0f      	cmp	r3, #15
 8014b5a:	d9ec      	bls.n	8014b36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8014b5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr

08014b6c <__NVIC_SetPriority>:
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b083      	sub	sp, #12
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	4603      	mov	r3, r0
 8014b74:	6039      	str	r1, [r7, #0]
 8014b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8014b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	db0a      	blt.n	8014b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	b2da      	uxtb	r2, r3
 8014b84:	490c      	ldr	r1, [pc, #48]	@ (8014bb8 <__NVIC_SetPriority+0x4c>)
 8014b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014b8a:	0112      	lsls	r2, r2, #4
 8014b8c:	b2d2      	uxtb	r2, r2
 8014b8e:	440b      	add	r3, r1
 8014b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8014b94:	e00a      	b.n	8014bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	b2da      	uxtb	r2, r3
 8014b9a:	4908      	ldr	r1, [pc, #32]	@ (8014bbc <__NVIC_SetPriority+0x50>)
 8014b9c:	88fb      	ldrh	r3, [r7, #6]
 8014b9e:	f003 030f 	and.w	r3, r3, #15
 8014ba2:	3b04      	subs	r3, #4
 8014ba4:	0112      	lsls	r2, r2, #4
 8014ba6:	b2d2      	uxtb	r2, r2
 8014ba8:	440b      	add	r3, r1
 8014baa:	761a      	strb	r2, [r3, #24]
}
 8014bac:	bf00      	nop
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr
 8014bb8:	e000e100 	.word	0xe000e100
 8014bbc:	e000ed00 	.word	0xe000ed00

08014bc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	f06f 0004 	mvn.w	r0, #4
 8014bca:	f7ff ffcf 	bl	8014b6c <__NVIC_SetPriority>
#endif
}
 8014bce:	bf00      	nop
 8014bd0:	bd80      	pop	{r7, pc}
	...

08014bd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014bd4:	b480      	push	{r7}
 8014bd6:	b083      	sub	sp, #12
 8014bd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014bda:	f3ef 8305 	mrs	r3, IPSR
 8014bde:	603b      	str	r3, [r7, #0]
  return(result);
 8014be0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d003      	beq.n	8014bee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014be6:	f06f 0305 	mvn.w	r3, #5
 8014bea:	607b      	str	r3, [r7, #4]
 8014bec:	e00c      	b.n	8014c08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014bee:	4b0a      	ldr	r3, [pc, #40]	@ (8014c18 <osKernelInitialize+0x44>)
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d105      	bne.n	8014c02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014bf6:	4b08      	ldr	r3, [pc, #32]	@ (8014c18 <osKernelInitialize+0x44>)
 8014bf8:	2201      	movs	r2, #1
 8014bfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	607b      	str	r3, [r7, #4]
 8014c00:	e002      	b.n	8014c08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014c02:	f04f 33ff 	mov.w	r3, #4294967295
 8014c06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014c08:	687b      	ldr	r3, [r7, #4]
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	370c      	adds	r7, #12
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c14:	4770      	bx	lr
 8014c16:	bf00      	nop
 8014c18:	24000a78 	.word	0x24000a78

08014c1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c22:	f3ef 8305 	mrs	r3, IPSR
 8014c26:	603b      	str	r3, [r7, #0]
  return(result);
 8014c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d003      	beq.n	8014c36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8014c2e:	f06f 0305 	mvn.w	r3, #5
 8014c32:	607b      	str	r3, [r7, #4]
 8014c34:	e010      	b.n	8014c58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014c36:	4b0b      	ldr	r3, [pc, #44]	@ (8014c64 <osKernelStart+0x48>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d109      	bne.n	8014c52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014c3e:	f7ff ffbf 	bl	8014bc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014c42:	4b08      	ldr	r3, [pc, #32]	@ (8014c64 <osKernelStart+0x48>)
 8014c44:	2202      	movs	r2, #2
 8014c46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014c48:	f001 fac2 	bl	80161d0 <vTaskStartScheduler>
      stat = osOK;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	607b      	str	r3, [r7, #4]
 8014c50:	e002      	b.n	8014c58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014c52:	f04f 33ff 	mov.w	r3, #4294967295
 8014c56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014c58:	687b      	ldr	r3, [r7, #4]
}
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	3708      	adds	r7, #8
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	24000a78 	.word	0x24000a78

08014c68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b08e      	sub	sp, #56	@ 0x38
 8014c6c:	af04      	add	r7, sp, #16
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014c74:	2300      	movs	r3, #0
 8014c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014c78:	f3ef 8305 	mrs	r3, IPSR
 8014c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8014c7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d17e      	bne.n	8014d82 <osThreadNew+0x11a>
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d07b      	beq.n	8014d82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014c8a:	2380      	movs	r3, #128	@ 0x80
 8014c8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014c8e:	2318      	movs	r3, #24
 8014c90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014c92:	2300      	movs	r3, #0
 8014c94:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8014c96:	f04f 33ff 	mov.w	r3, #4294967295
 8014c9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d045      	beq.n	8014d2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d002      	beq.n	8014cb0 <osThreadNew+0x48>
        name = attr->name;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	699b      	ldr	r3, [r3, #24]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d002      	beq.n	8014cbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	699b      	ldr	r3, [r3, #24]
 8014cbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d008      	beq.n	8014cd6 <osThreadNew+0x6e>
 8014cc4:	69fb      	ldr	r3, [r7, #28]
 8014cc6:	2b38      	cmp	r3, #56	@ 0x38
 8014cc8:	d805      	bhi.n	8014cd6 <osThreadNew+0x6e>
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d001      	beq.n	8014cda <osThreadNew+0x72>
        return (NULL);
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	e054      	b.n	8014d84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	695b      	ldr	r3, [r3, #20]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d003      	beq.n	8014cea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	695b      	ldr	r3, [r3, #20]
 8014ce6:	089b      	lsrs	r3, r3, #2
 8014ce8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	689b      	ldr	r3, [r3, #8]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d00e      	beq.n	8014d10 <osThreadNew+0xa8>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	2b5b      	cmp	r3, #91	@ 0x5b
 8014cf8:	d90a      	bls.n	8014d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d006      	beq.n	8014d10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	695b      	ldr	r3, [r3, #20]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d002      	beq.n	8014d10 <osThreadNew+0xa8>
        mem = 1;
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	61bb      	str	r3, [r7, #24]
 8014d0e:	e010      	b.n	8014d32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	689b      	ldr	r3, [r3, #8]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d10c      	bne.n	8014d32 <osThreadNew+0xca>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	68db      	ldr	r3, [r3, #12]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d108      	bne.n	8014d32 <osThreadNew+0xca>
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	691b      	ldr	r3, [r3, #16]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d104      	bne.n	8014d32 <osThreadNew+0xca>
          mem = 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	61bb      	str	r3, [r7, #24]
 8014d2c:	e001      	b.n	8014d32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d110      	bne.n	8014d5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014d3c:	687a      	ldr	r2, [r7, #4]
 8014d3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014d40:	9202      	str	r2, [sp, #8]
 8014d42:	9301      	str	r3, [sp, #4]
 8014d44:	69fb      	ldr	r3, [r7, #28]
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	6a3a      	ldr	r2, [r7, #32]
 8014d4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d4e:	68f8      	ldr	r0, [r7, #12]
 8014d50:	f001 f862 	bl	8015e18 <xTaskCreateStatic>
 8014d54:	4603      	mov	r3, r0
 8014d56:	613b      	str	r3, [r7, #16]
 8014d58:	e013      	b.n	8014d82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d110      	bne.n	8014d82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014d60:	6a3b      	ldr	r3, [r7, #32]
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	f107 0310 	add.w	r3, r7, #16
 8014d68:	9301      	str	r3, [sp, #4]
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	9300      	str	r3, [sp, #0]
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d72:	68f8      	ldr	r0, [r7, #12]
 8014d74:	f001 f8b0 	bl	8015ed8 <xTaskCreate>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	2b01      	cmp	r3, #1
 8014d7c:	d001      	beq.n	8014d82 <osThreadNew+0x11a>
            hTask = NULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8014d82:	693b      	ldr	r3, [r7, #16]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3728      	adds	r7, #40	@ 0x28
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014d94:	f3ef 8305 	mrs	r3, IPSR
 8014d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d003      	beq.n	8014da8 <osDelay+0x1c>
    stat = osErrorISR;
 8014da0:	f06f 0305 	mvn.w	r3, #5
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	e007      	b.n	8014db8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014da8:	2300      	movs	r3, #0
 8014daa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d002      	beq.n	8014db8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f001 f9d6 	bl	8016164 <vTaskDelay>
    }
  }

  return (stat);
 8014db8:	68fb      	ldr	r3, [r7, #12]
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3710      	adds	r7, #16
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b08a      	sub	sp, #40	@ 0x28
 8014dc6:	af02      	add	r7, sp, #8
 8014dc8:	60f8      	str	r0, [r7, #12]
 8014dca:	60b9      	str	r1, [r7, #8]
 8014dcc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014dd2:	f3ef 8305 	mrs	r3, IPSR
 8014dd6:	613b      	str	r3, [r7, #16]
  return(result);
 8014dd8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d15f      	bne.n	8014e9e <osMessageQueueNew+0xdc>
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d05c      	beq.n	8014e9e <osMessageQueueNew+0xdc>
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d059      	beq.n	8014e9e <osMessageQueueNew+0xdc>
    mem = -1;
 8014dea:	f04f 33ff 	mov.w	r3, #4294967295
 8014dee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d029      	beq.n	8014e4a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	689b      	ldr	r3, [r3, #8]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d012      	beq.n	8014e24 <osMessageQueueNew+0x62>
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	2b4f      	cmp	r3, #79	@ 0x4f
 8014e04:	d90e      	bls.n	8014e24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d00a      	beq.n	8014e24 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	695a      	ldr	r2, [r3, #20]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	68b9      	ldr	r1, [r7, #8]
 8014e16:	fb01 f303 	mul.w	r3, r1, r3
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d302      	bcc.n	8014e24 <osMessageQueueNew+0x62>
        mem = 1;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	61bb      	str	r3, [r7, #24]
 8014e22:	e014      	b.n	8014e4e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	689b      	ldr	r3, [r3, #8]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d110      	bne.n	8014e4e <osMessageQueueNew+0x8c>
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d10c      	bne.n	8014e4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d108      	bne.n	8014e4e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	695b      	ldr	r3, [r3, #20]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d104      	bne.n	8014e4e <osMessageQueueNew+0x8c>
          mem = 0;
 8014e44:	2300      	movs	r3, #0
 8014e46:	61bb      	str	r3, [r7, #24]
 8014e48:	e001      	b.n	8014e4e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014e4e:	69bb      	ldr	r3, [r7, #24]
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	d10b      	bne.n	8014e6c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	691a      	ldr	r2, [r3, #16]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	689b      	ldr	r3, [r3, #8]
 8014e5c:	2100      	movs	r1, #0
 8014e5e:	9100      	str	r1, [sp, #0]
 8014e60:	68b9      	ldr	r1, [r7, #8]
 8014e62:	68f8      	ldr	r0, [r7, #12]
 8014e64:	f000 fa66 	bl	8015334 <xQueueGenericCreateStatic>
 8014e68:	61f8      	str	r0, [r7, #28]
 8014e6a:	e008      	b.n	8014e7e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8014e6c:	69bb      	ldr	r3, [r7, #24]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d105      	bne.n	8014e7e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014e72:	2200      	movs	r2, #0
 8014e74:	68b9      	ldr	r1, [r7, #8]
 8014e76:	68f8      	ldr	r0, [r7, #12]
 8014e78:	f000 fad9 	bl	801542e <xQueueGenericCreate>
 8014e7c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014e7e:	69fb      	ldr	r3, [r7, #28]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d00c      	beq.n	8014e9e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d003      	beq.n	8014e92 <osMessageQueueNew+0xd0>
        name = attr->name;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	617b      	str	r3, [r7, #20]
 8014e90:	e001      	b.n	8014e96 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014e92:	2300      	movs	r3, #0
 8014e94:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014e96:	6979      	ldr	r1, [r7, #20]
 8014e98:	69f8      	ldr	r0, [r7, #28]
 8014e9a:	f000 ff5f 	bl	8015d5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8014e9e:	69fb      	ldr	r3, [r7, #28]
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3720      	adds	r7, #32
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b088      	sub	sp, #32
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	603b      	str	r3, [r7, #0]
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ec0:	f3ef 8305 	mrs	r3, IPSR
 8014ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8014ec6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d028      	beq.n	8014f1e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014ecc:	69bb      	ldr	r3, [r7, #24]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d005      	beq.n	8014ede <osMessageQueuePut+0x36>
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d002      	beq.n	8014ede <osMessageQueuePut+0x36>
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d003      	beq.n	8014ee6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8014ede:	f06f 0303 	mvn.w	r3, #3
 8014ee2:	61fb      	str	r3, [r7, #28]
 8014ee4:	e038      	b.n	8014f58 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8014eea:	f107 0210 	add.w	r2, r7, #16
 8014eee:	2300      	movs	r3, #0
 8014ef0:	68b9      	ldr	r1, [r7, #8]
 8014ef2:	69b8      	ldr	r0, [r7, #24]
 8014ef4:	f000 fbfc 	bl	80156f0 <xQueueGenericSendFromISR>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d003      	beq.n	8014f06 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014efe:	f06f 0302 	mvn.w	r3, #2
 8014f02:	61fb      	str	r3, [r7, #28]
 8014f04:	e028      	b.n	8014f58 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d025      	beq.n	8014f58 <osMessageQueuePut+0xb0>
 8014f0c:	4b15      	ldr	r3, [pc, #84]	@ (8014f64 <osMessageQueuePut+0xbc>)
 8014f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f12:	601a      	str	r2, [r3, #0]
 8014f14:	f3bf 8f4f 	dsb	sy
 8014f18:	f3bf 8f6f 	isb	sy
 8014f1c:	e01c      	b.n	8014f58 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d002      	beq.n	8014f2a <osMessageQueuePut+0x82>
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d103      	bne.n	8014f32 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8014f2a:	f06f 0303 	mvn.w	r3, #3
 8014f2e:	61fb      	str	r3, [r7, #28]
 8014f30:	e012      	b.n	8014f58 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014f32:	2300      	movs	r3, #0
 8014f34:	683a      	ldr	r2, [r7, #0]
 8014f36:	68b9      	ldr	r1, [r7, #8]
 8014f38:	69b8      	ldr	r0, [r7, #24]
 8014f3a:	f000 fad7 	bl	80154ec <xQueueGenericSend>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d009      	beq.n	8014f58 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d003      	beq.n	8014f52 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8014f4a:	f06f 0301 	mvn.w	r3, #1
 8014f4e:	61fb      	str	r3, [r7, #28]
 8014f50:	e002      	b.n	8014f58 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014f52:	f06f 0302 	mvn.w	r3, #2
 8014f56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014f58:	69fb      	ldr	r3, [r7, #28]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3720      	adds	r7, #32
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	e000ed04 	.word	0xe000ed04

08014f68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b088      	sub	sp, #32
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	607a      	str	r2, [r7, #4]
 8014f74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f7e:	f3ef 8305 	mrs	r3, IPSR
 8014f82:	617b      	str	r3, [r7, #20]
  return(result);
 8014f84:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d028      	beq.n	8014fdc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d005      	beq.n	8014f9c <osMessageQueueGet+0x34>
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <osMessageQueueGet+0x34>
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d003      	beq.n	8014fa4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8014f9c:	f06f 0303 	mvn.w	r3, #3
 8014fa0:	61fb      	str	r3, [r7, #28]
 8014fa2:	e037      	b.n	8015014 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8014fa8:	f107 0310 	add.w	r3, r7, #16
 8014fac:	461a      	mov	r2, r3
 8014fae:	68b9      	ldr	r1, [r7, #8]
 8014fb0:	69b8      	ldr	r0, [r7, #24]
 8014fb2:	f000 fd1d 	bl	80159f0 <xQueueReceiveFromISR>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	d003      	beq.n	8014fc4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8014fbc:	f06f 0302 	mvn.w	r3, #2
 8014fc0:	61fb      	str	r3, [r7, #28]
 8014fc2:	e027      	b.n	8015014 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d024      	beq.n	8015014 <osMessageQueueGet+0xac>
 8014fca:	4b15      	ldr	r3, [pc, #84]	@ (8015020 <osMessageQueueGet+0xb8>)
 8014fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014fd0:	601a      	str	r2, [r3, #0]
 8014fd2:	f3bf 8f4f 	dsb	sy
 8014fd6:	f3bf 8f6f 	isb	sy
 8014fda:	e01b      	b.n	8015014 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014fdc:	69bb      	ldr	r3, [r7, #24]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d002      	beq.n	8014fe8 <osMessageQueueGet+0x80>
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d103      	bne.n	8014ff0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8014fe8:	f06f 0303 	mvn.w	r3, #3
 8014fec:	61fb      	str	r3, [r7, #28]
 8014fee:	e011      	b.n	8015014 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014ff0:	683a      	ldr	r2, [r7, #0]
 8014ff2:	68b9      	ldr	r1, [r7, #8]
 8014ff4:	69b8      	ldr	r0, [r7, #24]
 8014ff6:	f000 fc19 	bl	801582c <xQueueReceive>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d009      	beq.n	8015014 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d003      	beq.n	801500e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015006:	f06f 0301 	mvn.w	r3, #1
 801500a:	61fb      	str	r3, [r7, #28]
 801500c:	e002      	b.n	8015014 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801500e:	f06f 0302 	mvn.w	r3, #2
 8015012:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015014:	69fb      	ldr	r3, [r7, #28]
}
 8015016:	4618      	mov	r0, r3
 8015018:	3720      	adds	r7, #32
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	e000ed04 	.word	0xe000ed04

08015024 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 8015024:	b580      	push	{r7, lr}
 8015026:	b08a      	sub	sp, #40	@ 0x28
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	623b      	str	r3, [r7, #32]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 8015030:	6a3b      	ldr	r3, [r7, #32]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d102      	bne.n	801503c <osMessageQueueGetSpace+0x18>
    space = 0U;
 8015036:	2300      	movs	r3, #0
 8015038:	627b      	str	r3, [r7, #36]	@ 0x24
 801503a:	e023      	b.n	8015084 <osMessageQueueGetSpace+0x60>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801503c:	f3ef 8305 	mrs	r3, IPSR
 8015040:	61bb      	str	r3, [r7, #24]
  return(result);
 8015042:	69bb      	ldr	r3, [r7, #24]
  }
  else if (IS_IRQ()) {
 8015044:	2b00      	cmp	r3, #0
 8015046:	d019      	beq.n	801507c <osMessageQueueGetSpace+0x58>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015048:	f3ef 8211 	mrs	r2, BASEPRI
 801504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015050:	f383 8811 	msr	BASEPRI, r3
 8015054:	f3bf 8f6f 	isb	sy
 8015058:	f3bf 8f4f 	dsb	sy
 801505c:	613a      	str	r2, [r7, #16]
 801505e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015060:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 8015062:	61fb      	str	r3, [r7, #28]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015068:	6a3b      	ldr	r3, [r7, #32]
 801506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	627b      	str	r3, [r7, #36]	@ 0x24
 8015070:	69fb      	ldr	r3, [r7, #28]
 8015072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801507a:	e003      	b.n	8015084 <osMessageQueueGetSpace+0x60>

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 801507c:	6a38      	ldr	r0, [r7, #32]
 801507e:	f000 fd39 	bl	8015af4 <uxQueueSpacesAvailable>
 8015082:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return (space);
 8015084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015086:	4618      	mov	r0, r3
 8015088:	3728      	adds	r7, #40	@ 0x28
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
	...

08015090 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015090:	b480      	push	{r7}
 8015092:	b085      	sub	sp, #20
 8015094:	af00      	add	r7, sp, #0
 8015096:	60f8      	str	r0, [r7, #12]
 8015098:	60b9      	str	r1, [r7, #8]
 801509a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	4a07      	ldr	r2, [pc, #28]	@ (80150bc <vApplicationGetIdleTaskMemory+0x2c>)
 80150a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80150a2:	68bb      	ldr	r3, [r7, #8]
 80150a4:	4a06      	ldr	r2, [pc, #24]	@ (80150c0 <vApplicationGetIdleTaskMemory+0x30>)
 80150a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2280      	movs	r2, #128	@ 0x80
 80150ac:	601a      	str	r2, [r3, #0]
}
 80150ae:	bf00      	nop
 80150b0:	3714      	adds	r7, #20
 80150b2:	46bd      	mov	sp, r7
 80150b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b8:	4770      	bx	lr
 80150ba:	bf00      	nop
 80150bc:	24000a7c 	.word	0x24000a7c
 80150c0:	24000ad8 	.word	0x24000ad8

080150c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80150c4:	b480      	push	{r7}
 80150c6:	b085      	sub	sp, #20
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	4a07      	ldr	r2, [pc, #28]	@ (80150f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80150d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80150d6:	68bb      	ldr	r3, [r7, #8]
 80150d8:	4a06      	ldr	r2, [pc, #24]	@ (80150f4 <vApplicationGetTimerTaskMemory+0x30>)
 80150da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80150e2:	601a      	str	r2, [r3, #0]
}
 80150e4:	bf00      	nop
 80150e6:	3714      	adds	r7, #20
 80150e8:	46bd      	mov	sp, r7
 80150ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ee:	4770      	bx	lr
 80150f0:	24000cd8 	.word	0x24000cd8
 80150f4:	24000d34 	.word	0x24000d34

080150f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80150f8:	b480      	push	{r7}
 80150fa:	b083      	sub	sp, #12
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f103 0208 	add.w	r2, r3, #8
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f04f 32ff 	mov.w	r2, #4294967295
 8015110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f103 0208 	add.w	r2, r3, #8
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f103 0208 	add.w	r2, r3, #8
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801512c:	bf00      	nop
 801512e:	370c      	adds	r7, #12
 8015130:	46bd      	mov	sp, r7
 8015132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015136:	4770      	bx	lr

08015138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2200      	movs	r2, #0
 8015144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015146:	bf00      	nop
 8015148:	370c      	adds	r7, #12
 801514a:	46bd      	mov	sp, r7
 801514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015150:	4770      	bx	lr

08015152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015152:	b480      	push	{r7}
 8015154:	b085      	sub	sp, #20
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	68fa      	ldr	r2, [r7, #12]
 8015166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	689a      	ldr	r2, [r3, #8]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	689b      	ldr	r3, [r3, #8]
 8015174:	683a      	ldr	r2, [r7, #0]
 8015176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	1c5a      	adds	r2, r3, #1
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	601a      	str	r2, [r3, #0]
}
 801518e:	bf00      	nop
 8015190:	3714      	adds	r7, #20
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr

0801519a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801519a:	b480      	push	{r7}
 801519c:	b085      	sub	sp, #20
 801519e:	af00      	add	r7, sp, #0
 80151a0:	6078      	str	r0, [r7, #4]
 80151a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80151a4:	683b      	ldr	r3, [r7, #0]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80151aa:	68bb      	ldr	r3, [r7, #8]
 80151ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b0:	d103      	bne.n	80151ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	691b      	ldr	r3, [r3, #16]
 80151b6:	60fb      	str	r3, [r7, #12]
 80151b8:	e00c      	b.n	80151d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	3308      	adds	r3, #8
 80151be:	60fb      	str	r3, [r7, #12]
 80151c0:	e002      	b.n	80151c8 <vListInsert+0x2e>
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	60fb      	str	r3, [r7, #12]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d2f6      	bcs.n	80151c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	685a      	ldr	r2, [r3, #4]
 80151d8:	683b      	ldr	r3, [r7, #0]
 80151da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	685b      	ldr	r3, [r3, #4]
 80151e0:	683a      	ldr	r2, [r7, #0]
 80151e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	68fa      	ldr	r2, [r7, #12]
 80151e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	683a      	ldr	r2, [r7, #0]
 80151ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80151f0:	683b      	ldr	r3, [r7, #0]
 80151f2:	687a      	ldr	r2, [r7, #4]
 80151f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	1c5a      	adds	r2, r3, #1
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	601a      	str	r2, [r3, #0]
}
 8015200:	bf00      	nop
 8015202:	3714      	adds	r7, #20
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr

0801520c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801520c:	b480      	push	{r7}
 801520e:	b085      	sub	sp, #20
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	691b      	ldr	r3, [r3, #16]
 8015218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	685b      	ldr	r3, [r3, #4]
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	6892      	ldr	r2, [r2, #8]
 8015222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	689b      	ldr	r3, [r3, #8]
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	6852      	ldr	r2, [r2, #4]
 801522c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	687a      	ldr	r2, [r7, #4]
 8015234:	429a      	cmp	r2, r3
 8015236:	d103      	bne.n	8015240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	689a      	ldr	r2, [r3, #8]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2200      	movs	r2, #0
 8015244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	1e5a      	subs	r2, r3, #1
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	681b      	ldr	r3, [r3, #0]
}
 8015254:	4618      	mov	r0, r3
 8015256:	3714      	adds	r7, #20
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr

08015260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d10b      	bne.n	801528c <xQueueGenericReset+0x2c>
	__asm volatile
 8015274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015278:	f383 8811 	msr	BASEPRI, r3
 801527c:	f3bf 8f6f 	isb	sy
 8015280:	f3bf 8f4f 	dsb	sy
 8015284:	60bb      	str	r3, [r7, #8]
}
 8015286:	bf00      	nop
 8015288:	bf00      	nop
 801528a:	e7fd      	b.n	8015288 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801528c:	f002 f95c 	bl	8017548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	681a      	ldr	r2, [r3, #0]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015298:	68f9      	ldr	r1, [r7, #12]
 801529a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801529c:	fb01 f303 	mul.w	r3, r1, r3
 80152a0:	441a      	add	r2, r3
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	2200      	movs	r2, #0
 80152aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	681a      	ldr	r2, [r3, #0]
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80152bc:	3b01      	subs	r3, #1
 80152be:	68f9      	ldr	r1, [r7, #12]
 80152c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80152c2:	fb01 f303 	mul.w	r3, r1, r3
 80152c6:	441a      	add	r2, r3
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	22ff      	movs	r2, #255	@ 0xff
 80152d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	22ff      	movs	r2, #255	@ 0xff
 80152d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d114      	bne.n	801530c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	691b      	ldr	r3, [r3, #16]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d01a      	beq.n	8015320 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	3310      	adds	r3, #16
 80152ee:	4618      	mov	r0, r3
 80152f0:	f001 f9fc 	bl	80166ec <xTaskRemoveFromEventList>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d012      	beq.n	8015320 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80152fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015330 <xQueueGenericReset+0xd0>)
 80152fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015300:	601a      	str	r2, [r3, #0]
 8015302:	f3bf 8f4f 	dsb	sy
 8015306:	f3bf 8f6f 	isb	sy
 801530a:	e009      	b.n	8015320 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	3310      	adds	r3, #16
 8015310:	4618      	mov	r0, r3
 8015312:	f7ff fef1 	bl	80150f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	3324      	adds	r3, #36	@ 0x24
 801531a:	4618      	mov	r0, r3
 801531c:	f7ff feec 	bl	80150f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015320:	f002 f944 	bl	80175ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015324:	2301      	movs	r3, #1
}
 8015326:	4618      	mov	r0, r3
 8015328:	3710      	adds	r7, #16
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	e000ed04 	.word	0xe000ed04

08015334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015334:	b580      	push	{r7, lr}
 8015336:	b08e      	sub	sp, #56	@ 0x38
 8015338:	af02      	add	r7, sp, #8
 801533a:	60f8      	str	r0, [r7, #12]
 801533c:	60b9      	str	r1, [r7, #8]
 801533e:	607a      	str	r2, [r7, #4]
 8015340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d10b      	bne.n	8015360 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8015348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801534c:	f383 8811 	msr	BASEPRI, r3
 8015350:	f3bf 8f6f 	isb	sy
 8015354:	f3bf 8f4f 	dsb	sy
 8015358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801535a:	bf00      	nop
 801535c:	bf00      	nop
 801535e:	e7fd      	b.n	801535c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015360:	683b      	ldr	r3, [r7, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d10b      	bne.n	801537e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8015366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801536a:	f383 8811 	msr	BASEPRI, r3
 801536e:	f3bf 8f6f 	isb	sy
 8015372:	f3bf 8f4f 	dsb	sy
 8015376:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015378:	bf00      	nop
 801537a:	bf00      	nop
 801537c:	e7fd      	b.n	801537a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d002      	beq.n	801538a <xQueueGenericCreateStatic+0x56>
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d001      	beq.n	801538e <xQueueGenericCreateStatic+0x5a>
 801538a:	2301      	movs	r3, #1
 801538c:	e000      	b.n	8015390 <xQueueGenericCreateStatic+0x5c>
 801538e:	2300      	movs	r3, #0
 8015390:	2b00      	cmp	r3, #0
 8015392:	d10b      	bne.n	80153ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8015394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015398:	f383 8811 	msr	BASEPRI, r3
 801539c:	f3bf 8f6f 	isb	sy
 80153a0:	f3bf 8f4f 	dsb	sy
 80153a4:	623b      	str	r3, [r7, #32]
}
 80153a6:	bf00      	nop
 80153a8:	bf00      	nop
 80153aa:	e7fd      	b.n	80153a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d102      	bne.n	80153b8 <xQueueGenericCreateStatic+0x84>
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d101      	bne.n	80153bc <xQueueGenericCreateStatic+0x88>
 80153b8:	2301      	movs	r3, #1
 80153ba:	e000      	b.n	80153be <xQueueGenericCreateStatic+0x8a>
 80153bc:	2300      	movs	r3, #0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d10b      	bne.n	80153da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80153c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c6:	f383 8811 	msr	BASEPRI, r3
 80153ca:	f3bf 8f6f 	isb	sy
 80153ce:	f3bf 8f4f 	dsb	sy
 80153d2:	61fb      	str	r3, [r7, #28]
}
 80153d4:	bf00      	nop
 80153d6:	bf00      	nop
 80153d8:	e7fd      	b.n	80153d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80153da:	2350      	movs	r3, #80	@ 0x50
 80153dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	2b50      	cmp	r3, #80	@ 0x50
 80153e2:	d00b      	beq.n	80153fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80153e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153e8:	f383 8811 	msr	BASEPRI, r3
 80153ec:	f3bf 8f6f 	isb	sy
 80153f0:	f3bf 8f4f 	dsb	sy
 80153f4:	61bb      	str	r3, [r7, #24]
}
 80153f6:	bf00      	nop
 80153f8:	bf00      	nop
 80153fa:	e7fd      	b.n	80153f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80153fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8015402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015404:	2b00      	cmp	r3, #0
 8015406:	d00d      	beq.n	8015424 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	2201      	movs	r2, #1
 801540c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015410:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8015414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	4613      	mov	r3, r2
 801541a:	687a      	ldr	r2, [r7, #4]
 801541c:	68b9      	ldr	r1, [r7, #8]
 801541e:	68f8      	ldr	r0, [r7, #12]
 8015420:	f000 f840 	bl	80154a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8015426:	4618      	mov	r0, r3
 8015428:	3730      	adds	r7, #48	@ 0x30
 801542a:	46bd      	mov	sp, r7
 801542c:	bd80      	pop	{r7, pc}

0801542e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801542e:	b580      	push	{r7, lr}
 8015430:	b08a      	sub	sp, #40	@ 0x28
 8015432:	af02      	add	r7, sp, #8
 8015434:	60f8      	str	r0, [r7, #12]
 8015436:	60b9      	str	r1, [r7, #8]
 8015438:	4613      	mov	r3, r2
 801543a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d10b      	bne.n	801545a <xQueueGenericCreate+0x2c>
	__asm volatile
 8015442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015446:	f383 8811 	msr	BASEPRI, r3
 801544a:	f3bf 8f6f 	isb	sy
 801544e:	f3bf 8f4f 	dsb	sy
 8015452:	613b      	str	r3, [r7, #16]
}
 8015454:	bf00      	nop
 8015456:	bf00      	nop
 8015458:	e7fd      	b.n	8015456 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	68ba      	ldr	r2, [r7, #8]
 801545e:	fb02 f303 	mul.w	r3, r2, r3
 8015462:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015464:	69fb      	ldr	r3, [r7, #28]
 8015466:	3350      	adds	r3, #80	@ 0x50
 8015468:	4618      	mov	r0, r3
 801546a:	f002 f98f 	bl	801778c <pvPortMalloc>
 801546e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015470:	69bb      	ldr	r3, [r7, #24]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d011      	beq.n	801549a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	3350      	adds	r3, #80	@ 0x50
 801547e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	2200      	movs	r2, #0
 8015484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015488:	79fa      	ldrb	r2, [r7, #7]
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	4613      	mov	r3, r2
 8015490:	697a      	ldr	r2, [r7, #20]
 8015492:	68b9      	ldr	r1, [r7, #8]
 8015494:	68f8      	ldr	r0, [r7, #12]
 8015496:	f000 f805 	bl	80154a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801549a:	69bb      	ldr	r3, [r7, #24]
	}
 801549c:	4618      	mov	r0, r3
 801549e:	3720      	adds	r7, #32
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	607a      	str	r2, [r7, #4]
 80154b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d103      	bne.n	80154c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80154b8:	69bb      	ldr	r3, [r7, #24]
 80154ba:	69ba      	ldr	r2, [r7, #24]
 80154bc:	601a      	str	r2, [r3, #0]
 80154be:	e002      	b.n	80154c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80154c6:	69bb      	ldr	r3, [r7, #24]
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	68ba      	ldr	r2, [r7, #8]
 80154d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80154d2:	2101      	movs	r1, #1
 80154d4:	69b8      	ldr	r0, [r7, #24]
 80154d6:	f7ff fec3 	bl	8015260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80154da:	69bb      	ldr	r3, [r7, #24]
 80154dc:	78fa      	ldrb	r2, [r7, #3]
 80154de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80154e2:	bf00      	nop
 80154e4:	3710      	adds	r7, #16
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}
	...

080154ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b08e      	sub	sp, #56	@ 0x38
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	60f8      	str	r0, [r7, #12]
 80154f4:	60b9      	str	r1, [r7, #8]
 80154f6:	607a      	str	r2, [r7, #4]
 80154f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80154fa:	2300      	movs	r3, #0
 80154fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015504:	2b00      	cmp	r3, #0
 8015506:	d10b      	bne.n	8015520 <xQueueGenericSend+0x34>
	__asm volatile
 8015508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801550c:	f383 8811 	msr	BASEPRI, r3
 8015510:	f3bf 8f6f 	isb	sy
 8015514:	f3bf 8f4f 	dsb	sy
 8015518:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801551a:	bf00      	nop
 801551c:	bf00      	nop
 801551e:	e7fd      	b.n	801551c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d103      	bne.n	801552e <xQueueGenericSend+0x42>
 8015526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801552a:	2b00      	cmp	r3, #0
 801552c:	d101      	bne.n	8015532 <xQueueGenericSend+0x46>
 801552e:	2301      	movs	r3, #1
 8015530:	e000      	b.n	8015534 <xQueueGenericSend+0x48>
 8015532:	2300      	movs	r3, #0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10b      	bne.n	8015550 <xQueueGenericSend+0x64>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801553c:	f383 8811 	msr	BASEPRI, r3
 8015540:	f3bf 8f6f 	isb	sy
 8015544:	f3bf 8f4f 	dsb	sy
 8015548:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801554a:	bf00      	nop
 801554c:	bf00      	nop
 801554e:	e7fd      	b.n	801554c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	2b02      	cmp	r3, #2
 8015554:	d103      	bne.n	801555e <xQueueGenericSend+0x72>
 8015556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801555a:	2b01      	cmp	r3, #1
 801555c:	d101      	bne.n	8015562 <xQueueGenericSend+0x76>
 801555e:	2301      	movs	r3, #1
 8015560:	e000      	b.n	8015564 <xQueueGenericSend+0x78>
 8015562:	2300      	movs	r3, #0
 8015564:	2b00      	cmp	r3, #0
 8015566:	d10b      	bne.n	8015580 <xQueueGenericSend+0x94>
	__asm volatile
 8015568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801556c:	f383 8811 	msr	BASEPRI, r3
 8015570:	f3bf 8f6f 	isb	sy
 8015574:	f3bf 8f4f 	dsb	sy
 8015578:	623b      	str	r3, [r7, #32]
}
 801557a:	bf00      	nop
 801557c:	bf00      	nop
 801557e:	e7fd      	b.n	801557c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015580:	f001 fa74 	bl	8016a6c <xTaskGetSchedulerState>
 8015584:	4603      	mov	r3, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	d102      	bne.n	8015590 <xQueueGenericSend+0xa4>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <xQueueGenericSend+0xa8>
 8015590:	2301      	movs	r3, #1
 8015592:	e000      	b.n	8015596 <xQueueGenericSend+0xaa>
 8015594:	2300      	movs	r3, #0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d10b      	bne.n	80155b2 <xQueueGenericSend+0xc6>
	__asm volatile
 801559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801559e:	f383 8811 	msr	BASEPRI, r3
 80155a2:	f3bf 8f6f 	isb	sy
 80155a6:	f3bf 8f4f 	dsb	sy
 80155aa:	61fb      	str	r3, [r7, #28]
}
 80155ac:	bf00      	nop
 80155ae:	bf00      	nop
 80155b0:	e7fd      	b.n	80155ae <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80155b2:	f001 ffc9 	bl	8017548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80155ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155be:	429a      	cmp	r2, r3
 80155c0:	d302      	bcc.n	80155c8 <xQueueGenericSend+0xdc>
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	2b02      	cmp	r3, #2
 80155c6:	d129      	bne.n	801561c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80155c8:	683a      	ldr	r2, [r7, #0]
 80155ca:	68b9      	ldr	r1, [r7, #8]
 80155cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80155ce:	f000 fab5 	bl	8015b3c <prvCopyDataToQueue>
 80155d2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80155d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d010      	beq.n	80155fe <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80155dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155de:	3324      	adds	r3, #36	@ 0x24
 80155e0:	4618      	mov	r0, r3
 80155e2:	f001 f883 	bl	80166ec <xTaskRemoveFromEventList>
 80155e6:	4603      	mov	r3, r0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d013      	beq.n	8015614 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80155ec:	4b3f      	ldr	r3, [pc, #252]	@ (80156ec <xQueueGenericSend+0x200>)
 80155ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155f2:	601a      	str	r2, [r3, #0]
 80155f4:	f3bf 8f4f 	dsb	sy
 80155f8:	f3bf 8f6f 	isb	sy
 80155fc:	e00a      	b.n	8015614 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80155fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015600:	2b00      	cmp	r3, #0
 8015602:	d007      	beq.n	8015614 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015604:	4b39      	ldr	r3, [pc, #228]	@ (80156ec <xQueueGenericSend+0x200>)
 8015606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801560a:	601a      	str	r2, [r3, #0]
 801560c:	f3bf 8f4f 	dsb	sy
 8015610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015614:	f001 ffca 	bl	80175ac <vPortExitCritical>
				return pdPASS;
 8015618:	2301      	movs	r3, #1
 801561a:	e063      	b.n	80156e4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d103      	bne.n	801562a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015622:	f001 ffc3 	bl	80175ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015626:	2300      	movs	r3, #0
 8015628:	e05c      	b.n	80156e4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801562a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801562c:	2b00      	cmp	r3, #0
 801562e:	d106      	bne.n	801563e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015630:	f107 0314 	add.w	r3, r7, #20
 8015634:	4618      	mov	r0, r3
 8015636:	f001 f8bd 	bl	80167b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801563a:	2301      	movs	r3, #1
 801563c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801563e:	f001 ffb5 	bl	80175ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015642:	f000 fe2d 	bl	80162a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015646:	f001 ff7f 	bl	8017548 <vPortEnterCritical>
 801564a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801564c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015650:	b25b      	sxtb	r3, r3
 8015652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015656:	d103      	bne.n	8015660 <xQueueGenericSend+0x174>
 8015658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801565a:	2200      	movs	r2, #0
 801565c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015662:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015666:	b25b      	sxtb	r3, r3
 8015668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801566c:	d103      	bne.n	8015676 <xQueueGenericSend+0x18a>
 801566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015670:	2200      	movs	r2, #0
 8015672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015676:	f001 ff99 	bl	80175ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801567a:	1d3a      	adds	r2, r7, #4
 801567c:	f107 0314 	add.w	r3, r7, #20
 8015680:	4611      	mov	r1, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f001 f8ac 	bl	80167e0 <xTaskCheckForTimeOut>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d124      	bne.n	80156d8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801568e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015690:	f000 fb4c 	bl	8015d2c <prvIsQueueFull>
 8015694:	4603      	mov	r3, r0
 8015696:	2b00      	cmp	r3, #0
 8015698:	d018      	beq.n	80156cc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801569a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801569c:	3310      	adds	r3, #16
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	4611      	mov	r1, r2
 80156a2:	4618      	mov	r0, r3
 80156a4:	f000 ffd0 	bl	8016648 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80156a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156aa:	f000 fad7 	bl	8015c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80156ae:	f000 fe05 	bl	80162bc <xTaskResumeAll>
 80156b2:	4603      	mov	r3, r0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	f47f af7c 	bne.w	80155b2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80156ba:	4b0c      	ldr	r3, [pc, #48]	@ (80156ec <xQueueGenericSend+0x200>)
 80156bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80156c0:	601a      	str	r2, [r3, #0]
 80156c2:	f3bf 8f4f 	dsb	sy
 80156c6:	f3bf 8f6f 	isb	sy
 80156ca:	e772      	b.n	80155b2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80156cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156ce:	f000 fac5 	bl	8015c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80156d2:	f000 fdf3 	bl	80162bc <xTaskResumeAll>
 80156d6:	e76c      	b.n	80155b2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80156d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156da:	f000 fabf 	bl	8015c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80156de:	f000 fded 	bl	80162bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80156e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3738      	adds	r7, #56	@ 0x38
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	e000ed04 	.word	0xe000ed04

080156f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b090      	sub	sp, #64	@ 0x40
 80156f4:	af00      	add	r7, sp, #0
 80156f6:	60f8      	str	r0, [r7, #12]
 80156f8:	60b9      	str	r1, [r7, #8]
 80156fa:	607a      	str	r2, [r7, #4]
 80156fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8015702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015704:	2b00      	cmp	r3, #0
 8015706:	d10b      	bne.n	8015720 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8015708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801570c:	f383 8811 	msr	BASEPRI, r3
 8015710:	f3bf 8f6f 	isb	sy
 8015714:	f3bf 8f4f 	dsb	sy
 8015718:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801571a:	bf00      	nop
 801571c:	bf00      	nop
 801571e:	e7fd      	b.n	801571c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015720:	68bb      	ldr	r3, [r7, #8]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d103      	bne.n	801572e <xQueueGenericSendFromISR+0x3e>
 8015726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <xQueueGenericSendFromISR+0x42>
 801572e:	2301      	movs	r3, #1
 8015730:	e000      	b.n	8015734 <xQueueGenericSendFromISR+0x44>
 8015732:	2300      	movs	r3, #0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d10b      	bne.n	8015750 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8015738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801573c:	f383 8811 	msr	BASEPRI, r3
 8015740:	f3bf 8f6f 	isb	sy
 8015744:	f3bf 8f4f 	dsb	sy
 8015748:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801574a:	bf00      	nop
 801574c:	bf00      	nop
 801574e:	e7fd      	b.n	801574c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	2b02      	cmp	r3, #2
 8015754:	d103      	bne.n	801575e <xQueueGenericSendFromISR+0x6e>
 8015756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801575a:	2b01      	cmp	r3, #1
 801575c:	d101      	bne.n	8015762 <xQueueGenericSendFromISR+0x72>
 801575e:	2301      	movs	r3, #1
 8015760:	e000      	b.n	8015764 <xQueueGenericSendFromISR+0x74>
 8015762:	2300      	movs	r3, #0
 8015764:	2b00      	cmp	r3, #0
 8015766:	d10b      	bne.n	8015780 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8015768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801576c:	f383 8811 	msr	BASEPRI, r3
 8015770:	f3bf 8f6f 	isb	sy
 8015774:	f3bf 8f4f 	dsb	sy
 8015778:	623b      	str	r3, [r7, #32]
}
 801577a:	bf00      	nop
 801577c:	bf00      	nop
 801577e:	e7fd      	b.n	801577c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015780:	f001 ffc2 	bl	8017708 <vPortValidateInterruptPriority>
	__asm volatile
 8015784:	f3ef 8211 	mrs	r2, BASEPRI
 8015788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801578c:	f383 8811 	msr	BASEPRI, r3
 8015790:	f3bf 8f6f 	isb	sy
 8015794:	f3bf 8f4f 	dsb	sy
 8015798:	61fa      	str	r2, [r7, #28]
 801579a:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 801579c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801579e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80157a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d302      	bcc.n	80157b2 <xQueueGenericSendFromISR+0xc2>
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	2b02      	cmp	r3, #2
 80157b0:	d12f      	bne.n	8015812 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80157b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80157b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80157bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80157c2:	683a      	ldr	r2, [r7, #0]
 80157c4:	68b9      	ldr	r1, [r7, #8]
 80157c6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80157c8:	f000 f9b8 	bl	8015b3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80157cc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80157d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157d4:	d112      	bne.n	80157fc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80157d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d016      	beq.n	801580c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157e0:	3324      	adds	r3, #36	@ 0x24
 80157e2:	4618      	mov	r0, r3
 80157e4:	f000 ff82 	bl	80166ec <xTaskRemoveFromEventList>
 80157e8:	4603      	mov	r3, r0
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d00e      	beq.n	801580c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d00b      	beq.n	801580c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2201      	movs	r2, #1
 80157f8:	601a      	str	r2, [r3, #0]
 80157fa:	e007      	b.n	801580c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80157fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015800:	3301      	adds	r3, #1
 8015802:	b2db      	uxtb	r3, r3
 8015804:	b25a      	sxtb	r2, r3
 8015806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801580c:	2301      	movs	r3, #1
 801580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8015810:	e001      	b.n	8015816 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015812:	2300      	movs	r3, #0
 8015814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015818:	617b      	str	r3, [r7, #20]
	__asm volatile
 801581a:	697b      	ldr	r3, [r7, #20]
 801581c:	f383 8811 	msr	BASEPRI, r3
}
 8015820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8015824:	4618      	mov	r0, r3
 8015826:	3740      	adds	r7, #64	@ 0x40
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}

0801582c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b08c      	sub	sp, #48	@ 0x30
 8015830:	af00      	add	r7, sp, #0
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	60b9      	str	r1, [r7, #8]
 8015836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015838:	2300      	movs	r3, #0
 801583a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015842:	2b00      	cmp	r3, #0
 8015844:	d10b      	bne.n	801585e <xQueueReceive+0x32>
	__asm volatile
 8015846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801584a:	f383 8811 	msr	BASEPRI, r3
 801584e:	f3bf 8f6f 	isb	sy
 8015852:	f3bf 8f4f 	dsb	sy
 8015856:	623b      	str	r3, [r7, #32]
}
 8015858:	bf00      	nop
 801585a:	bf00      	nop
 801585c:	e7fd      	b.n	801585a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d103      	bne.n	801586c <xQueueReceive+0x40>
 8015864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015868:	2b00      	cmp	r3, #0
 801586a:	d101      	bne.n	8015870 <xQueueReceive+0x44>
 801586c:	2301      	movs	r3, #1
 801586e:	e000      	b.n	8015872 <xQueueReceive+0x46>
 8015870:	2300      	movs	r3, #0
 8015872:	2b00      	cmp	r3, #0
 8015874:	d10b      	bne.n	801588e <xQueueReceive+0x62>
	__asm volatile
 8015876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801587a:	f383 8811 	msr	BASEPRI, r3
 801587e:	f3bf 8f6f 	isb	sy
 8015882:	f3bf 8f4f 	dsb	sy
 8015886:	61fb      	str	r3, [r7, #28]
}
 8015888:	bf00      	nop
 801588a:	bf00      	nop
 801588c:	e7fd      	b.n	801588a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801588e:	f001 f8ed 	bl	8016a6c <xTaskGetSchedulerState>
 8015892:	4603      	mov	r3, r0
 8015894:	2b00      	cmp	r3, #0
 8015896:	d102      	bne.n	801589e <xQueueReceive+0x72>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d101      	bne.n	80158a2 <xQueueReceive+0x76>
 801589e:	2301      	movs	r3, #1
 80158a0:	e000      	b.n	80158a4 <xQueueReceive+0x78>
 80158a2:	2300      	movs	r3, #0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d10b      	bne.n	80158c0 <xQueueReceive+0x94>
	__asm volatile
 80158a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158ac:	f383 8811 	msr	BASEPRI, r3
 80158b0:	f3bf 8f6f 	isb	sy
 80158b4:	f3bf 8f4f 	dsb	sy
 80158b8:	61bb      	str	r3, [r7, #24]
}
 80158ba:	bf00      	nop
 80158bc:	bf00      	nop
 80158be:	e7fd      	b.n	80158bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80158c0:	f001 fe42 	bl	8017548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80158c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80158ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d01f      	beq.n	8015910 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80158d0:	68b9      	ldr	r1, [r7, #8]
 80158d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158d4:	f000 f99c 	bl	8015c10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80158d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158da:	1e5a      	subs	r2, r3, #1
 80158dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158e2:	691b      	ldr	r3, [r3, #16]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d00f      	beq.n	8015908 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ea:	3310      	adds	r3, #16
 80158ec:	4618      	mov	r0, r3
 80158ee:	f000 fefd 	bl	80166ec <xTaskRemoveFromEventList>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d007      	beq.n	8015908 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80158f8:	4b3c      	ldr	r3, [pc, #240]	@ (80159ec <xQueueReceive+0x1c0>)
 80158fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80158fe:	601a      	str	r2, [r3, #0]
 8015900:	f3bf 8f4f 	dsb	sy
 8015904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015908:	f001 fe50 	bl	80175ac <vPortExitCritical>
				return pdPASS;
 801590c:	2301      	movs	r3, #1
 801590e:	e069      	b.n	80159e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d103      	bne.n	801591e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015916:	f001 fe49 	bl	80175ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801591a:	2300      	movs	r3, #0
 801591c:	e062      	b.n	80159e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801591e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015920:	2b00      	cmp	r3, #0
 8015922:	d106      	bne.n	8015932 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015924:	f107 0310 	add.w	r3, r7, #16
 8015928:	4618      	mov	r0, r3
 801592a:	f000 ff43 	bl	80167b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801592e:	2301      	movs	r3, #1
 8015930:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015932:	f001 fe3b 	bl	80175ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015936:	f000 fcb3 	bl	80162a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801593a:	f001 fe05 	bl	8017548 <vPortEnterCritical>
 801593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015944:	b25b      	sxtb	r3, r3
 8015946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801594a:	d103      	bne.n	8015954 <xQueueReceive+0x128>
 801594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801594e:	2200      	movs	r2, #0
 8015950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801595a:	b25b      	sxtb	r3, r3
 801595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015960:	d103      	bne.n	801596a <xQueueReceive+0x13e>
 8015962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015964:	2200      	movs	r2, #0
 8015966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801596a:	f001 fe1f 	bl	80175ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801596e:	1d3a      	adds	r2, r7, #4
 8015970:	f107 0310 	add.w	r3, r7, #16
 8015974:	4611      	mov	r1, r2
 8015976:	4618      	mov	r0, r3
 8015978:	f000 ff32 	bl	80167e0 <xTaskCheckForTimeOut>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d123      	bne.n	80159ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015984:	f000 f9bc 	bl	8015d00 <prvIsQueueEmpty>
 8015988:	4603      	mov	r3, r0
 801598a:	2b00      	cmp	r3, #0
 801598c:	d017      	beq.n	80159be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015990:	3324      	adds	r3, #36	@ 0x24
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	4611      	mov	r1, r2
 8015996:	4618      	mov	r0, r3
 8015998:	f000 fe56 	bl	8016648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801599c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801599e:	f000 f95d 	bl	8015c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80159a2:	f000 fc8b 	bl	80162bc <xTaskResumeAll>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d189      	bne.n	80158c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80159ac:	4b0f      	ldr	r3, [pc, #60]	@ (80159ec <xQueueReceive+0x1c0>)
 80159ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	f3bf 8f4f 	dsb	sy
 80159b8:	f3bf 8f6f 	isb	sy
 80159bc:	e780      	b.n	80158c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80159be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159c0:	f000 f94c 	bl	8015c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159c4:	f000 fc7a 	bl	80162bc <xTaskResumeAll>
 80159c8:	e77a      	b.n	80158c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80159ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159cc:	f000 f946 	bl	8015c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80159d0:	f000 fc74 	bl	80162bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159d6:	f000 f993 	bl	8015d00 <prvIsQueueEmpty>
 80159da:	4603      	mov	r3, r0
 80159dc:	2b00      	cmp	r3, #0
 80159de:	f43f af6f 	beq.w	80158c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80159e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3730      	adds	r7, #48	@ 0x30
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	e000ed04 	.word	0xe000ed04

080159f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b08e      	sub	sp, #56	@ 0x38
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d10b      	bne.n	8015a1e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8015a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a0a:	f383 8811 	msr	BASEPRI, r3
 8015a0e:	f3bf 8f6f 	isb	sy
 8015a12:	f3bf 8f4f 	dsb	sy
 8015a16:	623b      	str	r3, [r7, #32]
}
 8015a18:	bf00      	nop
 8015a1a:	bf00      	nop
 8015a1c:	e7fd      	b.n	8015a1a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d103      	bne.n	8015a2c <xQueueReceiveFromISR+0x3c>
 8015a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d101      	bne.n	8015a30 <xQueueReceiveFromISR+0x40>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e000      	b.n	8015a32 <xQueueReceiveFromISR+0x42>
 8015a30:	2300      	movs	r3, #0
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d10b      	bne.n	8015a4e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8015a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a3a:	f383 8811 	msr	BASEPRI, r3
 8015a3e:	f3bf 8f6f 	isb	sy
 8015a42:	f3bf 8f4f 	dsb	sy
 8015a46:	61fb      	str	r3, [r7, #28]
}
 8015a48:	bf00      	nop
 8015a4a:	bf00      	nop
 8015a4c:	e7fd      	b.n	8015a4a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a4e:	f001 fe5b 	bl	8017708 <vPortValidateInterruptPriority>
	__asm volatile
 8015a52:	f3ef 8211 	mrs	r2, BASEPRI
 8015a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a5a:	f383 8811 	msr	BASEPRI, r3
 8015a5e:	f3bf 8f6f 	isb	sy
 8015a62:	f3bf 8f4f 	dsb	sy
 8015a66:	61ba      	str	r2, [r7, #24]
 8015a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015a6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015a72:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d02f      	beq.n	8015ada <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015a80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015a84:	68b9      	ldr	r1, [r7, #8]
 8015a86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a88:	f000 f8c2 	bl	8015c10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8e:	1e5a      	subs	r2, r3, #1
 8015a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a9c:	d112      	bne.n	8015ac4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa0:	691b      	ldr	r3, [r3, #16]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d016      	beq.n	8015ad4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015aa8:	3310      	adds	r3, #16
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f000 fe1e 	bl	80166ec <xTaskRemoveFromEventList>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d00e      	beq.n	8015ad4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00b      	beq.n	8015ad4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	601a      	str	r2, [r3, #0]
 8015ac2:	e007      	b.n	8015ad4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ac8:	3301      	adds	r3, #1
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	b25a      	sxtb	r2, r3
 8015ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015ad4:	2301      	movs	r3, #1
 8015ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ad8:	e001      	b.n	8015ade <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8015ada:	2300      	movs	r3, #0
 8015adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8015ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	f383 8811 	msr	BASEPRI, r3
}
 8015ae8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3738      	adds	r7, #56	@ 0x38
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}

08015af4 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10b      	bne.n	8015b1e <uxQueueSpacesAvailable+0x2a>
	__asm volatile
 8015b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b0a:	f383 8811 	msr	BASEPRI, r3
 8015b0e:	f3bf 8f6f 	isb	sy
 8015b12:	f3bf 8f4f 	dsb	sy
 8015b16:	60fb      	str	r3, [r7, #12]
}
 8015b18:	bf00      	nop
 8015b1a:	bf00      	nop
 8015b1c:	e7fd      	b.n	8015b1a <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 8015b1e:	f001 fd13 	bl	8017548 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b2a:	1ad3      	subs	r3, r2, r3
 8015b2c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8015b2e:	f001 fd3d 	bl	80175ac <vPortExitCritical>

	return uxReturn;
 8015b32:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015b34:	4618      	mov	r0, r3
 8015b36:	3718      	adds	r7, #24
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b086      	sub	sp, #24
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d10d      	bne.n	8015b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d14d      	bne.n	8015bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	689b      	ldr	r3, [r3, #8]
 8015b66:	4618      	mov	r0, r3
 8015b68:	f000 ff9e 	bl	8016aa8 <xTaskPriorityDisinherit>
 8015b6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2200      	movs	r2, #0
 8015b72:	609a      	str	r2, [r3, #8]
 8015b74:	e043      	b.n	8015bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d119      	bne.n	8015bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	6858      	ldr	r0, [r3, #4]
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b84:	461a      	mov	r2, r3
 8015b86:	68b9      	ldr	r1, [r7, #8]
 8015b88:	f003 f8b2 	bl	8018cf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	685a      	ldr	r2, [r3, #4]
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015b94:	441a      	add	r2, r3
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	685a      	ldr	r2, [r3, #4]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	689b      	ldr	r3, [r3, #8]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d32b      	bcc.n	8015bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	681a      	ldr	r2, [r3, #0]
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	605a      	str	r2, [r3, #4]
 8015bae:	e026      	b.n	8015bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	68d8      	ldr	r0, [r3, #12]
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bb8:	461a      	mov	r2, r3
 8015bba:	68b9      	ldr	r1, [r7, #8]
 8015bbc:	f003 f898 	bl	8018cf0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	68da      	ldr	r2, [r3, #12]
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bc8:	425b      	negs	r3, r3
 8015bca:	441a      	add	r2, r3
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	68da      	ldr	r2, [r3, #12]
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d207      	bcs.n	8015bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	689a      	ldr	r2, [r3, #8]
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015be4:	425b      	negs	r3, r3
 8015be6:	441a      	add	r2, r3
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2b02      	cmp	r3, #2
 8015bf0:	d105      	bne.n	8015bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d002      	beq.n	8015bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	3b01      	subs	r3, #1
 8015bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	1c5a      	adds	r2, r3, #1
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015c06:	697b      	ldr	r3, [r7, #20]
}
 8015c08:	4618      	mov	r0, r3
 8015c0a:	3718      	adds	r7, #24
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}

08015c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
 8015c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d018      	beq.n	8015c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	68da      	ldr	r2, [r3, #12]
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c2a:	441a      	add	r2, r3
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	68da      	ldr	r2, [r3, #12]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	689b      	ldr	r3, [r3, #8]
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d303      	bcc.n	8015c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	681a      	ldr	r2, [r3, #0]
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	68d9      	ldr	r1, [r3, #12]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c4c:	461a      	mov	r2, r3
 8015c4e:	6838      	ldr	r0, [r7, #0]
 8015c50:	f003 f84e 	bl	8018cf0 <memcpy>
	}
}
 8015c54:	bf00      	nop
 8015c56:	3708      	adds	r7, #8
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}

08015c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015c5c:	b580      	push	{r7, lr}
 8015c5e:	b084      	sub	sp, #16
 8015c60:	af00      	add	r7, sp, #0
 8015c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015c64:	f001 fc70 	bl	8017548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015c70:	e011      	b.n	8015c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d012      	beq.n	8015ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	3324      	adds	r3, #36	@ 0x24
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f000 fd34 	bl	80166ec <xTaskRemoveFromEventList>
 8015c84:	4603      	mov	r3, r0
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d001      	beq.n	8015c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015c8a:	f000 fe0d 	bl	80168a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015c8e:	7bfb      	ldrb	r3, [r7, #15]
 8015c90:	3b01      	subs	r3, #1
 8015c92:	b2db      	uxtb	r3, r3
 8015c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	dce9      	bgt.n	8015c72 <prvUnlockQueue+0x16>
 8015c9e:	e000      	b.n	8015ca2 <prvUnlockQueue+0x46>
					break;
 8015ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	22ff      	movs	r2, #255	@ 0xff
 8015ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015caa:	f001 fc7f 	bl	80175ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015cae:	f001 fc4b 	bl	8017548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015cba:	e011      	b.n	8015ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	691b      	ldr	r3, [r3, #16]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d012      	beq.n	8015cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	3310      	adds	r3, #16
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f000 fd0f 	bl	80166ec <xTaskRemoveFromEventList>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d001      	beq.n	8015cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015cd4:	f000 fde8 	bl	80168a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015cd8:	7bbb      	ldrb	r3, [r7, #14]
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	b2db      	uxtb	r3, r3
 8015cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	dce9      	bgt.n	8015cbc <prvUnlockQueue+0x60>
 8015ce8:	e000      	b.n	8015cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	22ff      	movs	r2, #255	@ 0xff
 8015cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015cf4:	f001 fc5a 	bl	80175ac <vPortExitCritical>
}
 8015cf8:	bf00      	nop
 8015cfa:	3710      	adds	r7, #16
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd80      	pop	{r7, pc}

08015d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b084      	sub	sp, #16
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015d08:	f001 fc1e 	bl	8017548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d102      	bne.n	8015d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015d14:	2301      	movs	r3, #1
 8015d16:	60fb      	str	r3, [r7, #12]
 8015d18:	e001      	b.n	8015d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015d1e:	f001 fc45 	bl	80175ac <vPortExitCritical>

	return xReturn;
 8015d22:	68fb      	ldr	r3, [r7, #12]
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3710      	adds	r7, #16
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}

08015d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015d34:	f001 fc08 	bl	8017548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015d40:	429a      	cmp	r2, r3
 8015d42:	d102      	bne.n	8015d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015d44:	2301      	movs	r3, #1
 8015d46:	60fb      	str	r3, [r7, #12]
 8015d48:	e001      	b.n	8015d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015d4e:	f001 fc2d 	bl	80175ac <vPortExitCritical>

	return xReturn;
 8015d52:	68fb      	ldr	r3, [r7, #12]
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3710      	adds	r7, #16
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015d5c:	b480      	push	{r7}
 8015d5e:	b085      	sub	sp, #20
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015d66:	2300      	movs	r3, #0
 8015d68:	60fb      	str	r3, [r7, #12]
 8015d6a:	e014      	b.n	8015d96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8015dac <vQueueAddToRegistry+0x50>)
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d10b      	bne.n	8015d90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015d78:	490c      	ldr	r1, [pc, #48]	@ (8015dac <vQueueAddToRegistry+0x50>)
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	683a      	ldr	r2, [r7, #0]
 8015d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015d82:	4a0a      	ldr	r2, [pc, #40]	@ (8015dac <vQueueAddToRegistry+0x50>)
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	00db      	lsls	r3, r3, #3
 8015d88:	4413      	add	r3, r2
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015d8e:	e006      	b.n	8015d9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	3301      	adds	r3, #1
 8015d94:	60fb      	str	r3, [r7, #12]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2b07      	cmp	r3, #7
 8015d9a:	d9e7      	bls.n	8015d6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015d9c:	bf00      	nop
 8015d9e:	bf00      	nop
 8015da0:	3714      	adds	r7, #20
 8015da2:	46bd      	mov	sp, r7
 8015da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015da8:	4770      	bx	lr
 8015daa:	bf00      	nop
 8015dac:	24001134 	.word	0x24001134

08015db0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b086      	sub	sp, #24
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	60f8      	str	r0, [r7, #12]
 8015db8:	60b9      	str	r1, [r7, #8]
 8015dba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015dc0:	f001 fbc2 	bl	8017548 <vPortEnterCritical>
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015dca:	b25b      	sxtb	r3, r3
 8015dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dd0:	d103      	bne.n	8015dda <vQueueWaitForMessageRestricted+0x2a>
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015de0:	b25b      	sxtb	r3, r3
 8015de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015de6:	d103      	bne.n	8015df0 <vQueueWaitForMessageRestricted+0x40>
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015df0:	f001 fbdc 	bl	80175ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d106      	bne.n	8015e0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	3324      	adds	r3, #36	@ 0x24
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	68b9      	ldr	r1, [r7, #8]
 8015e04:	4618      	mov	r0, r3
 8015e06:	f000 fc45 	bl	8016694 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015e0a:	6978      	ldr	r0, [r7, #20]
 8015e0c:	f7ff ff26 	bl	8015c5c <prvUnlockQueue>
	}
 8015e10:	bf00      	nop
 8015e12:	3718      	adds	r7, #24
 8015e14:	46bd      	mov	sp, r7
 8015e16:	bd80      	pop	{r7, pc}

08015e18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b08e      	sub	sp, #56	@ 0x38
 8015e1c:	af04      	add	r7, sp, #16
 8015e1e:	60f8      	str	r0, [r7, #12]
 8015e20:	60b9      	str	r1, [r7, #8]
 8015e22:	607a      	str	r2, [r7, #4]
 8015e24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d10b      	bne.n	8015e44 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e30:	f383 8811 	msr	BASEPRI, r3
 8015e34:	f3bf 8f6f 	isb	sy
 8015e38:	f3bf 8f4f 	dsb	sy
 8015e3c:	623b      	str	r3, [r7, #32]
}
 8015e3e:	bf00      	nop
 8015e40:	bf00      	nop
 8015e42:	e7fd      	b.n	8015e40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d10b      	bne.n	8015e62 <xTaskCreateStatic+0x4a>
	__asm volatile
 8015e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	61fb      	str	r3, [r7, #28]
}
 8015e5c:	bf00      	nop
 8015e5e:	bf00      	nop
 8015e60:	e7fd      	b.n	8015e5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015e62:	235c      	movs	r3, #92	@ 0x5c
 8015e64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015e66:	693b      	ldr	r3, [r7, #16]
 8015e68:	2b5c      	cmp	r3, #92	@ 0x5c
 8015e6a:	d00b      	beq.n	8015e84 <xTaskCreateStatic+0x6c>
	__asm volatile
 8015e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e70:	f383 8811 	msr	BASEPRI, r3
 8015e74:	f3bf 8f6f 	isb	sy
 8015e78:	f3bf 8f4f 	dsb	sy
 8015e7c:	61bb      	str	r3, [r7, #24]
}
 8015e7e:	bf00      	nop
 8015e80:	bf00      	nop
 8015e82:	e7fd      	b.n	8015e80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015e84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d01e      	beq.n	8015eca <xTaskCreateStatic+0xb2>
 8015e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d01b      	beq.n	8015eca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015e94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9e:	2202      	movs	r2, #2
 8015ea0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015ea4:	2300      	movs	r3, #0
 8015ea6:	9303      	str	r3, [sp, #12]
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eaa:	9302      	str	r3, [sp, #8]
 8015eac:	f107 0314 	add.w	r3, r7, #20
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eb4:	9300      	str	r3, [sp, #0]
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	68b9      	ldr	r1, [r7, #8]
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f000 f850 	bl	8015f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ec4:	f000 f8de 	bl	8016084 <prvAddNewTaskToReadyList>
 8015ec8:	e001      	b.n	8015ece <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015ece:	697b      	ldr	r3, [r7, #20]
	}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3728      	adds	r7, #40	@ 0x28
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b08c      	sub	sp, #48	@ 0x30
 8015edc:	af04      	add	r7, sp, #16
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	603b      	str	r3, [r7, #0]
 8015ee4:	4613      	mov	r3, r2
 8015ee6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015ee8:	88fb      	ldrh	r3, [r7, #6]
 8015eea:	009b      	lsls	r3, r3, #2
 8015eec:	4618      	mov	r0, r3
 8015eee:	f001 fc4d 	bl	801778c <pvPortMalloc>
 8015ef2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00e      	beq.n	8015f18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015efa:	205c      	movs	r0, #92	@ 0x5c
 8015efc:	f001 fc46 	bl	801778c <pvPortMalloc>
 8015f00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d003      	beq.n	8015f10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	697a      	ldr	r2, [r7, #20]
 8015f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8015f0e:	e005      	b.n	8015f1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015f10:	6978      	ldr	r0, [r7, #20]
 8015f12:	f001 fd09 	bl	8017928 <vPortFree>
 8015f16:	e001      	b.n	8015f1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015f18:	2300      	movs	r3, #0
 8015f1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d017      	beq.n	8015f52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	2200      	movs	r2, #0
 8015f26:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015f2a:	88fa      	ldrh	r2, [r7, #6]
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	9303      	str	r3, [sp, #12]
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	9302      	str	r3, [sp, #8]
 8015f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f36:	9301      	str	r3, [sp, #4]
 8015f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f3a:	9300      	str	r3, [sp, #0]
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	68b9      	ldr	r1, [r7, #8]
 8015f40:	68f8      	ldr	r0, [r7, #12]
 8015f42:	f000 f80e 	bl	8015f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015f46:	69f8      	ldr	r0, [r7, #28]
 8015f48:	f000 f89c 	bl	8016084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	61bb      	str	r3, [r7, #24]
 8015f50:	e002      	b.n	8015f58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015f52:	f04f 33ff 	mov.w	r3, #4294967295
 8015f56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015f58:	69bb      	ldr	r3, [r7, #24]
	}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3720      	adds	r7, #32
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}

08015f62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015f62:	b580      	push	{r7, lr}
 8015f64:	b088      	sub	sp, #32
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	60f8      	str	r0, [r7, #12]
 8015f6a:	60b9      	str	r1, [r7, #8]
 8015f6c:	607a      	str	r2, [r7, #4]
 8015f6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	461a      	mov	r2, r3
 8015f7a:	21a5      	movs	r1, #165	@ 0xa5
 8015f7c:	f002 fe74 	bl	8018c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015f84:	6879      	ldr	r1, [r7, #4]
 8015f86:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015f8a:	440b      	add	r3, r1
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	4413      	add	r3, r2
 8015f90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	f023 0307 	bic.w	r3, r3, #7
 8015f98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	f003 0307 	and.w	r3, r3, #7
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00b      	beq.n	8015fbc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fa8:	f383 8811 	msr	BASEPRI, r3
 8015fac:	f3bf 8f6f 	isb	sy
 8015fb0:	f3bf 8f4f 	dsb	sy
 8015fb4:	617b      	str	r3, [r7, #20]
}
 8015fb6:	bf00      	nop
 8015fb8:	bf00      	nop
 8015fba:	e7fd      	b.n	8015fb8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d01f      	beq.n	8016002 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	61fb      	str	r3, [r7, #28]
 8015fc6:	e012      	b.n	8015fee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015fc8:	68ba      	ldr	r2, [r7, #8]
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	4413      	add	r3, r2
 8015fce:	7819      	ldrb	r1, [r3, #0]
 8015fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015fd2:	69fb      	ldr	r3, [r7, #28]
 8015fd4:	4413      	add	r3, r2
 8015fd6:	3334      	adds	r3, #52	@ 0x34
 8015fd8:	460a      	mov	r2, r1
 8015fda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	69fb      	ldr	r3, [r7, #28]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	781b      	ldrb	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d006      	beq.n	8015ff6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015fe8:	69fb      	ldr	r3, [r7, #28]
 8015fea:	3301      	adds	r3, #1
 8015fec:	61fb      	str	r3, [r7, #28]
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	2b0f      	cmp	r3, #15
 8015ff2:	d9e9      	bls.n	8015fc8 <prvInitialiseNewTask+0x66>
 8015ff4:	e000      	b.n	8015ff8 <prvInitialiseNewTask+0x96>
			{
				break;
 8015ff6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8016000:	e003      	b.n	801600a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016004:	2200      	movs	r2, #0
 8016006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801600c:	2b37      	cmp	r3, #55	@ 0x37
 801600e:	d901      	bls.n	8016014 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016010:	2337      	movs	r3, #55	@ 0x37
 8016012:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016016:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016018:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801601a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801601c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801601e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016022:	2200      	movs	r2, #0
 8016024:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016028:	3304      	adds	r3, #4
 801602a:	4618      	mov	r0, r3
 801602c:	f7ff f884 	bl	8015138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016032:	3318      	adds	r3, #24
 8016034:	4618      	mov	r0, r3
 8016036:	f7ff f87f 	bl	8015138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801603e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016042:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016048:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801604a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801604e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016052:	2200      	movs	r2, #0
 8016054:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016058:	2200      	movs	r2, #0
 801605a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801605e:	683a      	ldr	r2, [r7, #0]
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	69b8      	ldr	r0, [r7, #24]
 8016064:	f001 f93e 	bl	80172e4 <pxPortInitialiseStack>
 8016068:	4602      	mov	r2, r0
 801606a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801606e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016070:	2b00      	cmp	r3, #0
 8016072:	d002      	beq.n	801607a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016076:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016078:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801607a:	bf00      	nop
 801607c:	3720      	adds	r7, #32
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
	...

08016084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801608c:	f001 fa5c 	bl	8017548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016090:	4b2d      	ldr	r3, [pc, #180]	@ (8016148 <prvAddNewTaskToReadyList+0xc4>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	3301      	adds	r3, #1
 8016096:	4a2c      	ldr	r2, [pc, #176]	@ (8016148 <prvAddNewTaskToReadyList+0xc4>)
 8016098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801609a:	4b2c      	ldr	r3, [pc, #176]	@ (801614c <prvAddNewTaskToReadyList+0xc8>)
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d109      	bne.n	80160b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80160a2:	4a2a      	ldr	r2, [pc, #168]	@ (801614c <prvAddNewTaskToReadyList+0xc8>)
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80160a8:	4b27      	ldr	r3, [pc, #156]	@ (8016148 <prvAddNewTaskToReadyList+0xc4>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d110      	bne.n	80160d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80160b0:	f000 fc1e 	bl	80168f0 <prvInitialiseTaskLists>
 80160b4:	e00d      	b.n	80160d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80160b6:	4b26      	ldr	r3, [pc, #152]	@ (8016150 <prvAddNewTaskToReadyList+0xcc>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d109      	bne.n	80160d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80160be:	4b23      	ldr	r3, [pc, #140]	@ (801614c <prvAddNewTaskToReadyList+0xc8>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d802      	bhi.n	80160d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80160cc:	4a1f      	ldr	r2, [pc, #124]	@ (801614c <prvAddNewTaskToReadyList+0xc8>)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80160d2:	4b20      	ldr	r3, [pc, #128]	@ (8016154 <prvAddNewTaskToReadyList+0xd0>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	3301      	adds	r3, #1
 80160d8:	4a1e      	ldr	r2, [pc, #120]	@ (8016154 <prvAddNewTaskToReadyList+0xd0>)
 80160da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80160dc:	4b1d      	ldr	r3, [pc, #116]	@ (8016154 <prvAddNewTaskToReadyList+0xd0>)
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160e8:	4b1b      	ldr	r3, [pc, #108]	@ (8016158 <prvAddNewTaskToReadyList+0xd4>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d903      	bls.n	80160f8 <prvAddNewTaskToReadyList+0x74>
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160f4:	4a18      	ldr	r2, [pc, #96]	@ (8016158 <prvAddNewTaskToReadyList+0xd4>)
 80160f6:	6013      	str	r3, [r2, #0]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160fc:	4613      	mov	r3, r2
 80160fe:	009b      	lsls	r3, r3, #2
 8016100:	4413      	add	r3, r2
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4a15      	ldr	r2, [pc, #84]	@ (801615c <prvAddNewTaskToReadyList+0xd8>)
 8016106:	441a      	add	r2, r3
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	3304      	adds	r3, #4
 801610c:	4619      	mov	r1, r3
 801610e:	4610      	mov	r0, r2
 8016110:	f7ff f81f 	bl	8015152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016114:	f001 fa4a 	bl	80175ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016118:	4b0d      	ldr	r3, [pc, #52]	@ (8016150 <prvAddNewTaskToReadyList+0xcc>)
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d00e      	beq.n	801613e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016120:	4b0a      	ldr	r3, [pc, #40]	@ (801614c <prvAddNewTaskToReadyList+0xc8>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801612a:	429a      	cmp	r2, r3
 801612c:	d207      	bcs.n	801613e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801612e:	4b0c      	ldr	r3, [pc, #48]	@ (8016160 <prvAddNewTaskToReadyList+0xdc>)
 8016130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016134:	601a      	str	r2, [r3, #0]
 8016136:	f3bf 8f4f 	dsb	sy
 801613a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801613e:	bf00      	nop
 8016140:	3708      	adds	r7, #8
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	24001648 	.word	0x24001648
 801614c:	24001174 	.word	0x24001174
 8016150:	24001654 	.word	0x24001654
 8016154:	24001664 	.word	0x24001664
 8016158:	24001650 	.word	0x24001650
 801615c:	24001178 	.word	0x24001178
 8016160:	e000ed04 	.word	0xe000ed04

08016164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8016164:	b580      	push	{r7, lr}
 8016166:	b084      	sub	sp, #16
 8016168:	af00      	add	r7, sp, #0
 801616a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801616c:	2300      	movs	r3, #0
 801616e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d018      	beq.n	80161a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8016176:	4b14      	ldr	r3, [pc, #80]	@ (80161c8 <vTaskDelay+0x64>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d00b      	beq.n	8016196 <vTaskDelay+0x32>
	__asm volatile
 801617e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016182:	f383 8811 	msr	BASEPRI, r3
 8016186:	f3bf 8f6f 	isb	sy
 801618a:	f3bf 8f4f 	dsb	sy
 801618e:	60bb      	str	r3, [r7, #8]
}
 8016190:	bf00      	nop
 8016192:	bf00      	nop
 8016194:	e7fd      	b.n	8016192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8016196:	f000 f883 	bl	80162a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801619a:	2100      	movs	r1, #0
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 fcf3 	bl	8016b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80161a2:	f000 f88b 	bl	80162bc <xTaskResumeAll>
 80161a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d107      	bne.n	80161be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80161ae:	4b07      	ldr	r3, [pc, #28]	@ (80161cc <vTaskDelay+0x68>)
 80161b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80161b4:	601a      	str	r2, [r3, #0]
 80161b6:	f3bf 8f4f 	dsb	sy
 80161ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80161be:	bf00      	nop
 80161c0:	3710      	adds	r7, #16
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
 80161c6:	bf00      	nop
 80161c8:	24001670 	.word	0x24001670
 80161cc:	e000ed04 	.word	0xe000ed04

080161d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b08a      	sub	sp, #40	@ 0x28
 80161d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80161d6:	2300      	movs	r3, #0
 80161d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80161da:	2300      	movs	r3, #0
 80161dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80161de:	463a      	mov	r2, r7
 80161e0:	1d39      	adds	r1, r7, #4
 80161e2:	f107 0308 	add.w	r3, r7, #8
 80161e6:	4618      	mov	r0, r3
 80161e8:	f7fe ff52 	bl	8015090 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80161ec:	6839      	ldr	r1, [r7, #0]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	68ba      	ldr	r2, [r7, #8]
 80161f2:	9202      	str	r2, [sp, #8]
 80161f4:	9301      	str	r3, [sp, #4]
 80161f6:	2300      	movs	r3, #0
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	2300      	movs	r3, #0
 80161fc:	460a      	mov	r2, r1
 80161fe:	4922      	ldr	r1, [pc, #136]	@ (8016288 <vTaskStartScheduler+0xb8>)
 8016200:	4822      	ldr	r0, [pc, #136]	@ (801628c <vTaskStartScheduler+0xbc>)
 8016202:	f7ff fe09 	bl	8015e18 <xTaskCreateStatic>
 8016206:	4603      	mov	r3, r0
 8016208:	4a21      	ldr	r2, [pc, #132]	@ (8016290 <vTaskStartScheduler+0xc0>)
 801620a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801620c:	4b20      	ldr	r3, [pc, #128]	@ (8016290 <vTaskStartScheduler+0xc0>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d002      	beq.n	801621a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8016214:	2301      	movs	r3, #1
 8016216:	617b      	str	r3, [r7, #20]
 8016218:	e001      	b.n	801621e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801621a:	2300      	movs	r3, #0
 801621c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	2b01      	cmp	r3, #1
 8016222:	d102      	bne.n	801622a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8016224:	f000 fd04 	bl	8016c30 <xTimerCreateTimerTask>
 8016228:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	2b01      	cmp	r3, #1
 801622e:	d116      	bne.n	801625e <vTaskStartScheduler+0x8e>
	__asm volatile
 8016230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016234:	f383 8811 	msr	BASEPRI, r3
 8016238:	f3bf 8f6f 	isb	sy
 801623c:	f3bf 8f4f 	dsb	sy
 8016240:	613b      	str	r3, [r7, #16]
}
 8016242:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8016244:	4b13      	ldr	r3, [pc, #76]	@ (8016294 <vTaskStartScheduler+0xc4>)
 8016246:	f04f 32ff 	mov.w	r2, #4294967295
 801624a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801624c:	4b12      	ldr	r3, [pc, #72]	@ (8016298 <vTaskStartScheduler+0xc8>)
 801624e:	2201      	movs	r2, #1
 8016250:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8016252:	4b12      	ldr	r3, [pc, #72]	@ (801629c <vTaskStartScheduler+0xcc>)
 8016254:	2200      	movs	r2, #0
 8016256:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8016258:	f001 f8d2 	bl	8017400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801625c:	e00f      	b.n	801627e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016264:	d10b      	bne.n	801627e <vTaskStartScheduler+0xae>
	__asm volatile
 8016266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801626a:	f383 8811 	msr	BASEPRI, r3
 801626e:	f3bf 8f6f 	isb	sy
 8016272:	f3bf 8f4f 	dsb	sy
 8016276:	60fb      	str	r3, [r7, #12]
}
 8016278:	bf00      	nop
 801627a:	bf00      	nop
 801627c:	e7fd      	b.n	801627a <vTaskStartScheduler+0xaa>
}
 801627e:	bf00      	nop
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	08018dd4 	.word	0x08018dd4
 801628c:	080168c1 	.word	0x080168c1
 8016290:	2400166c 	.word	0x2400166c
 8016294:	24001668 	.word	0x24001668
 8016298:	24001654 	.word	0x24001654
 801629c:	2400164c 	.word	0x2400164c

080162a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80162a0:	b480      	push	{r7}
 80162a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80162a4:	4b04      	ldr	r3, [pc, #16]	@ (80162b8 <vTaskSuspendAll+0x18>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	3301      	adds	r3, #1
 80162aa:	4a03      	ldr	r2, [pc, #12]	@ (80162b8 <vTaskSuspendAll+0x18>)
 80162ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80162ae:	bf00      	nop
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr
 80162b8:	24001670 	.word	0x24001670

080162bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80162c2:	2300      	movs	r3, #0
 80162c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80162c6:	2300      	movs	r3, #0
 80162c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80162ca:	4b42      	ldr	r3, [pc, #264]	@ (80163d4 <xTaskResumeAll+0x118>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d10b      	bne.n	80162ea <xTaskResumeAll+0x2e>
	__asm volatile
 80162d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162d6:	f383 8811 	msr	BASEPRI, r3
 80162da:	f3bf 8f6f 	isb	sy
 80162de:	f3bf 8f4f 	dsb	sy
 80162e2:	603b      	str	r3, [r7, #0]
}
 80162e4:	bf00      	nop
 80162e6:	bf00      	nop
 80162e8:	e7fd      	b.n	80162e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80162ea:	f001 f92d 	bl	8017548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80162ee:	4b39      	ldr	r3, [pc, #228]	@ (80163d4 <xTaskResumeAll+0x118>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	3b01      	subs	r3, #1
 80162f4:	4a37      	ldr	r2, [pc, #220]	@ (80163d4 <xTaskResumeAll+0x118>)
 80162f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80162f8:	4b36      	ldr	r3, [pc, #216]	@ (80163d4 <xTaskResumeAll+0x118>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d162      	bne.n	80163c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016300:	4b35      	ldr	r3, [pc, #212]	@ (80163d8 <xTaskResumeAll+0x11c>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d05e      	beq.n	80163c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016308:	e02f      	b.n	801636a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801630a:	4b34      	ldr	r3, [pc, #208]	@ (80163dc <xTaskResumeAll+0x120>)
 801630c:	68db      	ldr	r3, [r3, #12]
 801630e:	68db      	ldr	r3, [r3, #12]
 8016310:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	3318      	adds	r3, #24
 8016316:	4618      	mov	r0, r3
 8016318:	f7fe ff78 	bl	801520c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	3304      	adds	r3, #4
 8016320:	4618      	mov	r0, r3
 8016322:	f7fe ff73 	bl	801520c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801632a:	4b2d      	ldr	r3, [pc, #180]	@ (80163e0 <xTaskResumeAll+0x124>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	429a      	cmp	r2, r3
 8016330:	d903      	bls.n	801633a <xTaskResumeAll+0x7e>
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016336:	4a2a      	ldr	r2, [pc, #168]	@ (80163e0 <xTaskResumeAll+0x124>)
 8016338:	6013      	str	r3, [r2, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801633e:	4613      	mov	r3, r2
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	4413      	add	r3, r2
 8016344:	009b      	lsls	r3, r3, #2
 8016346:	4a27      	ldr	r2, [pc, #156]	@ (80163e4 <xTaskResumeAll+0x128>)
 8016348:	441a      	add	r2, r3
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	3304      	adds	r3, #4
 801634e:	4619      	mov	r1, r3
 8016350:	4610      	mov	r0, r2
 8016352:	f7fe fefe 	bl	8015152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801635a:	4b23      	ldr	r3, [pc, #140]	@ (80163e8 <xTaskResumeAll+0x12c>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016360:	429a      	cmp	r2, r3
 8016362:	d302      	bcc.n	801636a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8016364:	4b21      	ldr	r3, [pc, #132]	@ (80163ec <xTaskResumeAll+0x130>)
 8016366:	2201      	movs	r2, #1
 8016368:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801636a:	4b1c      	ldr	r3, [pc, #112]	@ (80163dc <xTaskResumeAll+0x120>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d1cb      	bne.n	801630a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d001      	beq.n	801637c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8016378:	f000 fb58 	bl	8016a2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801637c:	4b1c      	ldr	r3, [pc, #112]	@ (80163f0 <xTaskResumeAll+0x134>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d010      	beq.n	80163aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8016388:	f000 f846 	bl	8016418 <xTaskIncrementTick>
 801638c:	4603      	mov	r3, r0
 801638e:	2b00      	cmp	r3, #0
 8016390:	d002      	beq.n	8016398 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8016392:	4b16      	ldr	r3, [pc, #88]	@ (80163ec <xTaskResumeAll+0x130>)
 8016394:	2201      	movs	r2, #1
 8016396:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	3b01      	subs	r3, #1
 801639c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d1f1      	bne.n	8016388 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80163a4:	4b12      	ldr	r3, [pc, #72]	@ (80163f0 <xTaskResumeAll+0x134>)
 80163a6:	2200      	movs	r2, #0
 80163a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80163aa:	4b10      	ldr	r3, [pc, #64]	@ (80163ec <xTaskResumeAll+0x130>)
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d009      	beq.n	80163c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80163b2:	2301      	movs	r3, #1
 80163b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80163b6:	4b0f      	ldr	r3, [pc, #60]	@ (80163f4 <xTaskResumeAll+0x138>)
 80163b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80163bc:	601a      	str	r2, [r3, #0]
 80163be:	f3bf 8f4f 	dsb	sy
 80163c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163c6:	f001 f8f1 	bl	80175ac <vPortExitCritical>

	return xAlreadyYielded;
 80163ca:	68bb      	ldr	r3, [r7, #8]
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3710      	adds	r7, #16
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	24001670 	.word	0x24001670
 80163d8:	24001648 	.word	0x24001648
 80163dc:	24001608 	.word	0x24001608
 80163e0:	24001650 	.word	0x24001650
 80163e4:	24001178 	.word	0x24001178
 80163e8:	24001174 	.word	0x24001174
 80163ec:	2400165c 	.word	0x2400165c
 80163f0:	24001658 	.word	0x24001658
 80163f4:	e000ed04 	.word	0xe000ed04

080163f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80163f8:	b480      	push	{r7}
 80163fa:	b083      	sub	sp, #12
 80163fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80163fe:	4b05      	ldr	r3, [pc, #20]	@ (8016414 <xTaskGetTickCount+0x1c>)
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8016404:	687b      	ldr	r3, [r7, #4]
}
 8016406:	4618      	mov	r0, r3
 8016408:	370c      	adds	r7, #12
 801640a:	46bd      	mov	sp, r7
 801640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016410:	4770      	bx	lr
 8016412:	bf00      	nop
 8016414:	2400164c 	.word	0x2400164c

08016418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b086      	sub	sp, #24
 801641c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801641e:	2300      	movs	r3, #0
 8016420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016422:	4b4f      	ldr	r3, [pc, #316]	@ (8016560 <xTaskIncrementTick+0x148>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	2b00      	cmp	r3, #0
 8016428:	f040 8090 	bne.w	801654c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801642c:	4b4d      	ldr	r3, [pc, #308]	@ (8016564 <xTaskIncrementTick+0x14c>)
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	3301      	adds	r3, #1
 8016432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016434:	4a4b      	ldr	r2, [pc, #300]	@ (8016564 <xTaskIncrementTick+0x14c>)
 8016436:	693b      	ldr	r3, [r7, #16]
 8016438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	2b00      	cmp	r3, #0
 801643e:	d121      	bne.n	8016484 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8016440:	4b49      	ldr	r3, [pc, #292]	@ (8016568 <xTaskIncrementTick+0x150>)
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	2b00      	cmp	r3, #0
 8016448:	d00b      	beq.n	8016462 <xTaskIncrementTick+0x4a>
	__asm volatile
 801644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801644e:	f383 8811 	msr	BASEPRI, r3
 8016452:	f3bf 8f6f 	isb	sy
 8016456:	f3bf 8f4f 	dsb	sy
 801645a:	603b      	str	r3, [r7, #0]
}
 801645c:	bf00      	nop
 801645e:	bf00      	nop
 8016460:	e7fd      	b.n	801645e <xTaskIncrementTick+0x46>
 8016462:	4b41      	ldr	r3, [pc, #260]	@ (8016568 <xTaskIncrementTick+0x150>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	60fb      	str	r3, [r7, #12]
 8016468:	4b40      	ldr	r3, [pc, #256]	@ (801656c <xTaskIncrementTick+0x154>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	4a3e      	ldr	r2, [pc, #248]	@ (8016568 <xTaskIncrementTick+0x150>)
 801646e:	6013      	str	r3, [r2, #0]
 8016470:	4a3e      	ldr	r2, [pc, #248]	@ (801656c <xTaskIncrementTick+0x154>)
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	6013      	str	r3, [r2, #0]
 8016476:	4b3e      	ldr	r3, [pc, #248]	@ (8016570 <xTaskIncrementTick+0x158>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	3301      	adds	r3, #1
 801647c:	4a3c      	ldr	r2, [pc, #240]	@ (8016570 <xTaskIncrementTick+0x158>)
 801647e:	6013      	str	r3, [r2, #0]
 8016480:	f000 fad4 	bl	8016a2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016484:	4b3b      	ldr	r3, [pc, #236]	@ (8016574 <xTaskIncrementTick+0x15c>)
 8016486:	681b      	ldr	r3, [r3, #0]
 8016488:	693a      	ldr	r2, [r7, #16]
 801648a:	429a      	cmp	r2, r3
 801648c:	d349      	bcc.n	8016522 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801648e:	4b36      	ldr	r3, [pc, #216]	@ (8016568 <xTaskIncrementTick+0x150>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d104      	bne.n	80164a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016498:	4b36      	ldr	r3, [pc, #216]	@ (8016574 <xTaskIncrementTick+0x15c>)
 801649a:	f04f 32ff 	mov.w	r2, #4294967295
 801649e:	601a      	str	r2, [r3, #0]
					break;
 80164a0:	e03f      	b.n	8016522 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164a2:	4b31      	ldr	r3, [pc, #196]	@ (8016568 <xTaskIncrementTick+0x150>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	68db      	ldr	r3, [r3, #12]
 80164aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80164ac:	68bb      	ldr	r3, [r7, #8]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80164b2:	693a      	ldr	r2, [r7, #16]
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	429a      	cmp	r2, r3
 80164b8:	d203      	bcs.n	80164c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80164ba:	4a2e      	ldr	r2, [pc, #184]	@ (8016574 <xTaskIncrementTick+0x15c>)
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80164c0:	e02f      	b.n	8016522 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	3304      	adds	r3, #4
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fe fea0 	bl	801520c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d004      	beq.n	80164de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164d4:	68bb      	ldr	r3, [r7, #8]
 80164d6:	3318      	adds	r3, #24
 80164d8:	4618      	mov	r0, r3
 80164da:	f7fe fe97 	bl	801520c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164e2:	4b25      	ldr	r3, [pc, #148]	@ (8016578 <xTaskIncrementTick+0x160>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d903      	bls.n	80164f2 <xTaskIncrementTick+0xda>
 80164ea:	68bb      	ldr	r3, [r7, #8]
 80164ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164ee:	4a22      	ldr	r2, [pc, #136]	@ (8016578 <xTaskIncrementTick+0x160>)
 80164f0:	6013      	str	r3, [r2, #0]
 80164f2:	68bb      	ldr	r3, [r7, #8]
 80164f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164f6:	4613      	mov	r3, r2
 80164f8:	009b      	lsls	r3, r3, #2
 80164fa:	4413      	add	r3, r2
 80164fc:	009b      	lsls	r3, r3, #2
 80164fe:	4a1f      	ldr	r2, [pc, #124]	@ (801657c <xTaskIncrementTick+0x164>)
 8016500:	441a      	add	r2, r3
 8016502:	68bb      	ldr	r3, [r7, #8]
 8016504:	3304      	adds	r3, #4
 8016506:	4619      	mov	r1, r3
 8016508:	4610      	mov	r0, r2
 801650a:	f7fe fe22 	bl	8015152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016512:	4b1b      	ldr	r3, [pc, #108]	@ (8016580 <xTaskIncrementTick+0x168>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016518:	429a      	cmp	r2, r3
 801651a:	d3b8      	bcc.n	801648e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801651c:	2301      	movs	r3, #1
 801651e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016520:	e7b5      	b.n	801648e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016522:	4b17      	ldr	r3, [pc, #92]	@ (8016580 <xTaskIncrementTick+0x168>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016528:	4914      	ldr	r1, [pc, #80]	@ (801657c <xTaskIncrementTick+0x164>)
 801652a:	4613      	mov	r3, r2
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	4413      	add	r3, r2
 8016530:	009b      	lsls	r3, r3, #2
 8016532:	440b      	add	r3, r1
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	2b01      	cmp	r3, #1
 8016538:	d901      	bls.n	801653e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801653a:	2301      	movs	r3, #1
 801653c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801653e:	4b11      	ldr	r3, [pc, #68]	@ (8016584 <xTaskIncrementTick+0x16c>)
 8016540:	681b      	ldr	r3, [r3, #0]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d007      	beq.n	8016556 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8016546:	2301      	movs	r3, #1
 8016548:	617b      	str	r3, [r7, #20]
 801654a:	e004      	b.n	8016556 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801654c:	4b0e      	ldr	r3, [pc, #56]	@ (8016588 <xTaskIncrementTick+0x170>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	3301      	adds	r3, #1
 8016552:	4a0d      	ldr	r2, [pc, #52]	@ (8016588 <xTaskIncrementTick+0x170>)
 8016554:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016556:	697b      	ldr	r3, [r7, #20]
}
 8016558:	4618      	mov	r0, r3
 801655a:	3718      	adds	r7, #24
 801655c:	46bd      	mov	sp, r7
 801655e:	bd80      	pop	{r7, pc}
 8016560:	24001670 	.word	0x24001670
 8016564:	2400164c 	.word	0x2400164c
 8016568:	24001600 	.word	0x24001600
 801656c:	24001604 	.word	0x24001604
 8016570:	24001660 	.word	0x24001660
 8016574:	24001668 	.word	0x24001668
 8016578:	24001650 	.word	0x24001650
 801657c:	24001178 	.word	0x24001178
 8016580:	24001174 	.word	0x24001174
 8016584:	2400165c 	.word	0x2400165c
 8016588:	24001658 	.word	0x24001658

0801658c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801658c:	b480      	push	{r7}
 801658e:	b085      	sub	sp, #20
 8016590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016592:	4b28      	ldr	r3, [pc, #160]	@ (8016634 <vTaskSwitchContext+0xa8>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d003      	beq.n	80165a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801659a:	4b27      	ldr	r3, [pc, #156]	@ (8016638 <vTaskSwitchContext+0xac>)
 801659c:	2201      	movs	r2, #1
 801659e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80165a0:	e042      	b.n	8016628 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80165a2:	4b25      	ldr	r3, [pc, #148]	@ (8016638 <vTaskSwitchContext+0xac>)
 80165a4:	2200      	movs	r2, #0
 80165a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165a8:	4b24      	ldr	r3, [pc, #144]	@ (801663c <vTaskSwitchContext+0xb0>)
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	60fb      	str	r3, [r7, #12]
 80165ae:	e011      	b.n	80165d4 <vTaskSwitchContext+0x48>
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d10b      	bne.n	80165ce <vTaskSwitchContext+0x42>
	__asm volatile
 80165b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165ba:	f383 8811 	msr	BASEPRI, r3
 80165be:	f3bf 8f6f 	isb	sy
 80165c2:	f3bf 8f4f 	dsb	sy
 80165c6:	607b      	str	r3, [r7, #4]
}
 80165c8:	bf00      	nop
 80165ca:	bf00      	nop
 80165cc:	e7fd      	b.n	80165ca <vTaskSwitchContext+0x3e>
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	3b01      	subs	r3, #1
 80165d2:	60fb      	str	r3, [r7, #12]
 80165d4:	491a      	ldr	r1, [pc, #104]	@ (8016640 <vTaskSwitchContext+0xb4>)
 80165d6:	68fa      	ldr	r2, [r7, #12]
 80165d8:	4613      	mov	r3, r2
 80165da:	009b      	lsls	r3, r3, #2
 80165dc:	4413      	add	r3, r2
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	440b      	add	r3, r1
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d0e3      	beq.n	80165b0 <vTaskSwitchContext+0x24>
 80165e8:	68fa      	ldr	r2, [r7, #12]
 80165ea:	4613      	mov	r3, r2
 80165ec:	009b      	lsls	r3, r3, #2
 80165ee:	4413      	add	r3, r2
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	4a13      	ldr	r2, [pc, #76]	@ (8016640 <vTaskSwitchContext+0xb4>)
 80165f4:	4413      	add	r3, r2
 80165f6:	60bb      	str	r3, [r7, #8]
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	685b      	ldr	r3, [r3, #4]
 80165fc:	685a      	ldr	r2, [r3, #4]
 80165fe:	68bb      	ldr	r3, [r7, #8]
 8016600:	605a      	str	r2, [r3, #4]
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	685a      	ldr	r2, [r3, #4]
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	3308      	adds	r3, #8
 801660a:	429a      	cmp	r2, r3
 801660c:	d104      	bne.n	8016618 <vTaskSwitchContext+0x8c>
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	685a      	ldr	r2, [r3, #4]
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	605a      	str	r2, [r3, #4]
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	68db      	ldr	r3, [r3, #12]
 801661e:	4a09      	ldr	r2, [pc, #36]	@ (8016644 <vTaskSwitchContext+0xb8>)
 8016620:	6013      	str	r3, [r2, #0]
 8016622:	4a06      	ldr	r2, [pc, #24]	@ (801663c <vTaskSwitchContext+0xb0>)
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	6013      	str	r3, [r2, #0]
}
 8016628:	bf00      	nop
 801662a:	3714      	adds	r7, #20
 801662c:	46bd      	mov	sp, r7
 801662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016632:	4770      	bx	lr
 8016634:	24001670 	.word	0x24001670
 8016638:	2400165c 	.word	0x2400165c
 801663c:	24001650 	.word	0x24001650
 8016640:	24001178 	.word	0x24001178
 8016644:	24001174 	.word	0x24001174

08016648 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b084      	sub	sp, #16
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
 8016650:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d10b      	bne.n	8016670 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8016658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801665c:	f383 8811 	msr	BASEPRI, r3
 8016660:	f3bf 8f6f 	isb	sy
 8016664:	f3bf 8f4f 	dsb	sy
 8016668:	60fb      	str	r3, [r7, #12]
}
 801666a:	bf00      	nop
 801666c:	bf00      	nop
 801666e:	e7fd      	b.n	801666c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016670:	4b07      	ldr	r3, [pc, #28]	@ (8016690 <vTaskPlaceOnEventList+0x48>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	3318      	adds	r3, #24
 8016676:	4619      	mov	r1, r3
 8016678:	6878      	ldr	r0, [r7, #4]
 801667a:	f7fe fd8e 	bl	801519a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801667e:	2101      	movs	r1, #1
 8016680:	6838      	ldr	r0, [r7, #0]
 8016682:	f000 fa81 	bl	8016b88 <prvAddCurrentTaskToDelayedList>
}
 8016686:	bf00      	nop
 8016688:	3710      	adds	r7, #16
 801668a:	46bd      	mov	sp, r7
 801668c:	bd80      	pop	{r7, pc}
 801668e:	bf00      	nop
 8016690:	24001174 	.word	0x24001174

08016694 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016694:	b580      	push	{r7, lr}
 8016696:	b086      	sub	sp, #24
 8016698:	af00      	add	r7, sp, #0
 801669a:	60f8      	str	r0, [r7, #12]
 801669c:	60b9      	str	r1, [r7, #8]
 801669e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d10b      	bne.n	80166be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80166a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166aa:	f383 8811 	msr	BASEPRI, r3
 80166ae:	f3bf 8f6f 	isb	sy
 80166b2:	f3bf 8f4f 	dsb	sy
 80166b6:	617b      	str	r3, [r7, #20]
}
 80166b8:	bf00      	nop
 80166ba:	bf00      	nop
 80166bc:	e7fd      	b.n	80166ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80166be:	4b0a      	ldr	r3, [pc, #40]	@ (80166e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	3318      	adds	r3, #24
 80166c4:	4619      	mov	r1, r3
 80166c6:	68f8      	ldr	r0, [r7, #12]
 80166c8:	f7fe fd43 	bl	8015152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d002      	beq.n	80166d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80166d2:	f04f 33ff 	mov.w	r3, #4294967295
 80166d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80166d8:	6879      	ldr	r1, [r7, #4]
 80166da:	68b8      	ldr	r0, [r7, #8]
 80166dc:	f000 fa54 	bl	8016b88 <prvAddCurrentTaskToDelayedList>
	}
 80166e0:	bf00      	nop
 80166e2:	3718      	adds	r7, #24
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}
 80166e8:	24001174 	.word	0x24001174

080166ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b086      	sub	sp, #24
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	68db      	ldr	r3, [r3, #12]
 80166f8:	68db      	ldr	r3, [r3, #12]
 80166fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80166fc:	693b      	ldr	r3, [r7, #16]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10b      	bne.n	801671a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016706:	f383 8811 	msr	BASEPRI, r3
 801670a:	f3bf 8f6f 	isb	sy
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	60fb      	str	r3, [r7, #12]
}
 8016714:	bf00      	nop
 8016716:	bf00      	nop
 8016718:	e7fd      	b.n	8016716 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	3318      	adds	r3, #24
 801671e:	4618      	mov	r0, r3
 8016720:	f7fe fd74 	bl	801520c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016724:	4b1d      	ldr	r3, [pc, #116]	@ (801679c <xTaskRemoveFromEventList+0xb0>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d11d      	bne.n	8016768 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801672c:	693b      	ldr	r3, [r7, #16]
 801672e:	3304      	adds	r3, #4
 8016730:	4618      	mov	r0, r3
 8016732:	f7fe fd6b 	bl	801520c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801673a:	4b19      	ldr	r3, [pc, #100]	@ (80167a0 <xTaskRemoveFromEventList+0xb4>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	429a      	cmp	r2, r3
 8016740:	d903      	bls.n	801674a <xTaskRemoveFromEventList+0x5e>
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016746:	4a16      	ldr	r2, [pc, #88]	@ (80167a0 <xTaskRemoveFromEventList+0xb4>)
 8016748:	6013      	str	r3, [r2, #0]
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801674e:	4613      	mov	r3, r2
 8016750:	009b      	lsls	r3, r3, #2
 8016752:	4413      	add	r3, r2
 8016754:	009b      	lsls	r3, r3, #2
 8016756:	4a13      	ldr	r2, [pc, #76]	@ (80167a4 <xTaskRemoveFromEventList+0xb8>)
 8016758:	441a      	add	r2, r3
 801675a:	693b      	ldr	r3, [r7, #16]
 801675c:	3304      	adds	r3, #4
 801675e:	4619      	mov	r1, r3
 8016760:	4610      	mov	r0, r2
 8016762:	f7fe fcf6 	bl	8015152 <vListInsertEnd>
 8016766:	e005      	b.n	8016774 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	3318      	adds	r3, #24
 801676c:	4619      	mov	r1, r3
 801676e:	480e      	ldr	r0, [pc, #56]	@ (80167a8 <xTaskRemoveFromEventList+0xbc>)
 8016770:	f7fe fcef 	bl	8015152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016778:	4b0c      	ldr	r3, [pc, #48]	@ (80167ac <xTaskRemoveFromEventList+0xc0>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801677e:	429a      	cmp	r2, r3
 8016780:	d905      	bls.n	801678e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016782:	2301      	movs	r3, #1
 8016784:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016786:	4b0a      	ldr	r3, [pc, #40]	@ (80167b0 <xTaskRemoveFromEventList+0xc4>)
 8016788:	2201      	movs	r2, #1
 801678a:	601a      	str	r2, [r3, #0]
 801678c:	e001      	b.n	8016792 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801678e:	2300      	movs	r3, #0
 8016790:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016792:	697b      	ldr	r3, [r7, #20]
}
 8016794:	4618      	mov	r0, r3
 8016796:	3718      	adds	r7, #24
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}
 801679c:	24001670 	.word	0x24001670
 80167a0:	24001650 	.word	0x24001650
 80167a4:	24001178 	.word	0x24001178
 80167a8:	24001608 	.word	0x24001608
 80167ac:	24001174 	.word	0x24001174
 80167b0:	2400165c 	.word	0x2400165c

080167b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80167b4:	b480      	push	{r7}
 80167b6:	b083      	sub	sp, #12
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80167bc:	4b06      	ldr	r3, [pc, #24]	@ (80167d8 <vTaskInternalSetTimeOutState+0x24>)
 80167be:	681a      	ldr	r2, [r3, #0]
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167c4:	4b05      	ldr	r3, [pc, #20]	@ (80167dc <vTaskInternalSetTimeOutState+0x28>)
 80167c6:	681a      	ldr	r2, [r3, #0]
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	605a      	str	r2, [r3, #4]
}
 80167cc:	bf00      	nop
 80167ce:	370c      	adds	r7, #12
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr
 80167d8:	24001660 	.word	0x24001660
 80167dc:	2400164c 	.word	0x2400164c

080167e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b088      	sub	sp, #32
 80167e4:	af00      	add	r7, sp, #0
 80167e6:	6078      	str	r0, [r7, #4]
 80167e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d10b      	bne.n	8016808 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80167f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167f4:	f383 8811 	msr	BASEPRI, r3
 80167f8:	f3bf 8f6f 	isb	sy
 80167fc:	f3bf 8f4f 	dsb	sy
 8016800:	613b      	str	r3, [r7, #16]
}
 8016802:	bf00      	nop
 8016804:	bf00      	nop
 8016806:	e7fd      	b.n	8016804 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d10b      	bne.n	8016826 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016812:	f383 8811 	msr	BASEPRI, r3
 8016816:	f3bf 8f6f 	isb	sy
 801681a:	f3bf 8f4f 	dsb	sy
 801681e:	60fb      	str	r3, [r7, #12]
}
 8016820:	bf00      	nop
 8016822:	bf00      	nop
 8016824:	e7fd      	b.n	8016822 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8016826:	f000 fe8f 	bl	8017548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801682a:	4b1d      	ldr	r3, [pc, #116]	@ (80168a0 <xTaskCheckForTimeOut+0xc0>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	69ba      	ldr	r2, [r7, #24]
 8016836:	1ad3      	subs	r3, r2, r3
 8016838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016842:	d102      	bne.n	801684a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016844:	2300      	movs	r3, #0
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	e023      	b.n	8016892 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	4b15      	ldr	r3, [pc, #84]	@ (80168a4 <xTaskCheckForTimeOut+0xc4>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	429a      	cmp	r2, r3
 8016854:	d007      	beq.n	8016866 <xTaskCheckForTimeOut+0x86>
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	69ba      	ldr	r2, [r7, #24]
 801685c:	429a      	cmp	r2, r3
 801685e:	d302      	bcc.n	8016866 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016860:	2301      	movs	r3, #1
 8016862:	61fb      	str	r3, [r7, #28]
 8016864:	e015      	b.n	8016892 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	697a      	ldr	r2, [r7, #20]
 801686c:	429a      	cmp	r2, r3
 801686e:	d20b      	bcs.n	8016888 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	1ad2      	subs	r2, r2, r3
 8016878:	683b      	ldr	r3, [r7, #0]
 801687a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f7ff ff99 	bl	80167b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016882:	2300      	movs	r3, #0
 8016884:	61fb      	str	r3, [r7, #28]
 8016886:	e004      	b.n	8016892 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	2200      	movs	r2, #0
 801688c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801688e:	2301      	movs	r3, #1
 8016890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016892:	f000 fe8b 	bl	80175ac <vPortExitCritical>

	return xReturn;
 8016896:	69fb      	ldr	r3, [r7, #28]
}
 8016898:	4618      	mov	r0, r3
 801689a:	3720      	adds	r7, #32
 801689c:	46bd      	mov	sp, r7
 801689e:	bd80      	pop	{r7, pc}
 80168a0:	2400164c 	.word	0x2400164c
 80168a4:	24001660 	.word	0x24001660

080168a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80168a8:	b480      	push	{r7}
 80168aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80168ac:	4b03      	ldr	r3, [pc, #12]	@ (80168bc <vTaskMissedYield+0x14>)
 80168ae:	2201      	movs	r2, #1
 80168b0:	601a      	str	r2, [r3, #0]
}
 80168b2:	bf00      	nop
 80168b4:	46bd      	mov	sp, r7
 80168b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ba:	4770      	bx	lr
 80168bc:	2400165c 	.word	0x2400165c

080168c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80168c8:	f000 f852 	bl	8016970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80168cc:	4b06      	ldr	r3, [pc, #24]	@ (80168e8 <prvIdleTask+0x28>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	2b01      	cmp	r3, #1
 80168d2:	d9f9      	bls.n	80168c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80168d4:	4b05      	ldr	r3, [pc, #20]	@ (80168ec <prvIdleTask+0x2c>)
 80168d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168da:	601a      	str	r2, [r3, #0]
 80168dc:	f3bf 8f4f 	dsb	sy
 80168e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80168e4:	e7f0      	b.n	80168c8 <prvIdleTask+0x8>
 80168e6:	bf00      	nop
 80168e8:	24001178 	.word	0x24001178
 80168ec:	e000ed04 	.word	0xe000ed04

080168f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b082      	sub	sp, #8
 80168f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80168f6:	2300      	movs	r3, #0
 80168f8:	607b      	str	r3, [r7, #4]
 80168fa:	e00c      	b.n	8016916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80168fc:	687a      	ldr	r2, [r7, #4]
 80168fe:	4613      	mov	r3, r2
 8016900:	009b      	lsls	r3, r3, #2
 8016902:	4413      	add	r3, r2
 8016904:	009b      	lsls	r3, r3, #2
 8016906:	4a12      	ldr	r2, [pc, #72]	@ (8016950 <prvInitialiseTaskLists+0x60>)
 8016908:	4413      	add	r3, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f7fe fbf4 	bl	80150f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	3301      	adds	r3, #1
 8016914:	607b      	str	r3, [r7, #4]
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	2b37      	cmp	r3, #55	@ 0x37
 801691a:	d9ef      	bls.n	80168fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801691c:	480d      	ldr	r0, [pc, #52]	@ (8016954 <prvInitialiseTaskLists+0x64>)
 801691e:	f7fe fbeb 	bl	80150f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016922:	480d      	ldr	r0, [pc, #52]	@ (8016958 <prvInitialiseTaskLists+0x68>)
 8016924:	f7fe fbe8 	bl	80150f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016928:	480c      	ldr	r0, [pc, #48]	@ (801695c <prvInitialiseTaskLists+0x6c>)
 801692a:	f7fe fbe5 	bl	80150f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801692e:	480c      	ldr	r0, [pc, #48]	@ (8016960 <prvInitialiseTaskLists+0x70>)
 8016930:	f7fe fbe2 	bl	80150f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016934:	480b      	ldr	r0, [pc, #44]	@ (8016964 <prvInitialiseTaskLists+0x74>)
 8016936:	f7fe fbdf 	bl	80150f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801693a:	4b0b      	ldr	r3, [pc, #44]	@ (8016968 <prvInitialiseTaskLists+0x78>)
 801693c:	4a05      	ldr	r2, [pc, #20]	@ (8016954 <prvInitialiseTaskLists+0x64>)
 801693e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016940:	4b0a      	ldr	r3, [pc, #40]	@ (801696c <prvInitialiseTaskLists+0x7c>)
 8016942:	4a05      	ldr	r2, [pc, #20]	@ (8016958 <prvInitialiseTaskLists+0x68>)
 8016944:	601a      	str	r2, [r3, #0]
}
 8016946:	bf00      	nop
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	24001178 	.word	0x24001178
 8016954:	240015d8 	.word	0x240015d8
 8016958:	240015ec 	.word	0x240015ec
 801695c:	24001608 	.word	0x24001608
 8016960:	2400161c 	.word	0x2400161c
 8016964:	24001634 	.word	0x24001634
 8016968:	24001600 	.word	0x24001600
 801696c:	24001604 	.word	0x24001604

08016970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016976:	e019      	b.n	80169ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016978:	f000 fde6 	bl	8017548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801697c:	4b10      	ldr	r3, [pc, #64]	@ (80169c0 <prvCheckTasksWaitingTermination+0x50>)
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	3304      	adds	r3, #4
 8016988:	4618      	mov	r0, r3
 801698a:	f7fe fc3f 	bl	801520c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801698e:	4b0d      	ldr	r3, [pc, #52]	@ (80169c4 <prvCheckTasksWaitingTermination+0x54>)
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	3b01      	subs	r3, #1
 8016994:	4a0b      	ldr	r2, [pc, #44]	@ (80169c4 <prvCheckTasksWaitingTermination+0x54>)
 8016996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016998:	4b0b      	ldr	r3, [pc, #44]	@ (80169c8 <prvCheckTasksWaitingTermination+0x58>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	3b01      	subs	r3, #1
 801699e:	4a0a      	ldr	r2, [pc, #40]	@ (80169c8 <prvCheckTasksWaitingTermination+0x58>)
 80169a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80169a2:	f000 fe03 	bl	80175ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 f810 	bl	80169cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80169ac:	4b06      	ldr	r3, [pc, #24]	@ (80169c8 <prvCheckTasksWaitingTermination+0x58>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d1e1      	bne.n	8016978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80169b4:	bf00      	nop
 80169b6:	bf00      	nop
 80169b8:	3708      	adds	r7, #8
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	2400161c 	.word	0x2400161c
 80169c4:	24001648 	.word	0x24001648
 80169c8:	24001630 	.word	0x24001630

080169cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b084      	sub	sp, #16
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d108      	bne.n	80169f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169e2:	4618      	mov	r0, r3
 80169e4:	f000 ffa0 	bl	8017928 <vPortFree>
				vPortFree( pxTCB );
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f000 ff9d 	bl	8017928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80169ee:	e019      	b.n	8016a24 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d103      	bne.n	8016a02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 ff94 	bl	8017928 <vPortFree>
	}
 8016a00:	e010      	b.n	8016a24 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8016a08:	2b02      	cmp	r3, #2
 8016a0a:	d00b      	beq.n	8016a24 <prvDeleteTCB+0x58>
	__asm volatile
 8016a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a10:	f383 8811 	msr	BASEPRI, r3
 8016a14:	f3bf 8f6f 	isb	sy
 8016a18:	f3bf 8f4f 	dsb	sy
 8016a1c:	60fb      	str	r3, [r7, #12]
}
 8016a1e:	bf00      	nop
 8016a20:	bf00      	nop
 8016a22:	e7fd      	b.n	8016a20 <prvDeleteTCB+0x54>
	}
 8016a24:	bf00      	nop
 8016a26:	3710      	adds	r7, #16
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a32:	4b0c      	ldr	r3, [pc, #48]	@ (8016a64 <prvResetNextTaskUnblockTime+0x38>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d104      	bne.n	8016a46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8016a68 <prvResetNextTaskUnblockTime+0x3c>)
 8016a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016a44:	e008      	b.n	8016a58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a46:	4b07      	ldr	r3, [pc, #28]	@ (8016a64 <prvResetNextTaskUnblockTime+0x38>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	68db      	ldr	r3, [r3, #12]
 8016a4c:	68db      	ldr	r3, [r3, #12]
 8016a4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	4a04      	ldr	r2, [pc, #16]	@ (8016a68 <prvResetNextTaskUnblockTime+0x3c>)
 8016a56:	6013      	str	r3, [r2, #0]
}
 8016a58:	bf00      	nop
 8016a5a:	370c      	adds	r7, #12
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	24001600 	.word	0x24001600
 8016a68:	24001668 	.word	0x24001668

08016a6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016a6c:	b480      	push	{r7}
 8016a6e:	b083      	sub	sp, #12
 8016a70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016a72:	4b0b      	ldr	r3, [pc, #44]	@ (8016aa0 <xTaskGetSchedulerState+0x34>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d102      	bne.n	8016a80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	607b      	str	r3, [r7, #4]
 8016a7e:	e008      	b.n	8016a92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016a80:	4b08      	ldr	r3, [pc, #32]	@ (8016aa4 <xTaskGetSchedulerState+0x38>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d102      	bne.n	8016a8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016a88:	2302      	movs	r3, #2
 8016a8a:	607b      	str	r3, [r7, #4]
 8016a8c:	e001      	b.n	8016a92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016a92:	687b      	ldr	r3, [r7, #4]
	}
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr
 8016aa0:	24001654 	.word	0x24001654
 8016aa4:	24001670 	.word	0x24001670

08016aa8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b086      	sub	sp, #24
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d058      	beq.n	8016b70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016abe:	4b2f      	ldr	r3, [pc, #188]	@ (8016b7c <xTaskPriorityDisinherit+0xd4>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	693a      	ldr	r2, [r7, #16]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	d00b      	beq.n	8016ae0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8016ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016acc:	f383 8811 	msr	BASEPRI, r3
 8016ad0:	f3bf 8f6f 	isb	sy
 8016ad4:	f3bf 8f4f 	dsb	sy
 8016ad8:	60fb      	str	r3, [r7, #12]
}
 8016ada:	bf00      	nop
 8016adc:	bf00      	nop
 8016ade:	e7fd      	b.n	8016adc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d10b      	bne.n	8016b00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8016ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aec:	f383 8811 	msr	BASEPRI, r3
 8016af0:	f3bf 8f6f 	isb	sy
 8016af4:	f3bf 8f4f 	dsb	sy
 8016af8:	60bb      	str	r3, [r7, #8]
}
 8016afa:	bf00      	nop
 8016afc:	bf00      	nop
 8016afe:	e7fd      	b.n	8016afc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8016b00:	693b      	ldr	r3, [r7, #16]
 8016b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b04:	1e5a      	subs	r2, r3, #1
 8016b06:	693b      	ldr	r3, [r7, #16]
 8016b08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016b12:	429a      	cmp	r2, r3
 8016b14:	d02c      	beq.n	8016b70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d128      	bne.n	8016b70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	3304      	adds	r3, #4
 8016b22:	4618      	mov	r0, r3
 8016b24:	f7fe fb72 	bl	801520c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b40:	4b0f      	ldr	r3, [pc, #60]	@ (8016b80 <xTaskPriorityDisinherit+0xd8>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d903      	bls.n	8016b50 <xTaskPriorityDisinherit+0xa8>
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8016b80 <xTaskPriorityDisinherit+0xd8>)
 8016b4e:	6013      	str	r3, [r2, #0]
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016b54:	4613      	mov	r3, r2
 8016b56:	009b      	lsls	r3, r3, #2
 8016b58:	4413      	add	r3, r2
 8016b5a:	009b      	lsls	r3, r3, #2
 8016b5c:	4a09      	ldr	r2, [pc, #36]	@ (8016b84 <xTaskPriorityDisinherit+0xdc>)
 8016b5e:	441a      	add	r2, r3
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	3304      	adds	r3, #4
 8016b64:	4619      	mov	r1, r3
 8016b66:	4610      	mov	r0, r2
 8016b68:	f7fe faf3 	bl	8015152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016b6c:	2301      	movs	r3, #1
 8016b6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b70:	697b      	ldr	r3, [r7, #20]
	}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3718      	adds	r7, #24
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}
 8016b7a:	bf00      	nop
 8016b7c:	24001174 	.word	0x24001174
 8016b80:	24001650 	.word	0x24001650
 8016b84:	24001178 	.word	0x24001178

08016b88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016b92:	4b21      	ldr	r3, [pc, #132]	@ (8016c18 <prvAddCurrentTaskToDelayedList+0x90>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b98:	4b20      	ldr	r3, [pc, #128]	@ (8016c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	3304      	adds	r3, #4
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	f7fe fb34 	bl	801520c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016baa:	d10a      	bne.n	8016bc2 <prvAddCurrentTaskToDelayedList+0x3a>
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d007      	beq.n	8016bc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8016c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	3304      	adds	r3, #4
 8016bb8:	4619      	mov	r1, r3
 8016bba:	4819      	ldr	r0, [pc, #100]	@ (8016c20 <prvAddCurrentTaskToDelayedList+0x98>)
 8016bbc:	f7fe fac9 	bl	8015152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016bc0:	e026      	b.n	8016c10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016bc2:	68fa      	ldr	r2, [r7, #12]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	4413      	add	r3, r2
 8016bc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016bca:	4b14      	ldr	r3, [pc, #80]	@ (8016c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016bd2:	68ba      	ldr	r2, [r7, #8]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	429a      	cmp	r2, r3
 8016bd8:	d209      	bcs.n	8016bee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bda:	4b12      	ldr	r3, [pc, #72]	@ (8016c24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016bdc:	681a      	ldr	r2, [r3, #0]
 8016bde:	4b0f      	ldr	r3, [pc, #60]	@ (8016c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	3304      	adds	r3, #4
 8016be4:	4619      	mov	r1, r3
 8016be6:	4610      	mov	r0, r2
 8016be8:	f7fe fad7 	bl	801519a <vListInsert>
}
 8016bec:	e010      	b.n	8016c10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016bee:	4b0e      	ldr	r3, [pc, #56]	@ (8016c28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8016c1c <prvAddCurrentTaskToDelayedList+0x94>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	3304      	adds	r3, #4
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	4610      	mov	r0, r2
 8016bfc:	f7fe facd 	bl	801519a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016c00:	4b0a      	ldr	r3, [pc, #40]	@ (8016c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	68ba      	ldr	r2, [r7, #8]
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d202      	bcs.n	8016c10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016c0a:	4a08      	ldr	r2, [pc, #32]	@ (8016c2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	6013      	str	r3, [r2, #0]
}
 8016c10:	bf00      	nop
 8016c12:	3710      	adds	r7, #16
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	2400164c 	.word	0x2400164c
 8016c1c:	24001174 	.word	0x24001174
 8016c20:	24001634 	.word	0x24001634
 8016c24:	24001604 	.word	0x24001604
 8016c28:	24001600 	.word	0x24001600
 8016c2c:	24001668 	.word	0x24001668

08016c30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b08a      	sub	sp, #40	@ 0x28
 8016c34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016c3a:	f000 fb13 	bl	8017264 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8016cb4 <xTimerCreateTimerTask+0x84>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d021      	beq.n	8016c8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016c46:	2300      	movs	r3, #0
 8016c48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016c4e:	1d3a      	adds	r2, r7, #4
 8016c50:	f107 0108 	add.w	r1, r7, #8
 8016c54:	f107 030c 	add.w	r3, r7, #12
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7fe fa33 	bl	80150c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016c5e:	6879      	ldr	r1, [r7, #4]
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	68fa      	ldr	r2, [r7, #12]
 8016c64:	9202      	str	r2, [sp, #8]
 8016c66:	9301      	str	r3, [sp, #4]
 8016c68:	2302      	movs	r3, #2
 8016c6a:	9300      	str	r3, [sp, #0]
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	460a      	mov	r2, r1
 8016c70:	4911      	ldr	r1, [pc, #68]	@ (8016cb8 <xTimerCreateTimerTask+0x88>)
 8016c72:	4812      	ldr	r0, [pc, #72]	@ (8016cbc <xTimerCreateTimerTask+0x8c>)
 8016c74:	f7ff f8d0 	bl	8015e18 <xTaskCreateStatic>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	4a11      	ldr	r2, [pc, #68]	@ (8016cc0 <xTimerCreateTimerTask+0x90>)
 8016c7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016c7e:	4b10      	ldr	r3, [pc, #64]	@ (8016cc0 <xTimerCreateTimerTask+0x90>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d001      	beq.n	8016c8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016c86:	2301      	movs	r3, #1
 8016c88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d10b      	bne.n	8016ca8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c94:	f383 8811 	msr	BASEPRI, r3
 8016c98:	f3bf 8f6f 	isb	sy
 8016c9c:	f3bf 8f4f 	dsb	sy
 8016ca0:	613b      	str	r3, [r7, #16]
}
 8016ca2:	bf00      	nop
 8016ca4:	bf00      	nop
 8016ca6:	e7fd      	b.n	8016ca4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016ca8:	697b      	ldr	r3, [r7, #20]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	3718      	adds	r7, #24
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	240016a4 	.word	0x240016a4
 8016cb8:	08018ddc 	.word	0x08018ddc
 8016cbc:	08016dfd 	.word	0x08016dfd
 8016cc0:	240016a8 	.word	0x240016a8

08016cc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b08a      	sub	sp, #40	@ 0x28
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
 8016cd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016cd2:	2300      	movs	r3, #0
 8016cd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016cd6:	68fb      	ldr	r3, [r7, #12]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d10b      	bne.n	8016cf4 <xTimerGenericCommand+0x30>
	__asm volatile
 8016cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ce0:	f383 8811 	msr	BASEPRI, r3
 8016ce4:	f3bf 8f6f 	isb	sy
 8016ce8:	f3bf 8f4f 	dsb	sy
 8016cec:	623b      	str	r3, [r7, #32]
}
 8016cee:	bf00      	nop
 8016cf0:	bf00      	nop
 8016cf2:	e7fd      	b.n	8016cf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016cf4:	4b19      	ldr	r3, [pc, #100]	@ (8016d5c <xTimerGenericCommand+0x98>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d02a      	beq.n	8016d52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	2b05      	cmp	r3, #5
 8016d0c:	dc18      	bgt.n	8016d40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016d0e:	f7ff fead 	bl	8016a6c <xTaskGetSchedulerState>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b02      	cmp	r3, #2
 8016d16:	d109      	bne.n	8016d2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016d18:	4b10      	ldr	r3, [pc, #64]	@ (8016d5c <xTimerGenericCommand+0x98>)
 8016d1a:	6818      	ldr	r0, [r3, #0]
 8016d1c:	f107 0110 	add.w	r1, r7, #16
 8016d20:	2300      	movs	r3, #0
 8016d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d24:	f7fe fbe2 	bl	80154ec <xQueueGenericSend>
 8016d28:	6278      	str	r0, [r7, #36]	@ 0x24
 8016d2a:	e012      	b.n	8016d52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8016d5c <xTimerGenericCommand+0x98>)
 8016d2e:	6818      	ldr	r0, [r3, #0]
 8016d30:	f107 0110 	add.w	r1, r7, #16
 8016d34:	2300      	movs	r3, #0
 8016d36:	2200      	movs	r2, #0
 8016d38:	f7fe fbd8 	bl	80154ec <xQueueGenericSend>
 8016d3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8016d3e:	e008      	b.n	8016d52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016d40:	4b06      	ldr	r3, [pc, #24]	@ (8016d5c <xTimerGenericCommand+0x98>)
 8016d42:	6818      	ldr	r0, [r3, #0]
 8016d44:	f107 0110 	add.w	r1, r7, #16
 8016d48:	2300      	movs	r3, #0
 8016d4a:	683a      	ldr	r2, [r7, #0]
 8016d4c:	f7fe fcd0 	bl	80156f0 <xQueueGenericSendFromISR>
 8016d50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016d54:	4618      	mov	r0, r3
 8016d56:	3728      	adds	r7, #40	@ 0x28
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}
 8016d5c:	240016a4 	.word	0x240016a4

08016d60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016d60:	b580      	push	{r7, lr}
 8016d62:	b088      	sub	sp, #32
 8016d64:	af02      	add	r7, sp, #8
 8016d66:	6078      	str	r0, [r7, #4]
 8016d68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016d6a:	4b23      	ldr	r3, [pc, #140]	@ (8016df8 <prvProcessExpiredTimer+0x98>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	68db      	ldr	r3, [r3, #12]
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	3304      	adds	r3, #4
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fe fa47 	bl	801520c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016d84:	f003 0304 	and.w	r3, r3, #4
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d023      	beq.n	8016dd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	699a      	ldr	r2, [r3, #24]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	18d1      	adds	r1, r2, r3
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	683a      	ldr	r2, [r7, #0]
 8016d98:	6978      	ldr	r0, [r7, #20]
 8016d9a:	f000 f8d5 	bl	8016f48 <prvInsertTimerInActiveList>
 8016d9e:	4603      	mov	r3, r0
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d020      	beq.n	8016de6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016da4:	2300      	movs	r3, #0
 8016da6:	9300      	str	r3, [sp, #0]
 8016da8:	2300      	movs	r3, #0
 8016daa:	687a      	ldr	r2, [r7, #4]
 8016dac:	2100      	movs	r1, #0
 8016dae:	6978      	ldr	r0, [r7, #20]
 8016db0:	f7ff ff88 	bl	8016cc4 <xTimerGenericCommand>
 8016db4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016db6:	693b      	ldr	r3, [r7, #16]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d114      	bne.n	8016de6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dc0:	f383 8811 	msr	BASEPRI, r3
 8016dc4:	f3bf 8f6f 	isb	sy
 8016dc8:	f3bf 8f4f 	dsb	sy
 8016dcc:	60fb      	str	r3, [r7, #12]
}
 8016dce:	bf00      	nop
 8016dd0:	bf00      	nop
 8016dd2:	e7fd      	b.n	8016dd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016dda:	f023 0301 	bic.w	r3, r3, #1
 8016dde:	b2da      	uxtb	r2, r3
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	6a1b      	ldr	r3, [r3, #32]
 8016dea:	6978      	ldr	r0, [r7, #20]
 8016dec:	4798      	blx	r3
}
 8016dee:	bf00      	nop
 8016df0:	3718      	adds	r7, #24
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}
 8016df6:	bf00      	nop
 8016df8:	2400169c 	.word	0x2400169c

08016dfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b084      	sub	sp, #16
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016e04:	f107 0308 	add.w	r3, r7, #8
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 f859 	bl	8016ec0 <prvGetNextExpireTime>
 8016e0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	4619      	mov	r1, r3
 8016e14:	68f8      	ldr	r0, [r7, #12]
 8016e16:	f000 f805 	bl	8016e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016e1a:	f000 f8d7 	bl	8016fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016e1e:	bf00      	nop
 8016e20:	e7f0      	b.n	8016e04 <prvTimerTask+0x8>
	...

08016e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b084      	sub	sp, #16
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016e2e:	f7ff fa37 	bl	80162a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016e32:	f107 0308 	add.w	r3, r7, #8
 8016e36:	4618      	mov	r0, r3
 8016e38:	f000 f866 	bl	8016f08 <prvSampleTimeNow>
 8016e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016e3e:	68bb      	ldr	r3, [r7, #8]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d130      	bne.n	8016ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016e44:	683b      	ldr	r3, [r7, #0]
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d10a      	bne.n	8016e60 <prvProcessTimerOrBlockTask+0x3c>
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	68fb      	ldr	r3, [r7, #12]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d806      	bhi.n	8016e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016e52:	f7ff fa33 	bl	80162bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016e56:	68f9      	ldr	r1, [r7, #12]
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f7ff ff81 	bl	8016d60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016e5e:	e024      	b.n	8016eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d008      	beq.n	8016e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016e66:	4b13      	ldr	r3, [pc, #76]	@ (8016eb4 <prvProcessTimerOrBlockTask+0x90>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d101      	bne.n	8016e74 <prvProcessTimerOrBlockTask+0x50>
 8016e70:	2301      	movs	r3, #1
 8016e72:	e000      	b.n	8016e76 <prvProcessTimerOrBlockTask+0x52>
 8016e74:	2300      	movs	r3, #0
 8016e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016e78:	4b0f      	ldr	r3, [pc, #60]	@ (8016eb8 <prvProcessTimerOrBlockTask+0x94>)
 8016e7a:	6818      	ldr	r0, [r3, #0]
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	1ad3      	subs	r3, r2, r3
 8016e82:	683a      	ldr	r2, [r7, #0]
 8016e84:	4619      	mov	r1, r3
 8016e86:	f7fe ff93 	bl	8015db0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016e8a:	f7ff fa17 	bl	80162bc <xTaskResumeAll>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d10a      	bne.n	8016eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016e94:	4b09      	ldr	r3, [pc, #36]	@ (8016ebc <prvProcessTimerOrBlockTask+0x98>)
 8016e96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016e9a:	601a      	str	r2, [r3, #0]
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	f3bf 8f6f 	isb	sy
}
 8016ea4:	e001      	b.n	8016eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016ea6:	f7ff fa09 	bl	80162bc <xTaskResumeAll>
}
 8016eaa:	bf00      	nop
 8016eac:	3710      	adds	r7, #16
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	240016a0 	.word	0x240016a0
 8016eb8:	240016a4 	.word	0x240016a4
 8016ebc:	e000ed04 	.word	0xe000ed04

08016ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016ec0:	b480      	push	{r7}
 8016ec2:	b085      	sub	sp, #20
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8016f04 <prvGetNextExpireTime+0x44>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d101      	bne.n	8016ed6 <prvGetNextExpireTime+0x16>
 8016ed2:	2201      	movs	r2, #1
 8016ed4:	e000      	b.n	8016ed8 <prvGetNextExpireTime+0x18>
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d105      	bne.n	8016ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016ee4:	4b07      	ldr	r3, [pc, #28]	@ (8016f04 <prvGetNextExpireTime+0x44>)
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	68db      	ldr	r3, [r3, #12]
 8016eea:	681b      	ldr	r3, [r3, #0]
 8016eec:	60fb      	str	r3, [r7, #12]
 8016eee:	e001      	b.n	8016ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3714      	adds	r7, #20
 8016efa:	46bd      	mov	sp, r7
 8016efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f00:	4770      	bx	lr
 8016f02:	bf00      	nop
 8016f04:	2400169c 	.word	0x2400169c

08016f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b084      	sub	sp, #16
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016f10:	f7ff fa72 	bl	80163f8 <xTaskGetTickCount>
 8016f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016f16:	4b0b      	ldr	r3, [pc, #44]	@ (8016f44 <prvSampleTimeNow+0x3c>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	68fa      	ldr	r2, [r7, #12]
 8016f1c:	429a      	cmp	r2, r3
 8016f1e:	d205      	bcs.n	8016f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016f20:	f000 f93a 	bl	8017198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	2201      	movs	r2, #1
 8016f28:	601a      	str	r2, [r3, #0]
 8016f2a:	e002      	b.n	8016f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	2200      	movs	r2, #0
 8016f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016f32:	4a04      	ldr	r2, [pc, #16]	@ (8016f44 <prvSampleTimeNow+0x3c>)
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016f38:	68fb      	ldr	r3, [r7, #12]
}
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop
 8016f44:	240016ac 	.word	0x240016ac

08016f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b086      	sub	sp, #24
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	60f8      	str	r0, [r7, #12]
 8016f50:	60b9      	str	r1, [r7, #8]
 8016f52:	607a      	str	r2, [r7, #4]
 8016f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016f56:	2300      	movs	r3, #0
 8016f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	68ba      	ldr	r2, [r7, #8]
 8016f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	68fa      	ldr	r2, [r7, #12]
 8016f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016f66:	68ba      	ldr	r2, [r7, #8]
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d812      	bhi.n	8016f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f6e:	687a      	ldr	r2, [r7, #4]
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	1ad2      	subs	r2, r2, r3
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	699b      	ldr	r3, [r3, #24]
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d302      	bcc.n	8016f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016f7c:	2301      	movs	r3, #1
 8016f7e:	617b      	str	r3, [r7, #20]
 8016f80:	e01b      	b.n	8016fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016f82:	4b10      	ldr	r3, [pc, #64]	@ (8016fc4 <prvInsertTimerInActiveList+0x7c>)
 8016f84:	681a      	ldr	r2, [r3, #0]
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	3304      	adds	r3, #4
 8016f8a:	4619      	mov	r1, r3
 8016f8c:	4610      	mov	r0, r2
 8016f8e:	f7fe f904 	bl	801519a <vListInsert>
 8016f92:	e012      	b.n	8016fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d206      	bcs.n	8016faa <prvInsertTimerInActiveList+0x62>
 8016f9c:	68ba      	ldr	r2, [r7, #8]
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d302      	bcc.n	8016faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	617b      	str	r3, [r7, #20]
 8016fa8:	e007      	b.n	8016fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016faa:	4b07      	ldr	r3, [pc, #28]	@ (8016fc8 <prvInsertTimerInActiveList+0x80>)
 8016fac:	681a      	ldr	r2, [r3, #0]
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	3304      	adds	r3, #4
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	4610      	mov	r0, r2
 8016fb6:	f7fe f8f0 	bl	801519a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016fba:	697b      	ldr	r3, [r7, #20]
}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	3718      	adds	r7, #24
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}
 8016fc4:	240016a0 	.word	0x240016a0
 8016fc8:	2400169c 	.word	0x2400169c

08016fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b08e      	sub	sp, #56	@ 0x38
 8016fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016fd2:	e0ce      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	da19      	bge.n	801700e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016fda:	1d3b      	adds	r3, r7, #4
 8016fdc:	3304      	adds	r3, #4
 8016fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d10b      	bne.n	8016ffe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fea:	f383 8811 	msr	BASEPRI, r3
 8016fee:	f3bf 8f6f 	isb	sy
 8016ff2:	f3bf 8f4f 	dsb	sy
 8016ff6:	61fb      	str	r3, [r7, #28]
}
 8016ff8:	bf00      	nop
 8016ffa:	bf00      	nop
 8016ffc:	e7fd      	b.n	8016ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017004:	6850      	ldr	r0, [r2, #4]
 8017006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017008:	6892      	ldr	r2, [r2, #8]
 801700a:	4611      	mov	r1, r2
 801700c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2b00      	cmp	r3, #0
 8017012:	f2c0 80ae 	blt.w	8017172 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801701c:	695b      	ldr	r3, [r3, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d004      	beq.n	801702c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017024:	3304      	adds	r3, #4
 8017026:	4618      	mov	r0, r3
 8017028:	f7fe f8f0 	bl	801520c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801702c:	463b      	mov	r3, r7
 801702e:	4618      	mov	r0, r3
 8017030:	f7ff ff6a 	bl	8016f08 <prvSampleTimeNow>
 8017034:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2b09      	cmp	r3, #9
 801703a:	f200 8097 	bhi.w	801716c <prvProcessReceivedCommands+0x1a0>
 801703e:	a201      	add	r2, pc, #4	@ (adr r2, 8017044 <prvProcessReceivedCommands+0x78>)
 8017040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017044:	0801706d 	.word	0x0801706d
 8017048:	0801706d 	.word	0x0801706d
 801704c:	0801706d 	.word	0x0801706d
 8017050:	080170e3 	.word	0x080170e3
 8017054:	080170f7 	.word	0x080170f7
 8017058:	08017143 	.word	0x08017143
 801705c:	0801706d 	.word	0x0801706d
 8017060:	0801706d 	.word	0x0801706d
 8017064:	080170e3 	.word	0x080170e3
 8017068:	080170f7 	.word	0x080170f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801706e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017072:	f043 0301 	orr.w	r3, r3, #1
 8017076:	b2da      	uxtb	r2, r3
 8017078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801707a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801707e:	68ba      	ldr	r2, [r7, #8]
 8017080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017082:	699b      	ldr	r3, [r3, #24]
 8017084:	18d1      	adds	r1, r2, r3
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801708a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801708c:	f7ff ff5c 	bl	8016f48 <prvInsertTimerInActiveList>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d06c      	beq.n	8017170 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017098:	6a1b      	ldr	r3, [r3, #32]
 801709a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801709c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801709e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80170a4:	f003 0304 	and.w	r3, r3, #4
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d061      	beq.n	8017170 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80170ac:	68ba      	ldr	r2, [r7, #8]
 80170ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170b0:	699b      	ldr	r3, [r3, #24]
 80170b2:	441a      	add	r2, r3
 80170b4:	2300      	movs	r3, #0
 80170b6:	9300      	str	r3, [sp, #0]
 80170b8:	2300      	movs	r3, #0
 80170ba:	2100      	movs	r1, #0
 80170bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80170be:	f7ff fe01 	bl	8016cc4 <xTimerGenericCommand>
 80170c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80170c4:	6a3b      	ldr	r3, [r7, #32]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d152      	bne.n	8017170 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80170ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170ce:	f383 8811 	msr	BASEPRI, r3
 80170d2:	f3bf 8f6f 	isb	sy
 80170d6:	f3bf 8f4f 	dsb	sy
 80170da:	61bb      	str	r3, [r7, #24]
}
 80170dc:	bf00      	nop
 80170de:	bf00      	nop
 80170e0:	e7fd      	b.n	80170de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80170e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80170e8:	f023 0301 	bic.w	r3, r3, #1
 80170ec:	b2da      	uxtb	r2, r3
 80170ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80170f4:	e03d      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80170f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80170fc:	f043 0301 	orr.w	r3, r3, #1
 8017100:	b2da      	uxtb	r2, r3
 8017102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017108:	68ba      	ldr	r2, [r7, #8]
 801710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801710c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017110:	699b      	ldr	r3, [r3, #24]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d10b      	bne.n	801712e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8017116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801711a:	f383 8811 	msr	BASEPRI, r3
 801711e:	f3bf 8f6f 	isb	sy
 8017122:	f3bf 8f4f 	dsb	sy
 8017126:	617b      	str	r3, [r7, #20]
}
 8017128:	bf00      	nop
 801712a:	bf00      	nop
 801712c:	e7fd      	b.n	801712a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017130:	699a      	ldr	r2, [r3, #24]
 8017132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017134:	18d1      	adds	r1, r2, r3
 8017136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801713a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801713c:	f7ff ff04 	bl	8016f48 <prvInsertTimerInActiveList>
					break;
 8017140:	e017      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017148:	f003 0302 	and.w	r3, r3, #2
 801714c:	2b00      	cmp	r3, #0
 801714e:	d103      	bne.n	8017158 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8017150:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017152:	f000 fbe9 	bl	8017928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017156:	e00c      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801715a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801715e:	f023 0301 	bic.w	r3, r3, #1
 8017162:	b2da      	uxtb	r2, r3
 8017164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801716a:	e002      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 801716c:	bf00      	nop
 801716e:	e000      	b.n	8017172 <prvProcessReceivedCommands+0x1a6>
					break;
 8017170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017172:	4b08      	ldr	r3, [pc, #32]	@ (8017194 <prvProcessReceivedCommands+0x1c8>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	1d39      	adds	r1, r7, #4
 8017178:	2200      	movs	r2, #0
 801717a:	4618      	mov	r0, r3
 801717c:	f7fe fb56 	bl	801582c <xQueueReceive>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	f47f af26 	bne.w	8016fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017188:	bf00      	nop
 801718a:	bf00      	nop
 801718c:	3730      	adds	r7, #48	@ 0x30
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	240016a4 	.word	0x240016a4

08017198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b088      	sub	sp, #32
 801719c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801719e:	e049      	b.n	8017234 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80171a0:	4b2e      	ldr	r3, [pc, #184]	@ (801725c <prvSwitchTimerLists+0xc4>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	68db      	ldr	r3, [r3, #12]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171aa:	4b2c      	ldr	r3, [pc, #176]	@ (801725c <prvSwitchTimerLists+0xc4>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	68db      	ldr	r3, [r3, #12]
 80171b0:	68db      	ldr	r3, [r3, #12]
 80171b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	3304      	adds	r3, #4
 80171b8:	4618      	mov	r0, r3
 80171ba:	f7fe f827 	bl	801520c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	6a1b      	ldr	r3, [r3, #32]
 80171c2:	68f8      	ldr	r0, [r7, #12]
 80171c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80171cc:	f003 0304 	and.w	r3, r3, #4
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d02f      	beq.n	8017234 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	699b      	ldr	r3, [r3, #24]
 80171d8:	693a      	ldr	r2, [r7, #16]
 80171da:	4413      	add	r3, r2
 80171dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80171de:	68ba      	ldr	r2, [r7, #8]
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d90e      	bls.n	8017204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	68ba      	ldr	r2, [r7, #8]
 80171ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	68fa      	ldr	r2, [r7, #12]
 80171f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80171f2:	4b1a      	ldr	r3, [pc, #104]	@ (801725c <prvSwitchTimerLists+0xc4>)
 80171f4:	681a      	ldr	r2, [r3, #0]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	3304      	adds	r3, #4
 80171fa:	4619      	mov	r1, r3
 80171fc:	4610      	mov	r0, r2
 80171fe:	f7fd ffcc 	bl	801519a <vListInsert>
 8017202:	e017      	b.n	8017234 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017204:	2300      	movs	r3, #0
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	2300      	movs	r3, #0
 801720a:	693a      	ldr	r2, [r7, #16]
 801720c:	2100      	movs	r1, #0
 801720e:	68f8      	ldr	r0, [r7, #12]
 8017210:	f7ff fd58 	bl	8016cc4 <xTimerGenericCommand>
 8017214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d10b      	bne.n	8017234 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017220:	f383 8811 	msr	BASEPRI, r3
 8017224:	f3bf 8f6f 	isb	sy
 8017228:	f3bf 8f4f 	dsb	sy
 801722c:	603b      	str	r3, [r7, #0]
}
 801722e:	bf00      	nop
 8017230:	bf00      	nop
 8017232:	e7fd      	b.n	8017230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017234:	4b09      	ldr	r3, [pc, #36]	@ (801725c <prvSwitchTimerLists+0xc4>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	2b00      	cmp	r3, #0
 801723c:	d1b0      	bne.n	80171a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801723e:	4b07      	ldr	r3, [pc, #28]	@ (801725c <prvSwitchTimerLists+0xc4>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017244:	4b06      	ldr	r3, [pc, #24]	@ (8017260 <prvSwitchTimerLists+0xc8>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	4a04      	ldr	r2, [pc, #16]	@ (801725c <prvSwitchTimerLists+0xc4>)
 801724a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801724c:	4a04      	ldr	r2, [pc, #16]	@ (8017260 <prvSwitchTimerLists+0xc8>)
 801724e:	697b      	ldr	r3, [r7, #20]
 8017250:	6013      	str	r3, [r2, #0]
}
 8017252:	bf00      	nop
 8017254:	3718      	adds	r7, #24
 8017256:	46bd      	mov	sp, r7
 8017258:	bd80      	pop	{r7, pc}
 801725a:	bf00      	nop
 801725c:	2400169c 	.word	0x2400169c
 8017260:	240016a0 	.word	0x240016a0

08017264 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b082      	sub	sp, #8
 8017268:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801726a:	f000 f96d 	bl	8017548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801726e:	4b15      	ldr	r3, [pc, #84]	@ (80172c4 <prvCheckForValidListAndQueue+0x60>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d120      	bne.n	80172b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017276:	4814      	ldr	r0, [pc, #80]	@ (80172c8 <prvCheckForValidListAndQueue+0x64>)
 8017278:	f7fd ff3e 	bl	80150f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801727c:	4813      	ldr	r0, [pc, #76]	@ (80172cc <prvCheckForValidListAndQueue+0x68>)
 801727e:	f7fd ff3b 	bl	80150f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017282:	4b13      	ldr	r3, [pc, #76]	@ (80172d0 <prvCheckForValidListAndQueue+0x6c>)
 8017284:	4a10      	ldr	r2, [pc, #64]	@ (80172c8 <prvCheckForValidListAndQueue+0x64>)
 8017286:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017288:	4b12      	ldr	r3, [pc, #72]	@ (80172d4 <prvCheckForValidListAndQueue+0x70>)
 801728a:	4a10      	ldr	r2, [pc, #64]	@ (80172cc <prvCheckForValidListAndQueue+0x68>)
 801728c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801728e:	2300      	movs	r3, #0
 8017290:	9300      	str	r3, [sp, #0]
 8017292:	4b11      	ldr	r3, [pc, #68]	@ (80172d8 <prvCheckForValidListAndQueue+0x74>)
 8017294:	4a11      	ldr	r2, [pc, #68]	@ (80172dc <prvCheckForValidListAndQueue+0x78>)
 8017296:	2110      	movs	r1, #16
 8017298:	200a      	movs	r0, #10
 801729a:	f7fe f84b 	bl	8015334 <xQueueGenericCreateStatic>
 801729e:	4603      	mov	r3, r0
 80172a0:	4a08      	ldr	r2, [pc, #32]	@ (80172c4 <prvCheckForValidListAndQueue+0x60>)
 80172a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80172a4:	4b07      	ldr	r3, [pc, #28]	@ (80172c4 <prvCheckForValidListAndQueue+0x60>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d005      	beq.n	80172b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80172ac:	4b05      	ldr	r3, [pc, #20]	@ (80172c4 <prvCheckForValidListAndQueue+0x60>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	490b      	ldr	r1, [pc, #44]	@ (80172e0 <prvCheckForValidListAndQueue+0x7c>)
 80172b2:	4618      	mov	r0, r3
 80172b4:	f7fe fd52 	bl	8015d5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80172b8:	f000 f978 	bl	80175ac <vPortExitCritical>
}
 80172bc:	bf00      	nop
 80172be:	46bd      	mov	sp, r7
 80172c0:	bd80      	pop	{r7, pc}
 80172c2:	bf00      	nop
 80172c4:	240016a4 	.word	0x240016a4
 80172c8:	24001674 	.word	0x24001674
 80172cc:	24001688 	.word	0x24001688
 80172d0:	2400169c 	.word	0x2400169c
 80172d4:	240016a0 	.word	0x240016a0
 80172d8:	24001750 	.word	0x24001750
 80172dc:	240016b0 	.word	0x240016b0
 80172e0:	08018de4 	.word	0x08018de4

080172e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80172e4:	b480      	push	{r7}
 80172e6:	b085      	sub	sp, #20
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
 80172ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	3b04      	subs	r3, #4
 80172f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80172fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	3b04      	subs	r3, #4
 8017302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017304:	68bb      	ldr	r3, [r7, #8]
 8017306:	f023 0201 	bic.w	r2, r3, #1
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	3b04      	subs	r3, #4
 8017312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017314:	4a0c      	ldr	r2, [pc, #48]	@ (8017348 <pxPortInitialiseStack+0x64>)
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	3b14      	subs	r3, #20
 801731e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017320:	687a      	ldr	r2, [r7, #4]
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	3b04      	subs	r3, #4
 801732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	f06f 0202 	mvn.w	r2, #2
 8017332:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	3b20      	subs	r3, #32
 8017338:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801733a:	68fb      	ldr	r3, [r7, #12]
}
 801733c:	4618      	mov	r0, r3
 801733e:	3714      	adds	r7, #20
 8017340:	46bd      	mov	sp, r7
 8017342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017346:	4770      	bx	lr
 8017348:	0801734d 	.word	0x0801734d

0801734c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801734c:	b480      	push	{r7}
 801734e:	b085      	sub	sp, #20
 8017350:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8017352:	2300      	movs	r3, #0
 8017354:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017356:	4b13      	ldr	r3, [pc, #76]	@ (80173a4 <prvTaskExitError+0x58>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801735e:	d00b      	beq.n	8017378 <prvTaskExitError+0x2c>
	__asm volatile
 8017360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017364:	f383 8811 	msr	BASEPRI, r3
 8017368:	f3bf 8f6f 	isb	sy
 801736c:	f3bf 8f4f 	dsb	sy
 8017370:	60fb      	str	r3, [r7, #12]
}
 8017372:	bf00      	nop
 8017374:	bf00      	nop
 8017376:	e7fd      	b.n	8017374 <prvTaskExitError+0x28>
	__asm volatile
 8017378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801737c:	f383 8811 	msr	BASEPRI, r3
 8017380:	f3bf 8f6f 	isb	sy
 8017384:	f3bf 8f4f 	dsb	sy
 8017388:	60bb      	str	r3, [r7, #8]
}
 801738a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801738c:	bf00      	nop
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d0fc      	beq.n	801738e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017394:	bf00      	nop
 8017396:	bf00      	nop
 8017398:	3714      	adds	r7, #20
 801739a:	46bd      	mov	sp, r7
 801739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173a0:	4770      	bx	lr
 80173a2:	bf00      	nop
 80173a4:	24000094 	.word	0x24000094
	...

080173b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80173b0:	4b07      	ldr	r3, [pc, #28]	@ (80173d0 <pxCurrentTCBConst2>)
 80173b2:	6819      	ldr	r1, [r3, #0]
 80173b4:	6808      	ldr	r0, [r1, #0]
 80173b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173ba:	f380 8809 	msr	PSP, r0
 80173be:	f3bf 8f6f 	isb	sy
 80173c2:	f04f 0000 	mov.w	r0, #0
 80173c6:	f380 8811 	msr	BASEPRI, r0
 80173ca:	4770      	bx	lr
 80173cc:	f3af 8000 	nop.w

080173d0 <pxCurrentTCBConst2>:
 80173d0:	24001174 	.word	0x24001174
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80173d4:	bf00      	nop
 80173d6:	bf00      	nop

080173d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80173d8:	4808      	ldr	r0, [pc, #32]	@ (80173fc <prvPortStartFirstTask+0x24>)
 80173da:	6800      	ldr	r0, [r0, #0]
 80173dc:	6800      	ldr	r0, [r0, #0]
 80173de:	f380 8808 	msr	MSP, r0
 80173e2:	f04f 0000 	mov.w	r0, #0
 80173e6:	f380 8814 	msr	CONTROL, r0
 80173ea:	b662      	cpsie	i
 80173ec:	b661      	cpsie	f
 80173ee:	f3bf 8f4f 	dsb	sy
 80173f2:	f3bf 8f6f 	isb	sy
 80173f6:	df00      	svc	0
 80173f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80173fa:	bf00      	nop
 80173fc:	e000ed08 	.word	0xe000ed08

08017400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017406:	4b47      	ldr	r3, [pc, #284]	@ (8017524 <xPortStartScheduler+0x124>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	4a47      	ldr	r2, [pc, #284]	@ (8017528 <xPortStartScheduler+0x128>)
 801740c:	4293      	cmp	r3, r2
 801740e:	d10b      	bne.n	8017428 <xPortStartScheduler+0x28>
	__asm volatile
 8017410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017414:	f383 8811 	msr	BASEPRI, r3
 8017418:	f3bf 8f6f 	isb	sy
 801741c:	f3bf 8f4f 	dsb	sy
 8017420:	60fb      	str	r3, [r7, #12]
}
 8017422:	bf00      	nop
 8017424:	bf00      	nop
 8017426:	e7fd      	b.n	8017424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017428:	4b3e      	ldr	r3, [pc, #248]	@ (8017524 <xPortStartScheduler+0x124>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	4a3f      	ldr	r2, [pc, #252]	@ (801752c <xPortStartScheduler+0x12c>)
 801742e:	4293      	cmp	r3, r2
 8017430:	d10b      	bne.n	801744a <xPortStartScheduler+0x4a>
	__asm volatile
 8017432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017436:	f383 8811 	msr	BASEPRI, r3
 801743a:	f3bf 8f6f 	isb	sy
 801743e:	f3bf 8f4f 	dsb	sy
 8017442:	613b      	str	r3, [r7, #16]
}
 8017444:	bf00      	nop
 8017446:	bf00      	nop
 8017448:	e7fd      	b.n	8017446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801744a:	4b39      	ldr	r3, [pc, #228]	@ (8017530 <xPortStartScheduler+0x130>)
 801744c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	781b      	ldrb	r3, [r3, #0]
 8017452:	b2db      	uxtb	r3, r3
 8017454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	22ff      	movs	r2, #255	@ 0xff
 801745a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	b2db      	uxtb	r3, r3
 8017462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017464:	78fb      	ldrb	r3, [r7, #3]
 8017466:	b2db      	uxtb	r3, r3
 8017468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801746c:	b2da      	uxtb	r2, r3
 801746e:	4b31      	ldr	r3, [pc, #196]	@ (8017534 <xPortStartScheduler+0x134>)
 8017470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017472:	4b31      	ldr	r3, [pc, #196]	@ (8017538 <xPortStartScheduler+0x138>)
 8017474:	2207      	movs	r2, #7
 8017476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017478:	e009      	b.n	801748e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801747a:	4b2f      	ldr	r3, [pc, #188]	@ (8017538 <xPortStartScheduler+0x138>)
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	3b01      	subs	r3, #1
 8017480:	4a2d      	ldr	r2, [pc, #180]	@ (8017538 <xPortStartScheduler+0x138>)
 8017482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017484:	78fb      	ldrb	r3, [r7, #3]
 8017486:	b2db      	uxtb	r3, r3
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	b2db      	uxtb	r3, r3
 801748c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801748e:	78fb      	ldrb	r3, [r7, #3]
 8017490:	b2db      	uxtb	r3, r3
 8017492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017496:	2b80      	cmp	r3, #128	@ 0x80
 8017498:	d0ef      	beq.n	801747a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801749a:	4b27      	ldr	r3, [pc, #156]	@ (8017538 <xPortStartScheduler+0x138>)
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	f1c3 0307 	rsb	r3, r3, #7
 80174a2:	2b04      	cmp	r3, #4
 80174a4:	d00b      	beq.n	80174be <xPortStartScheduler+0xbe>
	__asm volatile
 80174a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174aa:	f383 8811 	msr	BASEPRI, r3
 80174ae:	f3bf 8f6f 	isb	sy
 80174b2:	f3bf 8f4f 	dsb	sy
 80174b6:	60bb      	str	r3, [r7, #8]
}
 80174b8:	bf00      	nop
 80174ba:	bf00      	nop
 80174bc:	e7fd      	b.n	80174ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80174be:	4b1e      	ldr	r3, [pc, #120]	@ (8017538 <xPortStartScheduler+0x138>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	021b      	lsls	r3, r3, #8
 80174c4:	4a1c      	ldr	r2, [pc, #112]	@ (8017538 <xPortStartScheduler+0x138>)
 80174c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80174c8:	4b1b      	ldr	r3, [pc, #108]	@ (8017538 <xPortStartScheduler+0x138>)
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80174d0:	4a19      	ldr	r2, [pc, #100]	@ (8017538 <xPortStartScheduler+0x138>)
 80174d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	b2da      	uxtb	r2, r3
 80174d8:	697b      	ldr	r3, [r7, #20]
 80174da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80174dc:	4b17      	ldr	r3, [pc, #92]	@ (801753c <xPortStartScheduler+0x13c>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	4a16      	ldr	r2, [pc, #88]	@ (801753c <xPortStartScheduler+0x13c>)
 80174e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80174e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80174e8:	4b14      	ldr	r3, [pc, #80]	@ (801753c <xPortStartScheduler+0x13c>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	4a13      	ldr	r2, [pc, #76]	@ (801753c <xPortStartScheduler+0x13c>)
 80174ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80174f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80174f4:	f000 f8da 	bl	80176ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80174f8:	4b11      	ldr	r3, [pc, #68]	@ (8017540 <xPortStartScheduler+0x140>)
 80174fa:	2200      	movs	r2, #0
 80174fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80174fe:	f000 f8f9 	bl	80176f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017502:	4b10      	ldr	r3, [pc, #64]	@ (8017544 <xPortStartScheduler+0x144>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4a0f      	ldr	r2, [pc, #60]	@ (8017544 <xPortStartScheduler+0x144>)
 8017508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801750c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801750e:	f7ff ff63 	bl	80173d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017512:	f7ff f83b 	bl	801658c <vTaskSwitchContext>
	prvTaskExitError();
 8017516:	f7ff ff19 	bl	801734c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801751a:	2300      	movs	r3, #0
}
 801751c:	4618      	mov	r0, r3
 801751e:	3718      	adds	r7, #24
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	e000ed00 	.word	0xe000ed00
 8017528:	410fc271 	.word	0x410fc271
 801752c:	410fc270 	.word	0x410fc270
 8017530:	e000e400 	.word	0xe000e400
 8017534:	240017a0 	.word	0x240017a0
 8017538:	240017a4 	.word	0x240017a4
 801753c:	e000ed20 	.word	0xe000ed20
 8017540:	24000094 	.word	0x24000094
 8017544:	e000ef34 	.word	0xe000ef34

08017548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
	__asm volatile
 801754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017552:	f383 8811 	msr	BASEPRI, r3
 8017556:	f3bf 8f6f 	isb	sy
 801755a:	f3bf 8f4f 	dsb	sy
 801755e:	607b      	str	r3, [r7, #4]
}
 8017560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017562:	4b10      	ldr	r3, [pc, #64]	@ (80175a4 <vPortEnterCritical+0x5c>)
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	3301      	adds	r3, #1
 8017568:	4a0e      	ldr	r2, [pc, #56]	@ (80175a4 <vPortEnterCritical+0x5c>)
 801756a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801756c:	4b0d      	ldr	r3, [pc, #52]	@ (80175a4 <vPortEnterCritical+0x5c>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	2b01      	cmp	r3, #1
 8017572:	d110      	bne.n	8017596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017574:	4b0c      	ldr	r3, [pc, #48]	@ (80175a8 <vPortEnterCritical+0x60>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	b2db      	uxtb	r3, r3
 801757a:	2b00      	cmp	r3, #0
 801757c:	d00b      	beq.n	8017596 <vPortEnterCritical+0x4e>
	__asm volatile
 801757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017582:	f383 8811 	msr	BASEPRI, r3
 8017586:	f3bf 8f6f 	isb	sy
 801758a:	f3bf 8f4f 	dsb	sy
 801758e:	603b      	str	r3, [r7, #0]
}
 8017590:	bf00      	nop
 8017592:	bf00      	nop
 8017594:	e7fd      	b.n	8017592 <vPortEnterCritical+0x4a>
	}
}
 8017596:	bf00      	nop
 8017598:	370c      	adds	r7, #12
 801759a:	46bd      	mov	sp, r7
 801759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a0:	4770      	bx	lr
 80175a2:	bf00      	nop
 80175a4:	24000094 	.word	0x24000094
 80175a8:	e000ed04 	.word	0xe000ed04

080175ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80175ac:	b480      	push	{r7}
 80175ae:	b083      	sub	sp, #12
 80175b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80175b2:	4b12      	ldr	r3, [pc, #72]	@ (80175fc <vPortExitCritical+0x50>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d10b      	bne.n	80175d2 <vPortExitCritical+0x26>
	__asm volatile
 80175ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175be:	f383 8811 	msr	BASEPRI, r3
 80175c2:	f3bf 8f6f 	isb	sy
 80175c6:	f3bf 8f4f 	dsb	sy
 80175ca:	607b      	str	r3, [r7, #4]
}
 80175cc:	bf00      	nop
 80175ce:	bf00      	nop
 80175d0:	e7fd      	b.n	80175ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80175d2:	4b0a      	ldr	r3, [pc, #40]	@ (80175fc <vPortExitCritical+0x50>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	3b01      	subs	r3, #1
 80175d8:	4a08      	ldr	r2, [pc, #32]	@ (80175fc <vPortExitCritical+0x50>)
 80175da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80175dc:	4b07      	ldr	r3, [pc, #28]	@ (80175fc <vPortExitCritical+0x50>)
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d105      	bne.n	80175f0 <vPortExitCritical+0x44>
 80175e4:	2300      	movs	r3, #0
 80175e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80175e8:	683b      	ldr	r3, [r7, #0]
 80175ea:	f383 8811 	msr	BASEPRI, r3
}
 80175ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80175f0:	bf00      	nop
 80175f2:	370c      	adds	r7, #12
 80175f4:	46bd      	mov	sp, r7
 80175f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175fa:	4770      	bx	lr
 80175fc:	24000094 	.word	0x24000094

08017600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017600:	f3ef 8009 	mrs	r0, PSP
 8017604:	f3bf 8f6f 	isb	sy
 8017608:	4b15      	ldr	r3, [pc, #84]	@ (8017660 <pxCurrentTCBConst>)
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	f01e 0f10 	tst.w	lr, #16
 8017610:	bf08      	it	eq
 8017612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801761a:	6010      	str	r0, [r2, #0]
 801761c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017624:	f380 8811 	msr	BASEPRI, r0
 8017628:	f3bf 8f4f 	dsb	sy
 801762c:	f3bf 8f6f 	isb	sy
 8017630:	f7fe ffac 	bl	801658c <vTaskSwitchContext>
 8017634:	f04f 0000 	mov.w	r0, #0
 8017638:	f380 8811 	msr	BASEPRI, r0
 801763c:	bc09      	pop	{r0, r3}
 801763e:	6819      	ldr	r1, [r3, #0]
 8017640:	6808      	ldr	r0, [r1, #0]
 8017642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017646:	f01e 0f10 	tst.w	lr, #16
 801764a:	bf08      	it	eq
 801764c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017650:	f380 8809 	msr	PSP, r0
 8017654:	f3bf 8f6f 	isb	sy
 8017658:	4770      	bx	lr
 801765a:	bf00      	nop
 801765c:	f3af 8000 	nop.w

08017660 <pxCurrentTCBConst>:
 8017660:	24001174 	.word	0x24001174
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017664:	bf00      	nop
 8017666:	bf00      	nop

08017668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
	__asm volatile
 801766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017672:	f383 8811 	msr	BASEPRI, r3
 8017676:	f3bf 8f6f 	isb	sy
 801767a:	f3bf 8f4f 	dsb	sy
 801767e:	607b      	str	r3, [r7, #4]
}
 8017680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017682:	f7fe fec9 	bl	8016418 <xTaskIncrementTick>
 8017686:	4603      	mov	r3, r0
 8017688:	2b00      	cmp	r3, #0
 801768a:	d003      	beq.n	8017694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801768c:	4b06      	ldr	r3, [pc, #24]	@ (80176a8 <xPortSysTickHandler+0x40>)
 801768e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017692:	601a      	str	r2, [r3, #0]
 8017694:	2300      	movs	r3, #0
 8017696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	f383 8811 	msr	BASEPRI, r3
}
 801769e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80176a0:	bf00      	nop
 80176a2:	3708      	adds	r7, #8
 80176a4:	46bd      	mov	sp, r7
 80176a6:	bd80      	pop	{r7, pc}
 80176a8:	e000ed04 	.word	0xe000ed04

080176ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80176ac:	b480      	push	{r7}
 80176ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80176b0:	4b0b      	ldr	r3, [pc, #44]	@ (80176e0 <vPortSetupTimerInterrupt+0x34>)
 80176b2:	2200      	movs	r2, #0
 80176b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80176b6:	4b0b      	ldr	r3, [pc, #44]	@ (80176e4 <vPortSetupTimerInterrupt+0x38>)
 80176b8:	2200      	movs	r2, #0
 80176ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80176bc:	4b0a      	ldr	r3, [pc, #40]	@ (80176e8 <vPortSetupTimerInterrupt+0x3c>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	4a0a      	ldr	r2, [pc, #40]	@ (80176ec <vPortSetupTimerInterrupt+0x40>)
 80176c2:	fba2 2303 	umull	r2, r3, r2, r3
 80176c6:	099b      	lsrs	r3, r3, #6
 80176c8:	4a09      	ldr	r2, [pc, #36]	@ (80176f0 <vPortSetupTimerInterrupt+0x44>)
 80176ca:	3b01      	subs	r3, #1
 80176cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80176ce:	4b04      	ldr	r3, [pc, #16]	@ (80176e0 <vPortSetupTimerInterrupt+0x34>)
 80176d0:	2207      	movs	r2, #7
 80176d2:	601a      	str	r2, [r3, #0]
}
 80176d4:	bf00      	nop
 80176d6:	46bd      	mov	sp, r7
 80176d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176dc:	4770      	bx	lr
 80176de:	bf00      	nop
 80176e0:	e000e010 	.word	0xe000e010
 80176e4:	e000e018 	.word	0xe000e018
 80176e8:	24000000 	.word	0x24000000
 80176ec:	10624dd3 	.word	0x10624dd3
 80176f0:	e000e014 	.word	0xe000e014

080176f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80176f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017704 <vPortEnableVFP+0x10>
 80176f8:	6801      	ldr	r1, [r0, #0]
 80176fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80176fe:	6001      	str	r1, [r0, #0]
 8017700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017702:	bf00      	nop
 8017704:	e000ed88 	.word	0xe000ed88

08017708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801770e:	f3ef 8305 	mrs	r3, IPSR
 8017712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	2b0f      	cmp	r3, #15
 8017718:	d915      	bls.n	8017746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801771a:	4a18      	ldr	r2, [pc, #96]	@ (801777c <vPortValidateInterruptPriority+0x74>)
 801771c:	68fb      	ldr	r3, [r7, #12]
 801771e:	4413      	add	r3, r2
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017724:	4b16      	ldr	r3, [pc, #88]	@ (8017780 <vPortValidateInterruptPriority+0x78>)
 8017726:	781b      	ldrb	r3, [r3, #0]
 8017728:	7afa      	ldrb	r2, [r7, #11]
 801772a:	429a      	cmp	r2, r3
 801772c:	d20b      	bcs.n	8017746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017732:	f383 8811 	msr	BASEPRI, r3
 8017736:	f3bf 8f6f 	isb	sy
 801773a:	f3bf 8f4f 	dsb	sy
 801773e:	607b      	str	r3, [r7, #4]
}
 8017740:	bf00      	nop
 8017742:	bf00      	nop
 8017744:	e7fd      	b.n	8017742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017746:	4b0f      	ldr	r3, [pc, #60]	@ (8017784 <vPortValidateInterruptPriority+0x7c>)
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801774e:	4b0e      	ldr	r3, [pc, #56]	@ (8017788 <vPortValidateInterruptPriority+0x80>)
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	429a      	cmp	r2, r3
 8017754:	d90b      	bls.n	801776e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8017756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801775a:	f383 8811 	msr	BASEPRI, r3
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	f3bf 8f4f 	dsb	sy
 8017766:	603b      	str	r3, [r7, #0]
}
 8017768:	bf00      	nop
 801776a:	bf00      	nop
 801776c:	e7fd      	b.n	801776a <vPortValidateInterruptPriority+0x62>
	}
 801776e:	bf00      	nop
 8017770:	3714      	adds	r7, #20
 8017772:	46bd      	mov	sp, r7
 8017774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017778:	4770      	bx	lr
 801777a:	bf00      	nop
 801777c:	e000e3f0 	.word	0xe000e3f0
 8017780:	240017a0 	.word	0x240017a0
 8017784:	e000ed0c 	.word	0xe000ed0c
 8017788:	240017a4 	.word	0x240017a4

0801778c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b08a      	sub	sp, #40	@ 0x28
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017794:	2300      	movs	r3, #0
 8017796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017798:	f7fe fd82 	bl	80162a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801779c:	4b5c      	ldr	r3, [pc, #368]	@ (8017910 <pvPortMalloc+0x184>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d101      	bne.n	80177a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80177a4:	f000 f924 	bl	80179f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80177a8:	4b5a      	ldr	r3, [pc, #360]	@ (8017914 <pvPortMalloc+0x188>)
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	4013      	ands	r3, r2
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f040 8095 	bne.w	80178e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d01e      	beq.n	80177fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80177bc:	2208      	movs	r2, #8
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	4413      	add	r3, r2
 80177c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f003 0307 	and.w	r3, r3, #7
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d015      	beq.n	80177fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f023 0307 	bic.w	r3, r3, #7
 80177d4:	3308      	adds	r3, #8
 80177d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f003 0307 	and.w	r3, r3, #7
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d00b      	beq.n	80177fa <pvPortMalloc+0x6e>
	__asm volatile
 80177e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177e6:	f383 8811 	msr	BASEPRI, r3
 80177ea:	f3bf 8f6f 	isb	sy
 80177ee:	f3bf 8f4f 	dsb	sy
 80177f2:	617b      	str	r3, [r7, #20]
}
 80177f4:	bf00      	nop
 80177f6:	bf00      	nop
 80177f8:	e7fd      	b.n	80177f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d06f      	beq.n	80178e0 <pvPortMalloc+0x154>
 8017800:	4b45      	ldr	r3, [pc, #276]	@ (8017918 <pvPortMalloc+0x18c>)
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	429a      	cmp	r2, r3
 8017808:	d86a      	bhi.n	80178e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801780a:	4b44      	ldr	r3, [pc, #272]	@ (801791c <pvPortMalloc+0x190>)
 801780c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801780e:	4b43      	ldr	r3, [pc, #268]	@ (801791c <pvPortMalloc+0x190>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017814:	e004      	b.n	8017820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8017816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017822:	685b      	ldr	r3, [r3, #4]
 8017824:	687a      	ldr	r2, [r7, #4]
 8017826:	429a      	cmp	r2, r3
 8017828:	d903      	bls.n	8017832 <pvPortMalloc+0xa6>
 801782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d1f1      	bne.n	8017816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017832:	4b37      	ldr	r3, [pc, #220]	@ (8017910 <pvPortMalloc+0x184>)
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017838:	429a      	cmp	r2, r3
 801783a:	d051      	beq.n	80178e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801783c:	6a3b      	ldr	r3, [r7, #32]
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	2208      	movs	r2, #8
 8017842:	4413      	add	r3, r2
 8017844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017848:	681a      	ldr	r2, [r3, #0]
 801784a:	6a3b      	ldr	r3, [r7, #32]
 801784c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017850:	685a      	ldr	r2, [r3, #4]
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	1ad2      	subs	r2, r2, r3
 8017856:	2308      	movs	r3, #8
 8017858:	005b      	lsls	r3, r3, #1
 801785a:	429a      	cmp	r2, r3
 801785c:	d920      	bls.n	80178a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801785e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	4413      	add	r3, r2
 8017864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017866:	69bb      	ldr	r3, [r7, #24]
 8017868:	f003 0307 	and.w	r3, r3, #7
 801786c:	2b00      	cmp	r3, #0
 801786e:	d00b      	beq.n	8017888 <pvPortMalloc+0xfc>
	__asm volatile
 8017870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017874:	f383 8811 	msr	BASEPRI, r3
 8017878:	f3bf 8f6f 	isb	sy
 801787c:	f3bf 8f4f 	dsb	sy
 8017880:	613b      	str	r3, [r7, #16]
}
 8017882:	bf00      	nop
 8017884:	bf00      	nop
 8017886:	e7fd      	b.n	8017884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801788a:	685a      	ldr	r2, [r3, #4]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	1ad2      	subs	r2, r2, r3
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017896:	687a      	ldr	r2, [r7, #4]
 8017898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801789a:	69b8      	ldr	r0, [r7, #24]
 801789c:	f000 f90a 	bl	8017ab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80178a0:	4b1d      	ldr	r3, [pc, #116]	@ (8017918 <pvPortMalloc+0x18c>)
 80178a2:	681a      	ldr	r2, [r3, #0]
 80178a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178a6:	685b      	ldr	r3, [r3, #4]
 80178a8:	1ad3      	subs	r3, r2, r3
 80178aa:	4a1b      	ldr	r2, [pc, #108]	@ (8017918 <pvPortMalloc+0x18c>)
 80178ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80178ae:	4b1a      	ldr	r3, [pc, #104]	@ (8017918 <pvPortMalloc+0x18c>)
 80178b0:	681a      	ldr	r2, [r3, #0]
 80178b2:	4b1b      	ldr	r3, [pc, #108]	@ (8017920 <pvPortMalloc+0x194>)
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	429a      	cmp	r2, r3
 80178b8:	d203      	bcs.n	80178c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80178ba:	4b17      	ldr	r3, [pc, #92]	@ (8017918 <pvPortMalloc+0x18c>)
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	4a18      	ldr	r2, [pc, #96]	@ (8017920 <pvPortMalloc+0x194>)
 80178c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80178c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c4:	685a      	ldr	r2, [r3, #4]
 80178c6:	4b13      	ldr	r3, [pc, #76]	@ (8017914 <pvPortMalloc+0x188>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	431a      	orrs	r2, r3
 80178cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80178d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178d2:	2200      	movs	r2, #0
 80178d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80178d6:	4b13      	ldr	r3, [pc, #76]	@ (8017924 <pvPortMalloc+0x198>)
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	3301      	adds	r3, #1
 80178dc:	4a11      	ldr	r2, [pc, #68]	@ (8017924 <pvPortMalloc+0x198>)
 80178de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80178e0:	f7fe fcec 	bl	80162bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80178e4:	69fb      	ldr	r3, [r7, #28]
 80178e6:	f003 0307 	and.w	r3, r3, #7
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d00b      	beq.n	8017906 <pvPortMalloc+0x17a>
	__asm volatile
 80178ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80178f2:	f383 8811 	msr	BASEPRI, r3
 80178f6:	f3bf 8f6f 	isb	sy
 80178fa:	f3bf 8f4f 	dsb	sy
 80178fe:	60fb      	str	r3, [r7, #12]
}
 8017900:	bf00      	nop
 8017902:	bf00      	nop
 8017904:	e7fd      	b.n	8017902 <pvPortMalloc+0x176>
	return pvReturn;
 8017906:	69fb      	ldr	r3, [r7, #28]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3728      	adds	r7, #40	@ 0x28
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}
 8017910:	240053b0 	.word	0x240053b0
 8017914:	240053c4 	.word	0x240053c4
 8017918:	240053b4 	.word	0x240053b4
 801791c:	240053a8 	.word	0x240053a8
 8017920:	240053b8 	.word	0x240053b8
 8017924:	240053bc 	.word	0x240053bc

08017928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b086      	sub	sp, #24
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d04f      	beq.n	80179da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801793a:	2308      	movs	r3, #8
 801793c:	425b      	negs	r3, r3
 801793e:	697a      	ldr	r2, [r7, #20]
 8017940:	4413      	add	r3, r2
 8017942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017948:	693b      	ldr	r3, [r7, #16]
 801794a:	685a      	ldr	r2, [r3, #4]
 801794c:	4b25      	ldr	r3, [pc, #148]	@ (80179e4 <vPortFree+0xbc>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	4013      	ands	r3, r2
 8017952:	2b00      	cmp	r3, #0
 8017954:	d10b      	bne.n	801796e <vPortFree+0x46>
	__asm volatile
 8017956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801795a:	f383 8811 	msr	BASEPRI, r3
 801795e:	f3bf 8f6f 	isb	sy
 8017962:	f3bf 8f4f 	dsb	sy
 8017966:	60fb      	str	r3, [r7, #12]
}
 8017968:	bf00      	nop
 801796a:	bf00      	nop
 801796c:	e7fd      	b.n	801796a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801796e:	693b      	ldr	r3, [r7, #16]
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d00b      	beq.n	801798e <vPortFree+0x66>
	__asm volatile
 8017976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801797a:	f383 8811 	msr	BASEPRI, r3
 801797e:	f3bf 8f6f 	isb	sy
 8017982:	f3bf 8f4f 	dsb	sy
 8017986:	60bb      	str	r3, [r7, #8]
}
 8017988:	bf00      	nop
 801798a:	bf00      	nop
 801798c:	e7fd      	b.n	801798a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	685a      	ldr	r2, [r3, #4]
 8017992:	4b14      	ldr	r3, [pc, #80]	@ (80179e4 <vPortFree+0xbc>)
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	4013      	ands	r3, r2
 8017998:	2b00      	cmp	r3, #0
 801799a:	d01e      	beq.n	80179da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801799c:	693b      	ldr	r3, [r7, #16]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d11a      	bne.n	80179da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80179a4:	693b      	ldr	r3, [r7, #16]
 80179a6:	685a      	ldr	r2, [r3, #4]
 80179a8:	4b0e      	ldr	r3, [pc, #56]	@ (80179e4 <vPortFree+0xbc>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	43db      	mvns	r3, r3
 80179ae:	401a      	ands	r2, r3
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80179b4:	f7fe fc74 	bl	80162a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80179b8:	693b      	ldr	r3, [r7, #16]
 80179ba:	685a      	ldr	r2, [r3, #4]
 80179bc:	4b0a      	ldr	r3, [pc, #40]	@ (80179e8 <vPortFree+0xc0>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	4413      	add	r3, r2
 80179c2:	4a09      	ldr	r2, [pc, #36]	@ (80179e8 <vPortFree+0xc0>)
 80179c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80179c6:	6938      	ldr	r0, [r7, #16]
 80179c8:	f000 f874 	bl	8017ab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80179cc:	4b07      	ldr	r3, [pc, #28]	@ (80179ec <vPortFree+0xc4>)
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	3301      	adds	r3, #1
 80179d2:	4a06      	ldr	r2, [pc, #24]	@ (80179ec <vPortFree+0xc4>)
 80179d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80179d6:	f7fe fc71 	bl	80162bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80179da:	bf00      	nop
 80179dc:	3718      	adds	r7, #24
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	bf00      	nop
 80179e4:	240053c4 	.word	0x240053c4
 80179e8:	240053b4 	.word	0x240053b4
 80179ec:	240053c0 	.word	0x240053c0

080179f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80179f0:	b480      	push	{r7}
 80179f2:	b085      	sub	sp, #20
 80179f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80179f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80179fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80179fc:	4b27      	ldr	r3, [pc, #156]	@ (8017a9c <prvHeapInit+0xac>)
 80179fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f003 0307 	and.w	r3, r3, #7
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d00c      	beq.n	8017a24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	3307      	adds	r3, #7
 8017a0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	f023 0307 	bic.w	r3, r3, #7
 8017a16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017a18:	68ba      	ldr	r2, [r7, #8]
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	1ad3      	subs	r3, r2, r3
 8017a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8017a9c <prvHeapInit+0xac>)
 8017a20:	4413      	add	r3, r2
 8017a22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017a28:	4a1d      	ldr	r2, [pc, #116]	@ (8017aa0 <prvHeapInit+0xb0>)
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8017aa0 <prvHeapInit+0xb0>)
 8017a30:	2200      	movs	r2, #0
 8017a32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	68ba      	ldr	r2, [r7, #8]
 8017a38:	4413      	add	r3, r2
 8017a3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017a3c:	2208      	movs	r2, #8
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	1a9b      	subs	r3, r3, r2
 8017a42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f023 0307 	bic.w	r3, r3, #7
 8017a4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	4a15      	ldr	r2, [pc, #84]	@ (8017aa4 <prvHeapInit+0xb4>)
 8017a50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017a52:	4b14      	ldr	r3, [pc, #80]	@ (8017aa4 <prvHeapInit+0xb4>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2200      	movs	r2, #0
 8017a58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017a5a:	4b12      	ldr	r3, [pc, #72]	@ (8017aa4 <prvHeapInit+0xb4>)
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	68fa      	ldr	r2, [r7, #12]
 8017a6a:	1ad2      	subs	r2, r2, r3
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017a70:	4b0c      	ldr	r3, [pc, #48]	@ (8017aa4 <prvHeapInit+0xb4>)
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017a78:	683b      	ldr	r3, [r7, #0]
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8017aa8 <prvHeapInit+0xb8>)
 8017a7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	4a09      	ldr	r2, [pc, #36]	@ (8017aac <prvHeapInit+0xbc>)
 8017a86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017a88:	4b09      	ldr	r3, [pc, #36]	@ (8017ab0 <prvHeapInit+0xc0>)
 8017a8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017a8e:	601a      	str	r2, [r3, #0]
}
 8017a90:	bf00      	nop
 8017a92:	3714      	adds	r7, #20
 8017a94:	46bd      	mov	sp, r7
 8017a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9a:	4770      	bx	lr
 8017a9c:	240017a8 	.word	0x240017a8
 8017aa0:	240053a8 	.word	0x240053a8
 8017aa4:	240053b0 	.word	0x240053b0
 8017aa8:	240053b8 	.word	0x240053b8
 8017aac:	240053b4 	.word	0x240053b4
 8017ab0:	240053c4 	.word	0x240053c4

08017ab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	b085      	sub	sp, #20
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017abc:	4b28      	ldr	r3, [pc, #160]	@ (8017b60 <prvInsertBlockIntoFreeList+0xac>)
 8017abe:	60fb      	str	r3, [r7, #12]
 8017ac0:	e002      	b.n	8017ac8 <prvInsertBlockIntoFreeList+0x14>
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	60fb      	str	r3, [r7, #12]
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	429a      	cmp	r2, r3
 8017ad0:	d8f7      	bhi.n	8017ac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	685b      	ldr	r3, [r3, #4]
 8017ada:	68ba      	ldr	r2, [r7, #8]
 8017adc:	4413      	add	r3, r2
 8017ade:	687a      	ldr	r2, [r7, #4]
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d108      	bne.n	8017af6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017ae4:	68fb      	ldr	r3, [r7, #12]
 8017ae6:	685a      	ldr	r2, [r3, #4]
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	685b      	ldr	r3, [r3, #4]
 8017aec:	441a      	add	r2, r3
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	68ba      	ldr	r2, [r7, #8]
 8017b00:	441a      	add	r2, r3
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	429a      	cmp	r2, r3
 8017b08:	d118      	bne.n	8017b3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	681a      	ldr	r2, [r3, #0]
 8017b0e:	4b15      	ldr	r3, [pc, #84]	@ (8017b64 <prvInsertBlockIntoFreeList+0xb0>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	429a      	cmp	r2, r3
 8017b14:	d00d      	beq.n	8017b32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	685a      	ldr	r2, [r3, #4]
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	685b      	ldr	r3, [r3, #4]
 8017b20:	441a      	add	r2, r3
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	681a      	ldr	r2, [r3, #0]
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	601a      	str	r2, [r3, #0]
 8017b30:	e008      	b.n	8017b44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017b32:	4b0c      	ldr	r3, [pc, #48]	@ (8017b64 <prvInsertBlockIntoFreeList+0xb0>)
 8017b34:	681a      	ldr	r2, [r3, #0]
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	601a      	str	r2, [r3, #0]
 8017b3a:	e003      	b.n	8017b44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	681a      	ldr	r2, [r3, #0]
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017b44:	68fa      	ldr	r2, [r7, #12]
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	429a      	cmp	r2, r3
 8017b4a:	d002      	beq.n	8017b52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	687a      	ldr	r2, [r7, #4]
 8017b50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017b52:	bf00      	nop
 8017b54:	3714      	adds	r7, #20
 8017b56:	46bd      	mov	sp, r7
 8017b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5c:	4770      	bx	lr
 8017b5e:	bf00      	nop
 8017b60:	240053a8 	.word	0x240053a8
 8017b64:	240053b0 	.word	0x240053b0

08017b68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	4913      	ldr	r1, [pc, #76]	@ (8017bbc <MX_USB_DEVICE_Init+0x54>)
 8017b70:	4813      	ldr	r0, [pc, #76]	@ (8017bc0 <MX_USB_DEVICE_Init+0x58>)
 8017b72:	f7f9 faff 	bl	8011174 <USBD_Init>
 8017b76:	4603      	mov	r3, r0
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d001      	beq.n	8017b80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017b7c:	f7e9 fd0e 	bl	800159c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8017b80:	4910      	ldr	r1, [pc, #64]	@ (8017bc4 <MX_USB_DEVICE_Init+0x5c>)
 8017b82:	480f      	ldr	r0, [pc, #60]	@ (8017bc0 <MX_USB_DEVICE_Init+0x58>)
 8017b84:	f7f9 fb26 	bl	80111d4 <USBD_RegisterClass>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d001      	beq.n	8017b92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017b8e:	f7e9 fd05 	bl	800159c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8017b92:	490d      	ldr	r1, [pc, #52]	@ (8017bc8 <MX_USB_DEVICE_Init+0x60>)
 8017b94:	480a      	ldr	r0, [pc, #40]	@ (8017bc0 <MX_USB_DEVICE_Init+0x58>)
 8017b96:	f7f8 febd 	bl	8010914 <USBD_DFU_RegisterMedia>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d001      	beq.n	8017ba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017ba0:	f7e9 fcfc 	bl	800159c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ba4:	4806      	ldr	r0, [pc, #24]	@ (8017bc0 <MX_USB_DEVICE_Init+0x58>)
 8017ba6:	f7f9 fb4b 	bl	8011240 <USBD_Start>
 8017baa:	4603      	mov	r3, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d001      	beq.n	8017bb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017bb0:	f7e9 fcf4 	bl	800159c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017bb4:	f7f0 fa68 	bl	8008088 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017bb8:	bf00      	nop
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	24000098 	.word	0x24000098
 8017bc0:	240053c8 	.word	0x240053c8
 8017bc4:	24000010 	.word	0x24000010
 8017bc8:	240000ec 	.word	0x240000ec

08017bcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bcc:	b480      	push	{r7}
 8017bce:	b083      	sub	sp, #12
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	6039      	str	r1, [r7, #0]
 8017bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017bd8:	683b      	ldr	r3, [r7, #0]
 8017bda:	2212      	movs	r2, #18
 8017bdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017bde:	4b03      	ldr	r3, [pc, #12]	@ (8017bec <USBD_FS_DeviceDescriptor+0x20>)
}
 8017be0:	4618      	mov	r0, r3
 8017be2:	370c      	adds	r7, #12
 8017be4:	46bd      	mov	sp, r7
 8017be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bea:	4770      	bx	lr
 8017bec:	240000b8 	.word	0x240000b8

08017bf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017bf0:	b480      	push	{r7}
 8017bf2:	b083      	sub	sp, #12
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	6039      	str	r1, [r7, #0]
 8017bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	2204      	movs	r2, #4
 8017c00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017c02:	4b03      	ldr	r3, [pc, #12]	@ (8017c10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017c04:	4618      	mov	r0, r3
 8017c06:	370c      	adds	r7, #12
 8017c08:	46bd      	mov	sp, r7
 8017c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c0e:	4770      	bx	lr
 8017c10:	240000cc 	.word	0x240000cc

08017c14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b082      	sub	sp, #8
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	6039      	str	r1, [r7, #0]
 8017c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017c20:	79fb      	ldrb	r3, [r7, #7]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d105      	bne.n	8017c32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017c26:	683a      	ldr	r2, [r7, #0]
 8017c28:	4907      	ldr	r1, [pc, #28]	@ (8017c48 <USBD_FS_ProductStrDescriptor+0x34>)
 8017c2a:	4808      	ldr	r0, [pc, #32]	@ (8017c4c <USBD_FS_ProductStrDescriptor+0x38>)
 8017c2c:	f7fa fcec 	bl	8012608 <USBD_GetString>
 8017c30:	e004      	b.n	8017c3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017c32:	683a      	ldr	r2, [r7, #0]
 8017c34:	4904      	ldr	r1, [pc, #16]	@ (8017c48 <USBD_FS_ProductStrDescriptor+0x34>)
 8017c36:	4805      	ldr	r0, [pc, #20]	@ (8017c4c <USBD_FS_ProductStrDescriptor+0x38>)
 8017c38:	f7fa fce6 	bl	8012608 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c3c:	4b02      	ldr	r3, [pc, #8]	@ (8017c48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3708      	adds	r7, #8
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}
 8017c46:	bf00      	nop
 8017c48:	240056a4 	.word	0x240056a4
 8017c4c:	08018dec 	.word	0x08018dec

08017c50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	6039      	str	r1, [r7, #0]
 8017c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017c5c:	683a      	ldr	r2, [r7, #0]
 8017c5e:	4904      	ldr	r1, [pc, #16]	@ (8017c70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017c60:	4804      	ldr	r0, [pc, #16]	@ (8017c74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017c62:	f7fa fcd1 	bl	8012608 <USBD_GetString>
  return USBD_StrDesc;
 8017c66:	4b02      	ldr	r3, [pc, #8]	@ (8017c70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3708      	adds	r7, #8
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	240056a4 	.word	0x240056a4
 8017c74:	08018e0c 	.word	0x08018e0c

08017c78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	4603      	mov	r3, r0
 8017c80:	6039      	str	r1, [r7, #0]
 8017c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	221a      	movs	r2, #26
 8017c88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017c8a:	f000 f843 	bl	8017d14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017c8e:	4b02      	ldr	r3, [pc, #8]	@ (8017c98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017c90:	4618      	mov	r0, r3
 8017c92:	3708      	adds	r7, #8
 8017c94:	46bd      	mov	sp, r7
 8017c96:	bd80      	pop	{r7, pc}
 8017c98:	240000d0 	.word	0x240000d0

08017c9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b082      	sub	sp, #8
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	6039      	str	r1, [r7, #0]
 8017ca6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017ca8:	79fb      	ldrb	r3, [r7, #7]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d105      	bne.n	8017cba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017cae:	683a      	ldr	r2, [r7, #0]
 8017cb0:	4907      	ldr	r1, [pc, #28]	@ (8017cd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017cb2:	4808      	ldr	r0, [pc, #32]	@ (8017cd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017cb4:	f7fa fca8 	bl	8012608 <USBD_GetString>
 8017cb8:	e004      	b.n	8017cc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017cba:	683a      	ldr	r2, [r7, #0]
 8017cbc:	4904      	ldr	r1, [pc, #16]	@ (8017cd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017cbe:	4805      	ldr	r0, [pc, #20]	@ (8017cd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017cc0:	f7fa fca2 	bl	8012608 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017cc4:	4b02      	ldr	r3, [pc, #8]	@ (8017cd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	3708      	adds	r7, #8
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	240056a4 	.word	0x240056a4
 8017cd4:	08018e20 	.word	0x08018e20

08017cd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cd8:	b580      	push	{r7, lr}
 8017cda:	b082      	sub	sp, #8
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	4603      	mov	r3, r0
 8017ce0:	6039      	str	r1, [r7, #0]
 8017ce2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d105      	bne.n	8017cf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cea:	683a      	ldr	r2, [r7, #0]
 8017cec:	4907      	ldr	r1, [pc, #28]	@ (8017d0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cee:	4808      	ldr	r0, [pc, #32]	@ (8017d10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cf0:	f7fa fc8a 	bl	8012608 <USBD_GetString>
 8017cf4:	e004      	b.n	8017d00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017cf6:	683a      	ldr	r2, [r7, #0]
 8017cf8:	4904      	ldr	r1, [pc, #16]	@ (8017d0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017cfa:	4805      	ldr	r0, [pc, #20]	@ (8017d10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017cfc:	f7fa fc84 	bl	8012608 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d00:	4b02      	ldr	r3, [pc, #8]	@ (8017d0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3708      	adds	r7, #8
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	240056a4 	.word	0x240056a4
 8017d10:	08018e2c 	.word	0x08018e2c

08017d14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8017d58 <Get_SerialNum+0x44>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017d20:	4b0e      	ldr	r3, [pc, #56]	@ (8017d5c <Get_SerialNum+0x48>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017d26:	4b0e      	ldr	r3, [pc, #56]	@ (8017d60 <Get_SerialNum+0x4c>)
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017d2c:	68fa      	ldr	r2, [r7, #12]
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	4413      	add	r3, r2
 8017d32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d009      	beq.n	8017d4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017d3a:	2208      	movs	r2, #8
 8017d3c:	4909      	ldr	r1, [pc, #36]	@ (8017d64 <Get_SerialNum+0x50>)
 8017d3e:	68f8      	ldr	r0, [r7, #12]
 8017d40:	f000 f814 	bl	8017d6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017d44:	2204      	movs	r2, #4
 8017d46:	4908      	ldr	r1, [pc, #32]	@ (8017d68 <Get_SerialNum+0x54>)
 8017d48:	68b8      	ldr	r0, [r7, #8]
 8017d4a:	f000 f80f 	bl	8017d6c <IntToUnicode>
  }
}
 8017d4e:	bf00      	nop
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop
 8017d58:	1ff1e800 	.word	0x1ff1e800
 8017d5c:	1ff1e804 	.word	0x1ff1e804
 8017d60:	1ff1e808 	.word	0x1ff1e808
 8017d64:	240000d2 	.word	0x240000d2
 8017d68:	240000e2 	.word	0x240000e2

08017d6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017d6c:	b480      	push	{r7}
 8017d6e:	b087      	sub	sp, #28
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	60b9      	str	r1, [r7, #8]
 8017d76:	4613      	mov	r3, r2
 8017d78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017d7e:	2300      	movs	r3, #0
 8017d80:	75fb      	strb	r3, [r7, #23]
 8017d82:	e027      	b.n	8017dd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	0f1b      	lsrs	r3, r3, #28
 8017d88:	2b09      	cmp	r3, #9
 8017d8a:	d80b      	bhi.n	8017da4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	0f1b      	lsrs	r3, r3, #28
 8017d90:	b2da      	uxtb	r2, r3
 8017d92:	7dfb      	ldrb	r3, [r7, #23]
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	4619      	mov	r1, r3
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	440b      	add	r3, r1
 8017d9c:	3230      	adds	r2, #48	@ 0x30
 8017d9e:	b2d2      	uxtb	r2, r2
 8017da0:	701a      	strb	r2, [r3, #0]
 8017da2:	e00a      	b.n	8017dba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	0f1b      	lsrs	r3, r3, #28
 8017da8:	b2da      	uxtb	r2, r3
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
 8017dac:	005b      	lsls	r3, r3, #1
 8017dae:	4619      	mov	r1, r3
 8017db0:	68bb      	ldr	r3, [r7, #8]
 8017db2:	440b      	add	r3, r1
 8017db4:	3237      	adds	r2, #55	@ 0x37
 8017db6:	b2d2      	uxtb	r2, r2
 8017db8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	011b      	lsls	r3, r3, #4
 8017dbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017dc0:	7dfb      	ldrb	r3, [r7, #23]
 8017dc2:	005b      	lsls	r3, r3, #1
 8017dc4:	3301      	adds	r3, #1
 8017dc6:	68ba      	ldr	r2, [r7, #8]
 8017dc8:	4413      	add	r3, r2
 8017dca:	2200      	movs	r2, #0
 8017dcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017dce:	7dfb      	ldrb	r3, [r7, #23]
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	75fb      	strb	r3, [r7, #23]
 8017dd4:	7dfa      	ldrb	r2, [r7, #23]
 8017dd6:	79fb      	ldrb	r3, [r7, #7]
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d3d3      	bcc.n	8017d84 <IntToUnicode+0x18>
  }
}
 8017ddc:	bf00      	nop
 8017dde:	bf00      	nop
 8017de0:	371c      	adds	r7, #28
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr

08017dea <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8017dea:	b480      	push	{r7}
 8017dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8017dee:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8017df0:	4618      	mov	r0, r3
 8017df2:	46bd      	mov	sp, r7
 8017df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df8:	4770      	bx	lr

08017dfa <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8017dfa:	b480      	push	{r7}
 8017dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8017dfe:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8017e00:	4618      	mov	r0, r3
 8017e02:	46bd      	mov	sp, r7
 8017e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e08:	4770      	bx	lr

08017e0a <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8017e0a:	b480      	push	{r7}
 8017e0c:	b083      	sub	sp, #12
 8017e0e:	af00      	add	r7, sp, #0
 8017e10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */
  UNUSED(Add);

  return (USBD_OK);
 8017e12:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017e14:	4618      	mov	r0, r3
 8017e16:	370c      	adds	r7, #12
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1e:	4770      	bx	lr

08017e20 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017e20:	b480      	push	{r7}
 8017e22:	b085      	sub	sp, #20
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	60b9      	str	r1, [r7, #8]
 8017e2a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (USBD_OK);
 8017e2c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3714      	adds	r7, #20
 8017e32:	46bd      	mov	sp, r7
 8017e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e38:	4770      	bx	lr

08017e3a <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017e3a:	b480      	push	{r7}
 8017e3c:	b085      	sub	sp, #20
 8017e3e:	af00      	add	r7, sp, #0
 8017e40:	60f8      	str	r0, [r7, #12]
 8017e42:	60b9      	str	r1, [r7, #8]
 8017e44:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 4 */
  UNUSED(src);
  UNUSED(dest);
  UNUSED(Len);

  return (uint8_t*)(USBD_OK);
 8017e46:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	3714      	adds	r7, #20
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e52:	4770      	bx	lr

08017e54 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8017e54:	b480      	push	{r7}
 8017e56:	b085      	sub	sp, #20
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	60f8      	str	r0, [r7, #12]
 8017e5c:	460b      	mov	r3, r1
 8017e5e:	607a      	str	r2, [r7, #4]
 8017e60:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  UNUSED(Add);
  UNUSED(buffer);

  switch (Cmd)
 8017e62:	7afb      	ldrb	r3, [r7, #11]
 8017e64:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8017e66:	bf00      	nop
  }
  return (USBD_OK);
 8017e68:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3714      	adds	r7, #20
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e74:	4770      	bx	lr
	...

08017e78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017e84:	2200      	movs	r2, #0
 8017e86:	601a      	str	r2, [r3, #0]
 8017e88:	605a      	str	r2, [r3, #4]
 8017e8a:	609a      	str	r2, [r3, #8]
 8017e8c:	60da      	str	r2, [r3, #12]
 8017e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017e90:	f107 0310 	add.w	r3, r7, #16
 8017e94:	22c0      	movs	r2, #192	@ 0xc0
 8017e96:	2100      	movs	r1, #0
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f000 fee5 	bl	8018c68 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	4a34      	ldr	r2, [pc, #208]	@ (8017f74 <HAL_PCD_MspInit+0xfc>)
 8017ea4:	4293      	cmp	r3, r2
 8017ea6:	d161      	bne.n	8017f6c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017ea8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8017eac:	f04f 0300 	mov.w	r3, #0
 8017eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8017eb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8017eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017ebc:	f107 0310 	add.w	r3, r7, #16
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7f1 f8d7 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d001      	beq.n	8017ed0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8017ecc:	f7e9 fb66 	bl	800159c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8017ed0:	f7f0 f8da 	bl	8008088 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017ed4:	4b28      	ldr	r3, [pc, #160]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017eda:	4a27      	ldr	r2, [pc, #156]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017edc:	f043 0301 	orr.w	r3, r3, #1
 8017ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8017ee4:	4b24      	ldr	r3, [pc, #144]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8017eea:	f003 0301 	and.w	r3, r3, #1
 8017eee:	60fb      	str	r3, [r7, #12]
 8017ef0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8017ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017efa:	2300      	movs	r3, #0
 8017efc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f00:	2300      	movs	r3, #0
 8017f02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	481b      	ldr	r0, [pc, #108]	@ (8017f7c <HAL_PCD_MspInit+0x104>)
 8017f0e:	f7ec f9e1 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017f12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8017f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f1a:	2302      	movs	r3, #2
 8017f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f20:	2300      	movs	r3, #0
 8017f22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017f26:	2300      	movs	r3, #0
 8017f28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8017f2c:	230a      	movs	r3, #10
 8017f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017f36:	4619      	mov	r1, r3
 8017f38:	4810      	ldr	r0, [pc, #64]	@ (8017f7c <HAL_PCD_MspInit+0x104>)
 8017f3a:	f7ec f9cb 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017f44:	4a0c      	ldr	r2, [pc, #48]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8017f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8017f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8017f78 <HAL_PCD_MspInit+0x100>)
 8017f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8017f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8017f58:	60bb      	str	r3, [r7, #8]
 8017f5a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	2105      	movs	r1, #5
 8017f60:	2065      	movs	r0, #101	@ 0x65
 8017f62:	f7eb fcd6 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f66:	2065      	movs	r0, #101	@ 0x65
 8017f68:	f7eb fced 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f6c:	bf00      	nop
 8017f6e:	37e8      	adds	r7, #232	@ 0xe8
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}
 8017f74:	40080000 	.word	0x40080000
 8017f78:	58024400 	.word	0x58024400
 8017f7c:	58020000 	.word	0x58020000

08017f80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b082      	sub	sp, #8
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017f94:	4619      	mov	r1, r3
 8017f96:	4610      	mov	r0, r2
 8017f98:	f7f9 f9ba 	bl	8011310 <USBD_LL_SetupStage>
}
 8017f9c:	bf00      	nop
 8017f9e:	3708      	adds	r7, #8
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	460b      	mov	r3, r1
 8017fae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017fb6:	78fa      	ldrb	r2, [r7, #3]
 8017fb8:	6879      	ldr	r1, [r7, #4]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	00db      	lsls	r3, r3, #3
 8017fbe:	4413      	add	r3, r2
 8017fc0:	009b      	lsls	r3, r3, #2
 8017fc2:	440b      	add	r3, r1
 8017fc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017fc8:	681a      	ldr	r2, [r3, #0]
 8017fca:	78fb      	ldrb	r3, [r7, #3]
 8017fcc:	4619      	mov	r1, r3
 8017fce:	f7f9 f9f4 	bl	80113ba <USBD_LL_DataOutStage>
}
 8017fd2:	bf00      	nop
 8017fd4:	3708      	adds	r7, #8
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}

08017fda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b082      	sub	sp, #8
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	6078      	str	r0, [r7, #4]
 8017fe2:	460b      	mov	r3, r1
 8017fe4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017fec:	78fa      	ldrb	r2, [r7, #3]
 8017fee:	6879      	ldr	r1, [r7, #4]
 8017ff0:	4613      	mov	r3, r2
 8017ff2:	00db      	lsls	r3, r3, #3
 8017ff4:	4413      	add	r3, r2
 8017ff6:	009b      	lsls	r3, r3, #2
 8017ff8:	440b      	add	r3, r1
 8017ffa:	3320      	adds	r3, #32
 8017ffc:	681a      	ldr	r2, [r3, #0]
 8017ffe:	78fb      	ldrb	r3, [r7, #3]
 8018000:	4619      	mov	r1, r3
 8018002:	f7f9 fa8d 	bl	8011520 <USBD_LL_DataInStage>
}
 8018006:	bf00      	nop
 8018008:	3708      	adds	r7, #8
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}

0801800e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801800e:	b580      	push	{r7, lr}
 8018010:	b082      	sub	sp, #8
 8018012:	af00      	add	r7, sp, #0
 8018014:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801801c:	4618      	mov	r0, r3
 801801e:	f7f9 fbc7 	bl	80117b0 <USBD_LL_SOF>
}
 8018022:	bf00      	nop
 8018024:	3708      	adds	r7, #8
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}

0801802a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801802a:	b580      	push	{r7, lr}
 801802c:	b084      	sub	sp, #16
 801802e:	af00      	add	r7, sp, #0
 8018030:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018032:	2301      	movs	r3, #1
 8018034:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	79db      	ldrb	r3, [r3, #7]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d102      	bne.n	8018044 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801803e:	2300      	movs	r3, #0
 8018040:	73fb      	strb	r3, [r7, #15]
 8018042:	e008      	b.n	8018056 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	79db      	ldrb	r3, [r3, #7]
 8018048:	2b02      	cmp	r3, #2
 801804a:	d102      	bne.n	8018052 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801804c:	2301      	movs	r3, #1
 801804e:	73fb      	strb	r3, [r7, #15]
 8018050:	e001      	b.n	8018056 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018052:	f7e9 faa3 	bl	800159c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801805c:	7bfa      	ldrb	r2, [r7, #15]
 801805e:	4611      	mov	r1, r2
 8018060:	4618      	mov	r0, r3
 8018062:	f7f9 fb61 	bl	8011728 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801806c:	4618      	mov	r0, r3
 801806e:	f7f9 fb09 	bl	8011684 <USBD_LL_Reset>
}
 8018072:	bf00      	nop
 8018074:	3710      	adds	r7, #16
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
	...

0801807c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801808a:	4618      	mov	r0, r3
 801808c:	f7f9 fb5c 	bl	8011748 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	687a      	ldr	r2, [r7, #4]
 801809c:	6812      	ldr	r2, [r2, #0]
 801809e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80180a2:	f043 0301 	orr.w	r3, r3, #1
 80180a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	7adb      	ldrb	r3, [r3, #11]
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d005      	beq.n	80180bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180b0:	4b04      	ldr	r3, [pc, #16]	@ (80180c4 <HAL_PCD_SuspendCallback+0x48>)
 80180b2:	691b      	ldr	r3, [r3, #16]
 80180b4:	4a03      	ldr	r2, [pc, #12]	@ (80180c4 <HAL_PCD_SuspendCallback+0x48>)
 80180b6:	f043 0306 	orr.w	r3, r3, #6
 80180ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180bc:	bf00      	nop
 80180be:	3708      	adds	r7, #8
 80180c0:	46bd      	mov	sp, r7
 80180c2:	bd80      	pop	{r7, pc}
 80180c4:	e000ed00 	.word	0xe000ed00

080180c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180d6:	4618      	mov	r0, r3
 80180d8:	f7f9 fb52 	bl	8011780 <USBD_LL_Resume>
}
 80180dc:	bf00      	nop
 80180de:	3708      	adds	r7, #8
 80180e0:	46bd      	mov	sp, r7
 80180e2:	bd80      	pop	{r7, pc}

080180e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
 80180ec:	460b      	mov	r3, r1
 80180ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80180f6:	78fa      	ldrb	r2, [r7, #3]
 80180f8:	4611      	mov	r1, r2
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7f9 fbaa 	bl	8011854 <USBD_LL_IsoOUTIncomplete>
}
 8018100:	bf00      	nop
 8018102:	3708      	adds	r7, #8
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}

08018108 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b082      	sub	sp, #8
 801810c:	af00      	add	r7, sp, #0
 801810e:	6078      	str	r0, [r7, #4]
 8018110:	460b      	mov	r3, r1
 8018112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801811a:	78fa      	ldrb	r2, [r7, #3]
 801811c:	4611      	mov	r1, r2
 801811e:	4618      	mov	r0, r3
 8018120:	f7f9 fb66 	bl	80117f0 <USBD_LL_IsoINIncomplete>
}
 8018124:	bf00      	nop
 8018126:	3708      	adds	r7, #8
 8018128:	46bd      	mov	sp, r7
 801812a:	bd80      	pop	{r7, pc}

0801812c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801813a:	4618      	mov	r0, r3
 801813c:	f7f9 fbbc 	bl	80118b8 <USBD_LL_DevConnected>
}
 8018140:	bf00      	nop
 8018142:	3708      	adds	r7, #8
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}

08018148 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018156:	4618      	mov	r0, r3
 8018158:	f7f9 fbb9 	bl	80118ce <USBD_LL_DevDisconnected>
}
 801815c:	bf00      	nop
 801815e:	3708      	adds	r7, #8
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}

08018164 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018164:	b580      	push	{r7, lr}
 8018166:	b082      	sub	sp, #8
 8018168:	af00      	add	r7, sp, #0
 801816a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	781b      	ldrb	r3, [r3, #0]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d13e      	bne.n	80181f2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018174:	4a21      	ldr	r2, [pc, #132]	@ (80181fc <USBD_LL_Init+0x98>)
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	4a1f      	ldr	r2, [pc, #124]	@ (80181fc <USBD_LL_Init+0x98>)
 8018180:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018184:	4b1d      	ldr	r3, [pc, #116]	@ (80181fc <USBD_LL_Init+0x98>)
 8018186:	4a1e      	ldr	r2, [pc, #120]	@ (8018200 <USBD_LL_Init+0x9c>)
 8018188:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801818a:	4b1c      	ldr	r3, [pc, #112]	@ (80181fc <USBD_LL_Init+0x98>)
 801818c:	2209      	movs	r2, #9
 801818e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018190:	4b1a      	ldr	r3, [pc, #104]	@ (80181fc <USBD_LL_Init+0x98>)
 8018192:	2202      	movs	r2, #2
 8018194:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018196:	4b19      	ldr	r3, [pc, #100]	@ (80181fc <USBD_LL_Init+0x98>)
 8018198:	2200      	movs	r2, #0
 801819a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801819c:	4b17      	ldr	r3, [pc, #92]	@ (80181fc <USBD_LL_Init+0x98>)
 801819e:	2202      	movs	r2, #2
 80181a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181a2:	4b16      	ldr	r3, [pc, #88]	@ (80181fc <USBD_LL_Init+0x98>)
 80181a4:	2200      	movs	r2, #0
 80181a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80181a8:	4b14      	ldr	r3, [pc, #80]	@ (80181fc <USBD_LL_Init+0x98>)
 80181aa:	2200      	movs	r2, #0
 80181ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80181ae:	4b13      	ldr	r3, [pc, #76]	@ (80181fc <USBD_LL_Init+0x98>)
 80181b0:	2200      	movs	r2, #0
 80181b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80181b4:	4b11      	ldr	r3, [pc, #68]	@ (80181fc <USBD_LL_Init+0x98>)
 80181b6:	2201      	movs	r2, #1
 80181b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80181ba:	4b10      	ldr	r3, [pc, #64]	@ (80181fc <USBD_LL_Init+0x98>)
 80181bc:	2201      	movs	r2, #1
 80181be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181c0:	4b0e      	ldr	r3, [pc, #56]	@ (80181fc <USBD_LL_Init+0x98>)
 80181c2:	2200      	movs	r2, #0
 80181c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80181c6:	480d      	ldr	r0, [pc, #52]	@ (80181fc <USBD_LL_Init+0x98>)
 80181c8:	f7ee fcab 	bl	8006b22 <HAL_PCD_Init>
 80181cc:	4603      	mov	r3, r0
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d001      	beq.n	80181d6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80181d2:	f7e9 f9e3 	bl	800159c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80181d6:	2180      	movs	r1, #128	@ 0x80
 80181d8:	4808      	ldr	r0, [pc, #32]	@ (80181fc <USBD_LL_Init+0x98>)
 80181da:	f7ef feda 	bl	8007f92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80181de:	2240      	movs	r2, #64	@ 0x40
 80181e0:	2100      	movs	r1, #0
 80181e2:	4806      	ldr	r0, [pc, #24]	@ (80181fc <USBD_LL_Init+0x98>)
 80181e4:	f7ef fe8e 	bl	8007f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80181e8:	2280      	movs	r2, #128	@ 0x80
 80181ea:	2101      	movs	r1, #1
 80181ec:	4803      	ldr	r0, [pc, #12]	@ (80181fc <USBD_LL_Init+0x98>)
 80181ee:	f7ef fe89 	bl	8007f04 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80181f2:	2300      	movs	r3, #0
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	3708      	adds	r7, #8
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	240058a4 	.word	0x240058a4
 8018200:	40080000 	.word	0x40080000

08018204 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b084      	sub	sp, #16
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801820c:	2300      	movs	r3, #0
 801820e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018210:	2300      	movs	r3, #0
 8018212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801821a:	4618      	mov	r0, r3
 801821c:	f7ee fd8d 	bl	8006d3a <HAL_PCD_Start>
 8018220:	4603      	mov	r3, r0
 8018222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018224:	7bfb      	ldrb	r3, [r7, #15]
 8018226:	4618      	mov	r0, r3
 8018228:	f000 f92c 	bl	8018484 <USBD_Get_USB_Status>
 801822c:	4603      	mov	r3, r0
 801822e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018230:	7bbb      	ldrb	r3, [r7, #14]
}
 8018232:	4618      	mov	r0, r3
 8018234:	3710      	adds	r7, #16
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}

0801823a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801823a:	b580      	push	{r7, lr}
 801823c:	b084      	sub	sp, #16
 801823e:	af00      	add	r7, sp, #0
 8018240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018242:	2300      	movs	r3, #0
 8018244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018246:	2300      	movs	r3, #0
 8018248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018250:	4618      	mov	r0, r3
 8018252:	f7ee fda7 	bl	8006da4 <HAL_PCD_Stop>
 8018256:	4603      	mov	r3, r0
 8018258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801825a:	7bfb      	ldrb	r3, [r7, #15]
 801825c:	4618      	mov	r0, r3
 801825e:	f000 f911 	bl	8018484 <USBD_Get_USB_Status>
 8018262:	4603      	mov	r3, r0
 8018264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018266:	7bbb      	ldrb	r3, [r7, #14]
}
 8018268:	4618      	mov	r0, r3
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b084      	sub	sp, #16
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	4608      	mov	r0, r1
 801827a:	4611      	mov	r1, r2
 801827c:	461a      	mov	r2, r3
 801827e:	4603      	mov	r3, r0
 8018280:	70fb      	strb	r3, [r7, #3]
 8018282:	460b      	mov	r3, r1
 8018284:	70bb      	strb	r3, [r7, #2]
 8018286:	4613      	mov	r3, r2
 8018288:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801828a:	2300      	movs	r3, #0
 801828c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801828e:	2300      	movs	r3, #0
 8018290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018298:	78bb      	ldrb	r3, [r7, #2]
 801829a:	883a      	ldrh	r2, [r7, #0]
 801829c:	78f9      	ldrb	r1, [r7, #3]
 801829e:	f7ef faae 	bl	80077fe <HAL_PCD_EP_Open>
 80182a2:	4603      	mov	r3, r0
 80182a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182a6:	7bfb      	ldrb	r3, [r7, #15]
 80182a8:	4618      	mov	r0, r3
 80182aa:	f000 f8eb 	bl	8018484 <USBD_Get_USB_Status>
 80182ae:	4603      	mov	r3, r0
 80182b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80182b4:	4618      	mov	r0, r3
 80182b6:	3710      	adds	r7, #16
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b084      	sub	sp, #16
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	460b      	mov	r3, r1
 80182c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182c8:	2300      	movs	r3, #0
 80182ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182cc:	2300      	movs	r3, #0
 80182ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80182d6:	78fa      	ldrb	r2, [r7, #3]
 80182d8:	4611      	mov	r1, r2
 80182da:	4618      	mov	r0, r3
 80182dc:	f7ef fb6e 	bl	80079bc <HAL_PCD_EP_SetStall>
 80182e0:	4603      	mov	r3, r0
 80182e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80182e4:	7bfb      	ldrb	r3, [r7, #15]
 80182e6:	4618      	mov	r0, r3
 80182e8:	f000 f8cc 	bl	8018484 <USBD_Get_USB_Status>
 80182ec:	4603      	mov	r3, r0
 80182ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80182f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3710      	adds	r7, #16
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}

080182fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b084      	sub	sp, #16
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
 8018302:	460b      	mov	r3, r1
 8018304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018306:	2300      	movs	r3, #0
 8018308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801830a:	2300      	movs	r3, #0
 801830c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018314:	78fa      	ldrb	r2, [r7, #3]
 8018316:	4611      	mov	r1, r2
 8018318:	4618      	mov	r0, r3
 801831a:	f7ef fbb2 	bl	8007a82 <HAL_PCD_EP_ClrStall>
 801831e:	4603      	mov	r3, r0
 8018320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018322:	7bfb      	ldrb	r3, [r7, #15]
 8018324:	4618      	mov	r0, r3
 8018326:	f000 f8ad 	bl	8018484 <USBD_Get_USB_Status>
 801832a:	4603      	mov	r3, r0
 801832c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801832e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018330:	4618      	mov	r0, r3
 8018332:	3710      	adds	r7, #16
 8018334:	46bd      	mov	sp, r7
 8018336:	bd80      	pop	{r7, pc}

08018338 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018338:	b480      	push	{r7}
 801833a:	b085      	sub	sp, #20
 801833c:	af00      	add	r7, sp, #0
 801833e:	6078      	str	r0, [r7, #4]
 8018340:	460b      	mov	r3, r1
 8018342:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801834a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801834c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018350:	2b00      	cmp	r3, #0
 8018352:	da0b      	bge.n	801836c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018354:	78fb      	ldrb	r3, [r7, #3]
 8018356:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801835a:	68f9      	ldr	r1, [r7, #12]
 801835c:	4613      	mov	r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	4413      	add	r3, r2
 8018362:	009b      	lsls	r3, r3, #2
 8018364:	440b      	add	r3, r1
 8018366:	3316      	adds	r3, #22
 8018368:	781b      	ldrb	r3, [r3, #0]
 801836a:	e00b      	b.n	8018384 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801836c:	78fb      	ldrb	r3, [r7, #3]
 801836e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018372:	68f9      	ldr	r1, [r7, #12]
 8018374:	4613      	mov	r3, r2
 8018376:	00db      	lsls	r3, r3, #3
 8018378:	4413      	add	r3, r2
 801837a:	009b      	lsls	r3, r3, #2
 801837c:	440b      	add	r3, r1
 801837e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8018382:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018384:	4618      	mov	r0, r3
 8018386:	3714      	adds	r7, #20
 8018388:	46bd      	mov	sp, r7
 801838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838e:	4770      	bx	lr

08018390 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	460b      	mov	r3, r1
 801839a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801839c:	2300      	movs	r3, #0
 801839e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183a0:	2300      	movs	r3, #0
 80183a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183aa:	78fa      	ldrb	r2, [r7, #3]
 80183ac:	4611      	mov	r1, r2
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7ef fa01 	bl	80077b6 <HAL_PCD_SetAddress>
 80183b4:	4603      	mov	r3, r0
 80183b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183b8:	7bfb      	ldrb	r3, [r7, #15]
 80183ba:	4618      	mov	r0, r3
 80183bc:	f000 f862 	bl	8018484 <USBD_Get_USB_Status>
 80183c0:	4603      	mov	r3, r0
 80183c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}

080183ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80183ce:	b580      	push	{r7, lr}
 80183d0:	b086      	sub	sp, #24
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	60f8      	str	r0, [r7, #12]
 80183d6:	607a      	str	r2, [r7, #4]
 80183d8:	603b      	str	r3, [r7, #0]
 80183da:	460b      	mov	r3, r1
 80183dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183de:	2300      	movs	r3, #0
 80183e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183e2:	2300      	movs	r3, #0
 80183e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183ec:	7af9      	ldrb	r1, [r7, #11]
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	687a      	ldr	r2, [r7, #4]
 80183f2:	f7ef faa9 	bl	8007948 <HAL_PCD_EP_Transmit>
 80183f6:	4603      	mov	r3, r0
 80183f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183fa:	7dfb      	ldrb	r3, [r7, #23]
 80183fc:	4618      	mov	r0, r3
 80183fe:	f000 f841 	bl	8018484 <USBD_Get_USB_Status>
 8018402:	4603      	mov	r3, r0
 8018404:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018406:	7dbb      	ldrb	r3, [r7, #22]
}
 8018408:	4618      	mov	r0, r3
 801840a:	3718      	adds	r7, #24
 801840c:	46bd      	mov	sp, r7
 801840e:	bd80      	pop	{r7, pc}

08018410 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b086      	sub	sp, #24
 8018414:	af00      	add	r7, sp, #0
 8018416:	60f8      	str	r0, [r7, #12]
 8018418:	607a      	str	r2, [r7, #4]
 801841a:	603b      	str	r3, [r7, #0]
 801841c:	460b      	mov	r3, r1
 801841e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018420:	2300      	movs	r3, #0
 8018422:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801842e:	7af9      	ldrb	r1, [r7, #11]
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	f7ef fa4d 	bl	80078d2 <HAL_PCD_EP_Receive>
 8018438:	4603      	mov	r3, r0
 801843a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801843c:	7dfb      	ldrb	r3, [r7, #23]
 801843e:	4618      	mov	r0, r3
 8018440:	f000 f820 	bl	8018484 <USBD_Get_USB_Status>
 8018444:	4603      	mov	r3, r0
 8018446:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018448:	7dbb      	ldrb	r3, [r7, #22]
}
 801844a:	4618      	mov	r0, r3
 801844c:	3718      	adds	r7, #24
 801844e:	46bd      	mov	sp, r7
 8018450:	bd80      	pop	{r7, pc}
	...

08018454 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018454:	b480      	push	{r7}
 8018456:	b083      	sub	sp, #12
 8018458:	af00      	add	r7, sp, #0
 801845a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801845c:	4b03      	ldr	r3, [pc, #12]	@ (801846c <USBD_static_malloc+0x18>)
}
 801845e:	4618      	mov	r0, r3
 8018460:	370c      	adds	r7, #12
 8018462:	46bd      	mov	sp, r7
 8018464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018468:	4770      	bx	lr
 801846a:	bf00      	nop
 801846c:	24005d88 	.word	0x24005d88

08018470 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018470:	b480      	push	{r7}
 8018472:	b083      	sub	sp, #12
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018478:	bf00      	nop
 801847a:	370c      	adds	r7, #12
 801847c:	46bd      	mov	sp, r7
 801847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018482:	4770      	bx	lr

08018484 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018484:	b480      	push	{r7}
 8018486:	b085      	sub	sp, #20
 8018488:	af00      	add	r7, sp, #0
 801848a:	4603      	mov	r3, r0
 801848c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801848e:	2300      	movs	r3, #0
 8018490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018492:	79fb      	ldrb	r3, [r7, #7]
 8018494:	2b03      	cmp	r3, #3
 8018496:	d817      	bhi.n	80184c8 <USBD_Get_USB_Status+0x44>
 8018498:	a201      	add	r2, pc, #4	@ (adr r2, 80184a0 <USBD_Get_USB_Status+0x1c>)
 801849a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801849e:	bf00      	nop
 80184a0:	080184b1 	.word	0x080184b1
 80184a4:	080184b7 	.word	0x080184b7
 80184a8:	080184bd 	.word	0x080184bd
 80184ac:	080184c3 	.word	0x080184c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80184b0:	2300      	movs	r3, #0
 80184b2:	73fb      	strb	r3, [r7, #15]
    break;
 80184b4:	e00b      	b.n	80184ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80184b6:	2303      	movs	r3, #3
 80184b8:	73fb      	strb	r3, [r7, #15]
    break;
 80184ba:	e008      	b.n	80184ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80184bc:	2301      	movs	r3, #1
 80184be:	73fb      	strb	r3, [r7, #15]
    break;
 80184c0:	e005      	b.n	80184ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80184c2:	2303      	movs	r3, #3
 80184c4:	73fb      	strb	r3, [r7, #15]
    break;
 80184c6:	e002      	b.n	80184ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80184c8:	2303      	movs	r3, #3
 80184ca:	73fb      	strb	r3, [r7, #15]
    break;
 80184cc:	bf00      	nop
  }
  return usb_status;
 80184ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	3714      	adds	r7, #20
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr

080184dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80184e0:	2200      	movs	r2, #0
 80184e2:	490e      	ldr	r1, [pc, #56]	@ (801851c <MX_USB_HOST_Init+0x40>)
 80184e4:	480e      	ldr	r0, [pc, #56]	@ (8018520 <MX_USB_HOST_Init+0x44>)
 80184e6:	f7fa fd29 	bl	8012f3c <USBH_Init>
 80184ea:	4603      	mov	r3, r0
 80184ec:	2b00      	cmp	r3, #0
 80184ee:	d001      	beq.n	80184f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80184f0:	f7e9 f854 	bl	800159c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80184f4:	490b      	ldr	r1, [pc, #44]	@ (8018524 <MX_USB_HOST_Init+0x48>)
 80184f6:	480a      	ldr	r0, [pc, #40]	@ (8018520 <MX_USB_HOST_Init+0x44>)
 80184f8:	f7fa fded 	bl	80130d6 <USBH_RegisterClass>
 80184fc:	4603      	mov	r3, r0
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d001      	beq.n	8018506 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8018502:	f7e9 f84b 	bl	800159c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8018506:	4806      	ldr	r0, [pc, #24]	@ (8018520 <MX_USB_HOST_Init+0x44>)
 8018508:	f7fa fe71 	bl	80131ee <USBH_Start>
 801850c:	4603      	mov	r3, r0
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8018512:	f7e9 f843 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8018516:	bf00      	nop
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	08018529 	.word	0x08018529
 8018520:	240061ac 	.word	0x240061ac
 8018524:	24000074 	.word	0x24000074

08018528 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8018528:	b480      	push	{r7}
 801852a:	b083      	sub	sp, #12
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	460b      	mov	r3, r1
 8018532:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8018534:	78fb      	ldrb	r3, [r7, #3]
 8018536:	3b01      	subs	r3, #1
 8018538:	2b04      	cmp	r3, #4
 801853a:	d819      	bhi.n	8018570 <USBH_UserProcess+0x48>
 801853c:	a201      	add	r2, pc, #4	@ (adr r2, 8018544 <USBH_UserProcess+0x1c>)
 801853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018542:	bf00      	nop
 8018544:	08018571 	.word	0x08018571
 8018548:	08018561 	.word	0x08018561
 801854c:	08018571 	.word	0x08018571
 8018550:	08018569 	.word	0x08018569
 8018554:	08018559 	.word	0x08018559
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8018558:	4b09      	ldr	r3, [pc, #36]	@ (8018580 <USBH_UserProcess+0x58>)
 801855a:	2203      	movs	r2, #3
 801855c:	701a      	strb	r2, [r3, #0]
  break;
 801855e:	e008      	b.n	8018572 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8018560:	4b07      	ldr	r3, [pc, #28]	@ (8018580 <USBH_UserProcess+0x58>)
 8018562:	2202      	movs	r2, #2
 8018564:	701a      	strb	r2, [r3, #0]
  break;
 8018566:	e004      	b.n	8018572 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8018568:	4b05      	ldr	r3, [pc, #20]	@ (8018580 <USBH_UserProcess+0x58>)
 801856a:	2201      	movs	r2, #1
 801856c:	701a      	strb	r2, [r3, #0]
  break;
 801856e:	e000      	b.n	8018572 <USBH_UserProcess+0x4a>

  default:
  break;
 8018570:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8018572:	bf00      	nop
 8018574:	370c      	adds	r7, #12
 8018576:	46bd      	mov	sp, r7
 8018578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857c:	4770      	bx	lr
 801857e:	bf00      	nop
 8018580:	24006590 	.word	0x24006590

08018584 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b0ba      	sub	sp, #232	@ 0xe8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801858c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8018590:	2200      	movs	r2, #0
 8018592:	601a      	str	r2, [r3, #0]
 8018594:	605a      	str	r2, [r3, #4]
 8018596:	609a      	str	r2, [r3, #8]
 8018598:	60da      	str	r2, [r3, #12]
 801859a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801859c:	f107 0310 	add.w	r3, r7, #16
 80185a0:	22c0      	movs	r2, #192	@ 0xc0
 80185a2:	2100      	movs	r1, #0
 80185a4:	4618      	mov	r0, r3
 80185a6:	f000 fb5f 	bl	8018c68 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	4a34      	ldr	r2, [pc, #208]	@ (8018680 <HAL_HCD_MspInit+0xfc>)
 80185b0:	4293      	cmp	r3, r2
 80185b2:	d161      	bne.n	8018678 <HAL_HCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80185b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80185b8:	f04f 0300 	mov.w	r3, #0
 80185bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80185c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80185c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80185c8:	f107 0310 	add.w	r3, r7, #16
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7f0 fd51 	bl	8009074 <HAL_RCCEx_PeriphCLKConfig>
 80185d2:	4603      	mov	r3, r0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d001      	beq.n	80185dc <HAL_HCD_MspInit+0x58>
    {
      Error_Handler();
 80185d8:	f7e8 ffe0 	bl	800159c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80185dc:	f7ef fd54 	bl	8008088 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80185e0:	4b28      	ldr	r3, [pc, #160]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 80185e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80185e6:	4a27      	ldr	r2, [pc, #156]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 80185e8:	f043 0302 	orr.w	r3, r3, #2
 80185ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80185f0:	4b24      	ldr	r3, [pc, #144]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 80185f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80185f6:	f003 0302 	and.w	r3, r3, #2
 80185fa:	60fb      	str	r3, [r7, #12]
 80185fc:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80185fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018606:	2300      	movs	r3, #0
 8018608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801860c:	2300      	movs	r3, #0
 801860e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018612:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8018616:	4619      	mov	r1, r3
 8018618:	481b      	ldr	r0, [pc, #108]	@ (8018688 <HAL_HCD_MspInit+0x104>)
 801861a:	f7eb fe5b 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801861e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8018622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018626:	2302      	movs	r3, #2
 8018628:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801862c:	2300      	movs	r3, #0
 801862e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018632:	2300      	movs	r3, #0
 8018634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8018638:	230c      	movs	r3, #12
 801863a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801863e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8018642:	4619      	mov	r1, r3
 8018644:	4810      	ldr	r0, [pc, #64]	@ (8018688 <HAL_HCD_MspInit+0x104>)
 8018646:	f7eb fe45 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801864a:	4b0e      	ldr	r3, [pc, #56]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 801864c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018650:	4a0c      	ldr	r2, [pc, #48]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 8018652:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8018656:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801865a:	4b0a      	ldr	r3, [pc, #40]	@ (8018684 <HAL_HCD_MspInit+0x100>)
 801865c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8018664:	60bb      	str	r3, [r7, #8]
 8018666:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8018668:	2200      	movs	r2, #0
 801866a:	2105      	movs	r1, #5
 801866c:	204d      	movs	r0, #77	@ 0x4d
 801866e:	f7eb f950 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8018672:	204d      	movs	r0, #77	@ 0x4d
 8018674:	f7eb f967 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8018678:	bf00      	nop
 801867a:	37e8      	adds	r7, #232	@ 0xe8
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}
 8018680:	40040000 	.word	0x40040000
 8018684:	58024400 	.word	0x58024400
 8018688:	58020400 	.word	0x58020400

0801868c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b082      	sub	sp, #8
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801869a:	4618      	mov	r0, r3
 801869c:	f7fb f9df 	bl	8013a5e <USBH_LL_IncTimer>
}
 80186a0:	bf00      	nop
 80186a2:	3708      	adds	r7, #8
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}

080186a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b082      	sub	sp, #8
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7fb fa1f 	bl	8013afa <USBH_LL_Connect>
}
 80186bc:	bf00      	nop
 80186be:	3708      	adds	r7, #8
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80186d2:	4618      	mov	r0, r3
 80186d4:	f7fb fa2c 	bl	8013b30 <USBH_LL_Disconnect>
}
 80186d8:	bf00      	nop
 80186da:	3708      	adds	r7, #8
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}

080186e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b082      	sub	sp, #8
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	460b      	mov	r3, r1
 80186ea:	70fb      	strb	r3, [r7, #3]
 80186ec:	4613      	mov	r3, r2
 80186ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80186f6:	4618      	mov	r0, r3
 80186f8:	f7fb fa7f 	bl	8013bfa <USBH_LL_NotifyURBChange>
#endif
}
 80186fc:	bf00      	nop
 80186fe:	3708      	adds	r7, #8
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8018712:	4618      	mov	r0, r3
 8018714:	f7fb f9cd 	bl	8013ab2 <USBH_LL_PortEnabled>
}
 8018718:	bf00      	nop
 801871a:	3708      	adds	r7, #8
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}

08018720 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b082      	sub	sp, #8
 8018724:	af00      	add	r7, sp, #0
 8018726:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801872e:	4618      	mov	r0, r3
 8018730:	f7fb f9d1 	bl	8013ad6 <USBH_LL_PortDisabled>
}
 8018734:	bf00      	nop
 8018736:	3708      	adds	r7, #8
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b082      	sub	sp, #8
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801874a:	2b00      	cmp	r3, #0
 801874c:	d12f      	bne.n	80187ae <USBH_LL_Init+0x72>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 801874e:	4a1a      	ldr	r2, [pc, #104]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	4a17      	ldr	r2, [pc, #92]	@ (80187b8 <USBH_LL_Init+0x7c>)
 801875a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801875e:	4b16      	ldr	r3, [pc, #88]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018760:	4a16      	ldr	r2, [pc, #88]	@ (80187bc <USBH_LL_Init+0x80>)
 8018762:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 8018764:	4b14      	ldr	r3, [pc, #80]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018766:	2210      	movs	r2, #16
 8018768:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 801876a:	4b13      	ldr	r3, [pc, #76]	@ (80187b8 <USBH_LL_Init+0x7c>)
 801876c:	2201      	movs	r2, #1
 801876e:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8018770:	4b11      	ldr	r3, [pc, #68]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018772:	2200      	movs	r2, #0
 8018774:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8018776:	4b10      	ldr	r3, [pc, #64]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018778:	2202      	movs	r2, #2
 801877a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801877c:	4b0e      	ldr	r3, [pc, #56]	@ (80187b8 <USBH_LL_Init+0x7c>)
 801877e:	2200      	movs	r2, #0
 8018780:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8018782:	4b0d      	ldr	r3, [pc, #52]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018784:	2200      	movs	r2, #0
 8018786:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8018788:	4b0b      	ldr	r3, [pc, #44]	@ (80187b8 <USBH_LL_Init+0x7c>)
 801878a:	2200      	movs	r2, #0
 801878c:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 801878e:	480a      	ldr	r0, [pc, #40]	@ (80187b8 <USBH_LL_Init+0x7c>)
 8018790:	f7eb ff69 	bl	8004666 <HAL_HCD_Init>
 8018794:	4603      	mov	r3, r0
 8018796:	2b00      	cmp	r3, #0
 8018798:	d001      	beq.n	801879e <USBH_LL_Init+0x62>
  {
    Error_Handler( );
 801879a:	f7e8 feff 	bl	800159c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 801879e:	4806      	ldr	r0, [pc, #24]	@ (80187b8 <USBH_LL_Init+0x7c>)
 80187a0:	f7ec fbc0 	bl	8004f24 <HAL_HCD_GetCurrentFrame>
 80187a4:	4603      	mov	r3, r0
 80187a6:	4619      	mov	r1, r3
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f7fb f949 	bl	8013a40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80187ae:	2300      	movs	r3, #0
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3708      	adds	r7, #8
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}
 80187b8:	24006594 	.word	0x24006594
 80187bc:	40040000 	.word	0x40040000

080187c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b084      	sub	sp, #16
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187c8:	2300      	movs	r3, #0
 80187ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80187cc:	2300      	movs	r3, #0
 80187ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80187d6:	4618      	mov	r0, r3
 80187d8:	f7ec fb2c 	bl	8004e34 <HAL_HCD_Start>
 80187dc:	4603      	mov	r3, r0
 80187de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80187e0:	7bfb      	ldrb	r3, [r7, #15]
 80187e2:	4618      	mov	r0, r3
 80187e4:	f000 f956 	bl	8018a94 <USBH_Get_USB_Status>
 80187e8:	4603      	mov	r3, r0
 80187ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80187ee:	4618      	mov	r0, r3
 80187f0:	3710      	adds	r7, #16
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bd80      	pop	{r7, pc}

080187f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80187f6:	b580      	push	{r7, lr}
 80187f8:	b084      	sub	sp, #16
 80187fa:	af00      	add	r7, sp, #0
 80187fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187fe:	2300      	movs	r3, #0
 8018800:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018802:	2300      	movs	r3, #0
 8018804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801880c:	4618      	mov	r0, r3
 801880e:	f7ec fb34 	bl	8004e7a <HAL_HCD_Stop>
 8018812:	4603      	mov	r3, r0
 8018814:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8018816:	7bfb      	ldrb	r3, [r7, #15]
 8018818:	4618      	mov	r0, r3
 801881a:	f000 f93b 	bl	8018a94 <USBH_Get_USB_Status>
 801881e:	4603      	mov	r3, r0
 8018820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018822:	7bbb      	ldrb	r3, [r7, #14]
}
 8018824:	4618      	mov	r0, r3
 8018826:	3710      	adds	r7, #16
 8018828:	46bd      	mov	sp, r7
 801882a:	bd80      	pop	{r7, pc}

0801882c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b084      	sub	sp, #16
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8018834:	2301      	movs	r3, #1
 8018836:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801883e:	4618      	mov	r0, r3
 8018840:	f7ec fb7e 	bl	8004f40 <HAL_HCD_GetCurrentSpeed>
 8018844:	4603      	mov	r3, r0
 8018846:	2b02      	cmp	r3, #2
 8018848:	d00c      	beq.n	8018864 <USBH_LL_GetSpeed+0x38>
 801884a:	2b02      	cmp	r3, #2
 801884c:	d80d      	bhi.n	801886a <USBH_LL_GetSpeed+0x3e>
 801884e:	2b00      	cmp	r3, #0
 8018850:	d002      	beq.n	8018858 <USBH_LL_GetSpeed+0x2c>
 8018852:	2b01      	cmp	r3, #1
 8018854:	d003      	beq.n	801885e <USBH_LL_GetSpeed+0x32>
 8018856:	e008      	b.n	801886a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8018858:	2300      	movs	r3, #0
 801885a:	73fb      	strb	r3, [r7, #15]
    break;
 801885c:	e008      	b.n	8018870 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801885e:	2301      	movs	r3, #1
 8018860:	73fb      	strb	r3, [r7, #15]
    break;
 8018862:	e005      	b.n	8018870 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8018864:	2302      	movs	r3, #2
 8018866:	73fb      	strb	r3, [r7, #15]
    break;
 8018868:	e002      	b.n	8018870 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801886a:	2301      	movs	r3, #1
 801886c:	73fb      	strb	r3, [r7, #15]
    break;
 801886e:	bf00      	nop
  }
  return  speed;
 8018870:	7bfb      	ldrb	r3, [r7, #15]
}
 8018872:	4618      	mov	r0, r3
 8018874:	3710      	adds	r7, #16
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801887a:	b580      	push	{r7, lr}
 801887c:	b084      	sub	sp, #16
 801887e:	af00      	add	r7, sp, #0
 8018880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018882:	2300      	movs	r3, #0
 8018884:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018886:	2300      	movs	r3, #0
 8018888:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018890:	4618      	mov	r0, r3
 8018892:	f7ec fb0f 	bl	8004eb4 <HAL_HCD_ResetPort>
 8018896:	4603      	mov	r3, r0
 8018898:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801889a:	7bfb      	ldrb	r3, [r7, #15]
 801889c:	4618      	mov	r0, r3
 801889e:	f000 f8f9 	bl	8018a94 <USBH_Get_USB_Status>
 80188a2:	4603      	mov	r3, r0
 80188a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80188a8:	4618      	mov	r0, r3
 80188aa:	3710      	adds	r7, #16
 80188ac:	46bd      	mov	sp, r7
 80188ae:	bd80      	pop	{r7, pc}

080188b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	460b      	mov	r3, r1
 80188ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80188c2:	78fa      	ldrb	r2, [r7, #3]
 80188c4:	4611      	mov	r1, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7ec fb17 	bl	8004efa <HAL_HCD_HC_GetXferCount>
 80188cc:	4603      	mov	r3, r0
}
 80188ce:	4618      	mov	r0, r3
 80188d0:	3708      	adds	r7, #8
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}

080188d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80188d6:	b590      	push	{r4, r7, lr}
 80188d8:	b089      	sub	sp, #36	@ 0x24
 80188da:	af04      	add	r7, sp, #16
 80188dc:	6078      	str	r0, [r7, #4]
 80188de:	4608      	mov	r0, r1
 80188e0:	4611      	mov	r1, r2
 80188e2:	461a      	mov	r2, r3
 80188e4:	4603      	mov	r3, r0
 80188e6:	70fb      	strb	r3, [r7, #3]
 80188e8:	460b      	mov	r3, r1
 80188ea:	70bb      	strb	r3, [r7, #2]
 80188ec:	4613      	mov	r3, r2
 80188ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188f0:	2300      	movs	r3, #0
 80188f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80188f4:	2300      	movs	r3, #0
 80188f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80188fe:	787c      	ldrb	r4, [r7, #1]
 8018900:	78ba      	ldrb	r2, [r7, #2]
 8018902:	78f9      	ldrb	r1, [r7, #3]
 8018904:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018906:	9302      	str	r3, [sp, #8]
 8018908:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801890c:	9301      	str	r3, [sp, #4]
 801890e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018912:	9300      	str	r3, [sp, #0]
 8018914:	4623      	mov	r3, r4
 8018916:	f7eb ff03 	bl	8004720 <HAL_HCD_HC_Init>
 801891a:	4603      	mov	r3, r0
 801891c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801891e:	7bfb      	ldrb	r3, [r7, #15]
 8018920:	4618      	mov	r0, r3
 8018922:	f000 f8b7 	bl	8018a94 <USBH_Get_USB_Status>
 8018926:	4603      	mov	r3, r0
 8018928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801892a:	7bbb      	ldrb	r3, [r7, #14]
}
 801892c:	4618      	mov	r0, r3
 801892e:	3714      	adds	r7, #20
 8018930:	46bd      	mov	sp, r7
 8018932:	bd90      	pop	{r4, r7, pc}

08018934 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	460b      	mov	r3, r1
 801893e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018940:	2300      	movs	r3, #0
 8018942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018944:	2300      	movs	r3, #0
 8018946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801894e:	78fa      	ldrb	r2, [r7, #3]
 8018950:	4611      	mov	r1, r2
 8018952:	4618      	mov	r0, r3
 8018954:	f7eb ff9c 	bl	8004890 <HAL_HCD_HC_Halt>
 8018958:	4603      	mov	r3, r0
 801895a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801895c:	7bfb      	ldrb	r3, [r7, #15]
 801895e:	4618      	mov	r0, r3
 8018960:	f000 f898 	bl	8018a94 <USBH_Get_USB_Status>
 8018964:	4603      	mov	r3, r0
 8018966:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018968:	7bbb      	ldrb	r3, [r7, #14]
}
 801896a:	4618      	mov	r0, r3
 801896c:	3710      	adds	r7, #16
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}

08018972 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8018972:	b590      	push	{r4, r7, lr}
 8018974:	b089      	sub	sp, #36	@ 0x24
 8018976:	af04      	add	r7, sp, #16
 8018978:	6078      	str	r0, [r7, #4]
 801897a:	4608      	mov	r0, r1
 801897c:	4611      	mov	r1, r2
 801897e:	461a      	mov	r2, r3
 8018980:	4603      	mov	r3, r0
 8018982:	70fb      	strb	r3, [r7, #3]
 8018984:	460b      	mov	r3, r1
 8018986:	70bb      	strb	r3, [r7, #2]
 8018988:	4613      	mov	r3, r2
 801898a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801898c:	2300      	movs	r3, #0
 801898e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018990:	2300      	movs	r3, #0
 8018992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801899a:	787c      	ldrb	r4, [r7, #1]
 801899c:	78ba      	ldrb	r2, [r7, #2]
 801899e:	78f9      	ldrb	r1, [r7, #3]
 80189a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80189a4:	9303      	str	r3, [sp, #12]
 80189a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80189a8:	9302      	str	r3, [sp, #8]
 80189aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ac:	9301      	str	r3, [sp, #4]
 80189ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80189b2:	9300      	str	r3, [sp, #0]
 80189b4:	4623      	mov	r3, r4
 80189b6:	f7eb ff8f 	bl	80048d8 <HAL_HCD_HC_SubmitRequest>
 80189ba:	4603      	mov	r3, r0
 80189bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80189be:	7bfb      	ldrb	r3, [r7, #15]
 80189c0:	4618      	mov	r0, r3
 80189c2:	f000 f867 	bl	8018a94 <USBH_Get_USB_Status>
 80189c6:	4603      	mov	r3, r0
 80189c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80189ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3714      	adds	r7, #20
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bd90      	pop	{r4, r7, pc}

080189d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	460b      	mov	r3, r1
 80189de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80189e6:	78fa      	ldrb	r2, [r7, #3]
 80189e8:	4611      	mov	r1, r2
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7ec fa70 	bl	8004ed0 <HAL_HCD_HC_GetURBState>
 80189f0:	4603      	mov	r3, r0
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}

080189fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80189fa:	b580      	push	{r7, lr}
 80189fc:	b082      	sub	sp, #8
 80189fe:	af00      	add	r7, sp, #0
 8018a00:	6078      	str	r0, [r7, #4]
 8018a02:	460b      	mov	r3, r1
 8018a04:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 8018a06:	20c8      	movs	r0, #200	@ 0xc8
 8018a08:	f7e9 fdee 	bl	80025e8 <HAL_Delay>
  return USBH_OK;
 8018a0c:	2300      	movs	r3, #0
}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3708      	adds	r7, #8
 8018a12:	46bd      	mov	sp, r7
 8018a14:	bd80      	pop	{r7, pc}

08018a16 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8018a16:	b480      	push	{r7}
 8018a18:	b085      	sub	sp, #20
 8018a1a:	af00      	add	r7, sp, #0
 8018a1c:	6078      	str	r0, [r7, #4]
 8018a1e:	460b      	mov	r3, r1
 8018a20:	70fb      	strb	r3, [r7, #3]
 8018a22:	4613      	mov	r3, r2
 8018a24:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8018a2c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8018a2e:	78fa      	ldrb	r2, [r7, #3]
 8018a30:	68f9      	ldr	r1, [r7, #12]
 8018a32:	4613      	mov	r3, r2
 8018a34:	011b      	lsls	r3, r3, #4
 8018a36:	1a9b      	subs	r3, r3, r2
 8018a38:	009b      	lsls	r3, r3, #2
 8018a3a:	440b      	add	r3, r1
 8018a3c:	3317      	adds	r3, #23
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d00a      	beq.n	8018a5a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8018a44:	78fa      	ldrb	r2, [r7, #3]
 8018a46:	68f9      	ldr	r1, [r7, #12]
 8018a48:	4613      	mov	r3, r2
 8018a4a:	011b      	lsls	r3, r3, #4
 8018a4c:	1a9b      	subs	r3, r3, r2
 8018a4e:	009b      	lsls	r3, r3, #2
 8018a50:	440b      	add	r3, r1
 8018a52:	333c      	adds	r3, #60	@ 0x3c
 8018a54:	78ba      	ldrb	r2, [r7, #2]
 8018a56:	701a      	strb	r2, [r3, #0]
 8018a58:	e009      	b.n	8018a6e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8018a5a:	78fa      	ldrb	r2, [r7, #3]
 8018a5c:	68f9      	ldr	r1, [r7, #12]
 8018a5e:	4613      	mov	r3, r2
 8018a60:	011b      	lsls	r3, r3, #4
 8018a62:	1a9b      	subs	r3, r3, r2
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	440b      	add	r3, r1
 8018a68:	333d      	adds	r3, #61	@ 0x3d
 8018a6a:	78ba      	ldrb	r2, [r7, #2]
 8018a6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8018a6e:	2300      	movs	r3, #0
}
 8018a70:	4618      	mov	r0, r3
 8018a72:	3714      	adds	r7, #20
 8018a74:	46bd      	mov	sp, r7
 8018a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a7a:	4770      	bx	lr

08018a7c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8018a7c:	b580      	push	{r7, lr}
 8018a7e:	b082      	sub	sp, #8
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f7e9 fdaf 	bl	80025e8 <HAL_Delay>
}
 8018a8a:	bf00      	nop
 8018a8c:	3708      	adds	r7, #8
 8018a8e:	46bd      	mov	sp, r7
 8018a90:	bd80      	pop	{r7, pc}
	...

08018a94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018a94:	b480      	push	{r7}
 8018a96:	b085      	sub	sp, #20
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018aa2:	79fb      	ldrb	r3, [r7, #7]
 8018aa4:	2b03      	cmp	r3, #3
 8018aa6:	d817      	bhi.n	8018ad8 <USBH_Get_USB_Status+0x44>
 8018aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8018ab0 <USBH_Get_USB_Status+0x1c>)
 8018aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018aae:	bf00      	nop
 8018ab0:	08018ac1 	.word	0x08018ac1
 8018ab4:	08018ac7 	.word	0x08018ac7
 8018ab8:	08018acd 	.word	0x08018acd
 8018abc:	08018ad3 	.word	0x08018ad3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8018ac4:	e00b      	b.n	8018ade <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8018ac6:	2302      	movs	r3, #2
 8018ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8018aca:	e008      	b.n	8018ade <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8018acc:	2301      	movs	r3, #1
 8018ace:	73fb      	strb	r3, [r7, #15]
    break;
 8018ad0:	e005      	b.n	8018ade <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8018ad2:	2302      	movs	r3, #2
 8018ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8018ad6:	e002      	b.n	8018ade <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8018ad8:	2302      	movs	r3, #2
 8018ada:	73fb      	strb	r3, [r7, #15]
    break;
 8018adc:	bf00      	nop
  }
  return usb_status;
 8018ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3714      	adds	r7, #20
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr

08018aec <malloc>:
 8018aec:	4b02      	ldr	r3, [pc, #8]	@ (8018af8 <malloc+0xc>)
 8018aee:	4601      	mov	r1, r0
 8018af0:	6818      	ldr	r0, [r3, #0]
 8018af2:	f000 b82d 	b.w	8018b50 <_malloc_r>
 8018af6:	bf00      	nop
 8018af8:	24000108 	.word	0x24000108

08018afc <free>:
 8018afc:	4b02      	ldr	r3, [pc, #8]	@ (8018b08 <free+0xc>)
 8018afe:	4601      	mov	r1, r0
 8018b00:	6818      	ldr	r0, [r3, #0]
 8018b02:	f000 b903 	b.w	8018d0c <_free_r>
 8018b06:	bf00      	nop
 8018b08:	24000108 	.word	0x24000108

08018b0c <sbrk_aligned>:
 8018b0c:	b570      	push	{r4, r5, r6, lr}
 8018b0e:	4e0f      	ldr	r6, [pc, #60]	@ (8018b4c <sbrk_aligned+0x40>)
 8018b10:	460c      	mov	r4, r1
 8018b12:	6831      	ldr	r1, [r6, #0]
 8018b14:	4605      	mov	r5, r0
 8018b16:	b911      	cbnz	r1, 8018b1e <sbrk_aligned+0x12>
 8018b18:	f000 f8ae 	bl	8018c78 <_sbrk_r>
 8018b1c:	6030      	str	r0, [r6, #0]
 8018b1e:	4621      	mov	r1, r4
 8018b20:	4628      	mov	r0, r5
 8018b22:	f000 f8a9 	bl	8018c78 <_sbrk_r>
 8018b26:	1c43      	adds	r3, r0, #1
 8018b28:	d103      	bne.n	8018b32 <sbrk_aligned+0x26>
 8018b2a:	f04f 34ff 	mov.w	r4, #4294967295
 8018b2e:	4620      	mov	r0, r4
 8018b30:	bd70      	pop	{r4, r5, r6, pc}
 8018b32:	1cc4      	adds	r4, r0, #3
 8018b34:	f024 0403 	bic.w	r4, r4, #3
 8018b38:	42a0      	cmp	r0, r4
 8018b3a:	d0f8      	beq.n	8018b2e <sbrk_aligned+0x22>
 8018b3c:	1a21      	subs	r1, r4, r0
 8018b3e:	4628      	mov	r0, r5
 8018b40:	f000 f89a 	bl	8018c78 <_sbrk_r>
 8018b44:	3001      	adds	r0, #1
 8018b46:	d1f2      	bne.n	8018b2e <sbrk_aligned+0x22>
 8018b48:	e7ef      	b.n	8018b2a <sbrk_aligned+0x1e>
 8018b4a:	bf00      	nop
 8018b4c:	24006974 	.word	0x24006974

08018b50 <_malloc_r>:
 8018b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b54:	1ccd      	adds	r5, r1, #3
 8018b56:	f025 0503 	bic.w	r5, r5, #3
 8018b5a:	3508      	adds	r5, #8
 8018b5c:	2d0c      	cmp	r5, #12
 8018b5e:	bf38      	it	cc
 8018b60:	250c      	movcc	r5, #12
 8018b62:	2d00      	cmp	r5, #0
 8018b64:	4606      	mov	r6, r0
 8018b66:	db01      	blt.n	8018b6c <_malloc_r+0x1c>
 8018b68:	42a9      	cmp	r1, r5
 8018b6a:	d904      	bls.n	8018b76 <_malloc_r+0x26>
 8018b6c:	230c      	movs	r3, #12
 8018b6e:	6033      	str	r3, [r6, #0]
 8018b70:	2000      	movs	r0, #0
 8018b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018c4c <_malloc_r+0xfc>
 8018b7a:	f000 f869 	bl	8018c50 <__malloc_lock>
 8018b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8018b82:	461c      	mov	r4, r3
 8018b84:	bb44      	cbnz	r4, 8018bd8 <_malloc_r+0x88>
 8018b86:	4629      	mov	r1, r5
 8018b88:	4630      	mov	r0, r6
 8018b8a:	f7ff ffbf 	bl	8018b0c <sbrk_aligned>
 8018b8e:	1c43      	adds	r3, r0, #1
 8018b90:	4604      	mov	r4, r0
 8018b92:	d158      	bne.n	8018c46 <_malloc_r+0xf6>
 8018b94:	f8d8 4000 	ldr.w	r4, [r8]
 8018b98:	4627      	mov	r7, r4
 8018b9a:	2f00      	cmp	r7, #0
 8018b9c:	d143      	bne.n	8018c26 <_malloc_r+0xd6>
 8018b9e:	2c00      	cmp	r4, #0
 8018ba0:	d04b      	beq.n	8018c3a <_malloc_r+0xea>
 8018ba2:	6823      	ldr	r3, [r4, #0]
 8018ba4:	4639      	mov	r1, r7
 8018ba6:	4630      	mov	r0, r6
 8018ba8:	eb04 0903 	add.w	r9, r4, r3
 8018bac:	f000 f864 	bl	8018c78 <_sbrk_r>
 8018bb0:	4581      	cmp	r9, r0
 8018bb2:	d142      	bne.n	8018c3a <_malloc_r+0xea>
 8018bb4:	6821      	ldr	r1, [r4, #0]
 8018bb6:	1a6d      	subs	r5, r5, r1
 8018bb8:	4629      	mov	r1, r5
 8018bba:	4630      	mov	r0, r6
 8018bbc:	f7ff ffa6 	bl	8018b0c <sbrk_aligned>
 8018bc0:	3001      	adds	r0, #1
 8018bc2:	d03a      	beq.n	8018c3a <_malloc_r+0xea>
 8018bc4:	6823      	ldr	r3, [r4, #0]
 8018bc6:	442b      	add	r3, r5
 8018bc8:	6023      	str	r3, [r4, #0]
 8018bca:	f8d8 3000 	ldr.w	r3, [r8]
 8018bce:	685a      	ldr	r2, [r3, #4]
 8018bd0:	bb62      	cbnz	r2, 8018c2c <_malloc_r+0xdc>
 8018bd2:	f8c8 7000 	str.w	r7, [r8]
 8018bd6:	e00f      	b.n	8018bf8 <_malloc_r+0xa8>
 8018bd8:	6822      	ldr	r2, [r4, #0]
 8018bda:	1b52      	subs	r2, r2, r5
 8018bdc:	d420      	bmi.n	8018c20 <_malloc_r+0xd0>
 8018bde:	2a0b      	cmp	r2, #11
 8018be0:	d917      	bls.n	8018c12 <_malloc_r+0xc2>
 8018be2:	1961      	adds	r1, r4, r5
 8018be4:	42a3      	cmp	r3, r4
 8018be6:	6025      	str	r5, [r4, #0]
 8018be8:	bf18      	it	ne
 8018bea:	6059      	strne	r1, [r3, #4]
 8018bec:	6863      	ldr	r3, [r4, #4]
 8018bee:	bf08      	it	eq
 8018bf0:	f8c8 1000 	streq.w	r1, [r8]
 8018bf4:	5162      	str	r2, [r4, r5]
 8018bf6:	604b      	str	r3, [r1, #4]
 8018bf8:	4630      	mov	r0, r6
 8018bfa:	f000 f82f 	bl	8018c5c <__malloc_unlock>
 8018bfe:	f104 000b 	add.w	r0, r4, #11
 8018c02:	1d23      	adds	r3, r4, #4
 8018c04:	f020 0007 	bic.w	r0, r0, #7
 8018c08:	1ac2      	subs	r2, r0, r3
 8018c0a:	bf1c      	itt	ne
 8018c0c:	1a1b      	subne	r3, r3, r0
 8018c0e:	50a3      	strne	r3, [r4, r2]
 8018c10:	e7af      	b.n	8018b72 <_malloc_r+0x22>
 8018c12:	6862      	ldr	r2, [r4, #4]
 8018c14:	42a3      	cmp	r3, r4
 8018c16:	bf0c      	ite	eq
 8018c18:	f8c8 2000 	streq.w	r2, [r8]
 8018c1c:	605a      	strne	r2, [r3, #4]
 8018c1e:	e7eb      	b.n	8018bf8 <_malloc_r+0xa8>
 8018c20:	4623      	mov	r3, r4
 8018c22:	6864      	ldr	r4, [r4, #4]
 8018c24:	e7ae      	b.n	8018b84 <_malloc_r+0x34>
 8018c26:	463c      	mov	r4, r7
 8018c28:	687f      	ldr	r7, [r7, #4]
 8018c2a:	e7b6      	b.n	8018b9a <_malloc_r+0x4a>
 8018c2c:	461a      	mov	r2, r3
 8018c2e:	685b      	ldr	r3, [r3, #4]
 8018c30:	42a3      	cmp	r3, r4
 8018c32:	d1fb      	bne.n	8018c2c <_malloc_r+0xdc>
 8018c34:	2300      	movs	r3, #0
 8018c36:	6053      	str	r3, [r2, #4]
 8018c38:	e7de      	b.n	8018bf8 <_malloc_r+0xa8>
 8018c3a:	230c      	movs	r3, #12
 8018c3c:	6033      	str	r3, [r6, #0]
 8018c3e:	4630      	mov	r0, r6
 8018c40:	f000 f80c 	bl	8018c5c <__malloc_unlock>
 8018c44:	e794      	b.n	8018b70 <_malloc_r+0x20>
 8018c46:	6005      	str	r5, [r0, #0]
 8018c48:	e7d6      	b.n	8018bf8 <_malloc_r+0xa8>
 8018c4a:	bf00      	nop
 8018c4c:	24006978 	.word	0x24006978

08018c50 <__malloc_lock>:
 8018c50:	4801      	ldr	r0, [pc, #4]	@ (8018c58 <__malloc_lock+0x8>)
 8018c52:	f000 b84b 	b.w	8018cec <__retarget_lock_acquire_recursive>
 8018c56:	bf00      	nop
 8018c58:	24006ab8 	.word	0x24006ab8

08018c5c <__malloc_unlock>:
 8018c5c:	4801      	ldr	r0, [pc, #4]	@ (8018c64 <__malloc_unlock+0x8>)
 8018c5e:	f000 b846 	b.w	8018cee <__retarget_lock_release_recursive>
 8018c62:	bf00      	nop
 8018c64:	24006ab8 	.word	0x24006ab8

08018c68 <memset>:
 8018c68:	4402      	add	r2, r0
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	4293      	cmp	r3, r2
 8018c6e:	d100      	bne.n	8018c72 <memset+0xa>
 8018c70:	4770      	bx	lr
 8018c72:	f803 1b01 	strb.w	r1, [r3], #1
 8018c76:	e7f9      	b.n	8018c6c <memset+0x4>

08018c78 <_sbrk_r>:
 8018c78:	b538      	push	{r3, r4, r5, lr}
 8018c7a:	4d06      	ldr	r5, [pc, #24]	@ (8018c94 <_sbrk_r+0x1c>)
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	4604      	mov	r4, r0
 8018c80:	4608      	mov	r0, r1
 8018c82:	602b      	str	r3, [r5, #0]
 8018c84:	f7e9 fb04 	bl	8002290 <_sbrk>
 8018c88:	1c43      	adds	r3, r0, #1
 8018c8a:	d102      	bne.n	8018c92 <_sbrk_r+0x1a>
 8018c8c:	682b      	ldr	r3, [r5, #0]
 8018c8e:	b103      	cbz	r3, 8018c92 <_sbrk_r+0x1a>
 8018c90:	6023      	str	r3, [r4, #0]
 8018c92:	bd38      	pop	{r3, r4, r5, pc}
 8018c94:	24006ab4 	.word	0x24006ab4

08018c98 <__errno>:
 8018c98:	4b01      	ldr	r3, [pc, #4]	@ (8018ca0 <__errno+0x8>)
 8018c9a:	6818      	ldr	r0, [r3, #0]
 8018c9c:	4770      	bx	lr
 8018c9e:	bf00      	nop
 8018ca0:	24000108 	.word	0x24000108

08018ca4 <__libc_init_array>:
 8018ca4:	b570      	push	{r4, r5, r6, lr}
 8018ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8018cdc <__libc_init_array+0x38>)
 8018ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8018ce0 <__libc_init_array+0x3c>)
 8018caa:	1b64      	subs	r4, r4, r5
 8018cac:	10a4      	asrs	r4, r4, #2
 8018cae:	2600      	movs	r6, #0
 8018cb0:	42a6      	cmp	r6, r4
 8018cb2:	d109      	bne.n	8018cc8 <__libc_init_array+0x24>
 8018cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8018ce4 <__libc_init_array+0x40>)
 8018cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8018ce8 <__libc_init_array+0x44>)
 8018cb8:	f000 f872 	bl	8018da0 <_init>
 8018cbc:	1b64      	subs	r4, r4, r5
 8018cbe:	10a4      	asrs	r4, r4, #2
 8018cc0:	2600      	movs	r6, #0
 8018cc2:	42a6      	cmp	r6, r4
 8018cc4:	d105      	bne.n	8018cd2 <__libc_init_array+0x2e>
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ccc:	4798      	blx	r3
 8018cce:	3601      	adds	r6, #1
 8018cd0:	e7ee      	b.n	8018cb0 <__libc_init_array+0xc>
 8018cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018cd6:	4798      	blx	r3
 8018cd8:	3601      	adds	r6, #1
 8018cda:	e7f2      	b.n	8018cc2 <__libc_init_array+0x1e>
 8018cdc:	08018f00 	.word	0x08018f00
 8018ce0:	08018f00 	.word	0x08018f00
 8018ce4:	08018f00 	.word	0x08018f00
 8018ce8:	08018f04 	.word	0x08018f04

08018cec <__retarget_lock_acquire_recursive>:
 8018cec:	4770      	bx	lr

08018cee <__retarget_lock_release_recursive>:
 8018cee:	4770      	bx	lr

08018cf0 <memcpy>:
 8018cf0:	440a      	add	r2, r1
 8018cf2:	4291      	cmp	r1, r2
 8018cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8018cf8:	d100      	bne.n	8018cfc <memcpy+0xc>
 8018cfa:	4770      	bx	lr
 8018cfc:	b510      	push	{r4, lr}
 8018cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018d06:	4291      	cmp	r1, r2
 8018d08:	d1f9      	bne.n	8018cfe <memcpy+0xe>
 8018d0a:	bd10      	pop	{r4, pc}

08018d0c <_free_r>:
 8018d0c:	b538      	push	{r3, r4, r5, lr}
 8018d0e:	4605      	mov	r5, r0
 8018d10:	2900      	cmp	r1, #0
 8018d12:	d041      	beq.n	8018d98 <_free_r+0x8c>
 8018d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018d18:	1f0c      	subs	r4, r1, #4
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	bfb8      	it	lt
 8018d1e:	18e4      	addlt	r4, r4, r3
 8018d20:	f7ff ff96 	bl	8018c50 <__malloc_lock>
 8018d24:	4a1d      	ldr	r2, [pc, #116]	@ (8018d9c <_free_r+0x90>)
 8018d26:	6813      	ldr	r3, [r2, #0]
 8018d28:	b933      	cbnz	r3, 8018d38 <_free_r+0x2c>
 8018d2a:	6063      	str	r3, [r4, #4]
 8018d2c:	6014      	str	r4, [r2, #0]
 8018d2e:	4628      	mov	r0, r5
 8018d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d34:	f7ff bf92 	b.w	8018c5c <__malloc_unlock>
 8018d38:	42a3      	cmp	r3, r4
 8018d3a:	d908      	bls.n	8018d4e <_free_r+0x42>
 8018d3c:	6820      	ldr	r0, [r4, #0]
 8018d3e:	1821      	adds	r1, r4, r0
 8018d40:	428b      	cmp	r3, r1
 8018d42:	bf01      	itttt	eq
 8018d44:	6819      	ldreq	r1, [r3, #0]
 8018d46:	685b      	ldreq	r3, [r3, #4]
 8018d48:	1809      	addeq	r1, r1, r0
 8018d4a:	6021      	streq	r1, [r4, #0]
 8018d4c:	e7ed      	b.n	8018d2a <_free_r+0x1e>
 8018d4e:	461a      	mov	r2, r3
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	b10b      	cbz	r3, 8018d58 <_free_r+0x4c>
 8018d54:	42a3      	cmp	r3, r4
 8018d56:	d9fa      	bls.n	8018d4e <_free_r+0x42>
 8018d58:	6811      	ldr	r1, [r2, #0]
 8018d5a:	1850      	adds	r0, r2, r1
 8018d5c:	42a0      	cmp	r0, r4
 8018d5e:	d10b      	bne.n	8018d78 <_free_r+0x6c>
 8018d60:	6820      	ldr	r0, [r4, #0]
 8018d62:	4401      	add	r1, r0
 8018d64:	1850      	adds	r0, r2, r1
 8018d66:	4283      	cmp	r3, r0
 8018d68:	6011      	str	r1, [r2, #0]
 8018d6a:	d1e0      	bne.n	8018d2e <_free_r+0x22>
 8018d6c:	6818      	ldr	r0, [r3, #0]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	6053      	str	r3, [r2, #4]
 8018d72:	4408      	add	r0, r1
 8018d74:	6010      	str	r0, [r2, #0]
 8018d76:	e7da      	b.n	8018d2e <_free_r+0x22>
 8018d78:	d902      	bls.n	8018d80 <_free_r+0x74>
 8018d7a:	230c      	movs	r3, #12
 8018d7c:	602b      	str	r3, [r5, #0]
 8018d7e:	e7d6      	b.n	8018d2e <_free_r+0x22>
 8018d80:	6820      	ldr	r0, [r4, #0]
 8018d82:	1821      	adds	r1, r4, r0
 8018d84:	428b      	cmp	r3, r1
 8018d86:	bf04      	itt	eq
 8018d88:	6819      	ldreq	r1, [r3, #0]
 8018d8a:	685b      	ldreq	r3, [r3, #4]
 8018d8c:	6063      	str	r3, [r4, #4]
 8018d8e:	bf04      	itt	eq
 8018d90:	1809      	addeq	r1, r1, r0
 8018d92:	6021      	streq	r1, [r4, #0]
 8018d94:	6054      	str	r4, [r2, #4]
 8018d96:	e7ca      	b.n	8018d2e <_free_r+0x22>
 8018d98:	bd38      	pop	{r3, r4, r5, pc}
 8018d9a:	bf00      	nop
 8018d9c:	24006978 	.word	0x24006978

08018da0 <_init>:
 8018da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018da2:	bf00      	nop
 8018da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018da6:	bc08      	pop	{r3}
 8018da8:	469e      	mov	lr, r3
 8018daa:	4770      	bx	lr

08018dac <_fini>:
 8018dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dae:	bf00      	nop
 8018db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018db2:	bc08      	pop	{r3}
 8018db4:	469e      	mov	lr, r3
 8018db6:	4770      	bx	lr
